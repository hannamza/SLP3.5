// DTreeCtrl.cpp : 구현 파일입니다.
//

//#include "stdafx.h"
#include <afxwin.h>         // MFC 핵심 및 표준 구성 요소입니다.
#include <afxext.h>         // MFC 확장입니다.

#include <afxcmn.h>             // Windows 공용 컨트롤에 대한 MFC 지원입니다.
#include "DTreeCtrl.h"


IMPLEMENT_DYNAMIC(CDTreeCtrl, CTreeCtrl)

CDTreeCtrl::CDTreeCtrl()
{
	m_hTriggerItem = nullptr;
	m_bAllowRootDrag = FALSE;
	m_pDragImage = nullptr;
	m_bDragging = FALSE;
	m_pDropWnd = nullptr;
	m_bEventSendTargetContainer = false;
	m_uCursorResourceID = 0;
	m_bAllowDrag = FALSE;
	m_bCheckClickSelect = TRUE;
	BuildBitmap();
}

CDTreeCtrl::~CDTreeCtrl()
{
	m_CheckImageList.DeleteImageList();
	m_bmCheck.DeleteObject();

	RemoveCheckList(&m_vtDragCheckItem);
	m_vtDropWnd.clear();
}


BEGIN_MESSAGE_MAP(CDTreeCtrl, CTreeCtrl)
	ON_NOTIFY_REFLECT(NM_CLICK, &CDTreeCtrl::OnNMClick)
	ON_NOTIFY_REFLECT(TVN_KEYDOWN, &CDTreeCtrl::OnTvnKeydown)
	ON_NOTIFY_REFLECT(TVN_BEGINDRAG, &CDTreeCtrl::OnTvnBegindrag)
	ON_WM_MOUSEMOVE()
	ON_WM_LBUTTONUP()
	ON_WM_LBUTTONDOWN()
END_MESSAGE_MAP()


TVCS_CHECKSTATE CDTreeCtrl::GetCheck(HTREEITEM hTreeItem) const
{
	TVITEM item;
	item.mask = TVIF_HANDLE | TVIF_STATE;
	item.hItem = hTreeItem;
	item.stateMask = TVIS_STATEIMAGEMASK;
	::SendMessage(m_hWnd, TVM_GETITEM, 0, (LPARAM)&item);

	return STATE2TVCS(item.state);
}
BOOL CDTreeCtrl::SetOneItemCheck(HTREEITEM hTreeItem, TVCS_CHECKSTATE NewCheckState)
{
	TVCS_CHECKSTATE tsOld = GetCheck(hTreeItem);
	if (NewCheckState == tsOld)
		return TRUE;
	SendTVNCheck(hTreeItem, NewCheckState, tsOld);

	TVITEM item;
	item.mask = TVIF_HANDLE | TVIF_STATE;
	item.hItem = hTreeItem;
	item.stateMask = TVIS_STATEIMAGEMASK;
	item.state = TVCS2STATE(NewCheckState);
	BOOL bReturn = CTreeCtrl::SetItemState(hTreeItem, INDEXTOSTATEIMAGEMASK(NewCheckState + 1), TVIS_STATEIMAGEMASK);
	return bReturn;
	// Set wParam to a 0xFEB1 to flag this message in our OnTvmSetitem handler
	//return (BOOL)::SendMessage(m_hWnd, TVM_SETITEM, 0xFEB1, (LPARAM)&item);
}

BOOL CDTreeCtrl::SetCheck(HTREEITEM hTreeItem, TVCS_CHECKSTATE NewCheckState)
{
	BOOL bRet = FALSE;
	bRet = SetOneItemCheck(hTreeItem, NewCheckState);
	TravelCheckChildren(hTreeItem, NewCheckState);;
	TravelCheckSiblingAndParent(hTreeItem, NewCheckState);;
	return bRet;
}

BOOL CDTreeCtrl::TravelCheckChildren(HTREEITEM hItem, TVCS_CHECKSTATE NewCheckState)
{
	BOOL bRet = TRUE;
	HTREEITEM hChildItem = GetChildItem(hItem);
	while (hChildItem != NULL)
	{
		TVCS_CHECKSTATE tsChild = GetCheck(hChildItem);
		if (tsChild != TVCS_NONE)
		{
			bRet = SetOneItemCheck(hChildItem, NewCheckState);
		}
		// recursively check its children
		TravelCheckChildren(hChildItem, NewCheckState);
		hChildItem = GetNextSiblingItem(hChildItem);
	}
	return bRet;
}


void CDTreeCtrl::TravelCheckSiblingAndParent(HTREEITEM hItem, TVCS_CHECKSTATE nState)
{
	BOOL bRet = TRUE;
	HTREEITEM hParentItem = GetParentItem(hItem);
	if (NULL == hParentItem)
		return;
	// Check the status of all the sibling node
	HTREEITEM hSiblingItem = GetChildItem(hParentItem);
	while (hSiblingItem != NULL)
	{
		TVCS_CHECKSTATE tsSibling = GetCheck(hSiblingItem);
		// If any of them is different with hItem, we have to do partial check for all of its parents.
		if (tsSibling != nState && tsSibling != TVCS_NONE)
		{
			while (hParentItem != NULL)
			{
				TVCS_CHECKSTATE nParentState = GetCheck(hParentItem);
				if (nParentState != TVCS_NONE)
				{
					SetOneItemCheck(hParentItem, TVCS_INDETERMINATE);
				}
				hParentItem = GetParentItem(hParentItem);
			}
			return;	// Done.
		}
		hSiblingItem = GetNextSiblingItem(hSiblingItem);
	}
	// If we come to here, that means we still need to check the parent's sibling
	TVCS_CHECKSTATE nParentState = GetCheck(hParentItem);
	if (nParentState != TVCS_NONE)
	{
		SetOneItemCheck(hParentItem, nState);
	}
	TravelCheckSiblingAndParent(hParentItem, nState);
	//return bRet;
}

LRESULT CDTreeCtrl::SendCheckEventBegin(HTREEITEM hTreeItem)
{
	if (::IsWindow(GetParent()->m_hWnd))
	{
		NMTVNCHECK tvn = { 0 };
		tvn.hdr.code = TVN_CHECK_PROC_BEGIN;
		tvn.hdr.hwndFrom = GetSafeHwnd();
		tvn.hdr.idFrom = GetDlgCtrlID();
		tvn.hTreeItem = hTreeItem;
		tvn.lParam = (LPARAM)GetItemData(hTreeItem);
		tvn.NewCheckState = TVCS_NONE;
		tvn.OldCheckState = TVCS_NONE;
		tvn.TriggerItem = m_hTriggerItem;

		if (0 != GetParent()->SendMessage(WM_NOTIFY, (WPARAM)tvn.hdr.idFrom, (LPARAM)&tvn)
			&& m_hTriggerItem == hTreeItem)
		{
			// Setting this to true stops the checkbox from changing
			// Handled and reset in OnMNTvStateImageChanging
			return 1;
		}
	}

	return 0;
}

LRESULT CDTreeCtrl::SendCheckEventEnd(HTREEITEM hTreeItem)
{
	if (::IsWindow(GetParent()->m_hWnd))
	{
		NMTVNCHECK tvn = { 0 };
		tvn.hdr.code = TVN_CHECK_PROC_END;
		tvn.hdr.hwndFrom = GetSafeHwnd();
		tvn.hdr.idFrom = GetDlgCtrlID();
		tvn.hTreeItem = hTreeItem;
		tvn.lParam = (LPARAM)GetItemData(hTreeItem);
		tvn.NewCheckState = TVCS_NONE;
		tvn.OldCheckState = TVCS_NONE;
		tvn.TriggerItem = m_hTriggerItem;

		if (0 != GetParent()->SendMessage(WM_NOTIFY, (WPARAM)tvn.hdr.idFrom, (LPARAM)&tvn)
			&& m_hTriggerItem == hTreeItem)
		{
			// Setting this to true stops the checkbox from changing
			// Handled and reset in OnMNTvStateImageChanging
			return 1;
		}
	}

	return 0;
}

LRESULT CDTreeCtrl::SendTVNCheck(HTREEITEM hTreeItem, TVCS_CHECKSTATE NewCheckState, TVCS_CHECKSTATE OldCheckState)
{
	if (::IsWindow(GetParent()->m_hWnd))
	{
		NMTVNCHECK tvn = { 0 };
		tvn.hdr.code = TVN_CHANGE_CHECK_ITEM;
		tvn.hdr.hwndFrom = GetSafeHwnd();
		tvn.hdr.idFrom = GetDlgCtrlID();
		tvn.hTreeItem = hTreeItem;
		tvn.lParam = (LPARAM)GetItemData(hTreeItem);
		tvn.NewCheckState = NewCheckState;
		tvn.OldCheckState = OldCheckState;
		tvn.TriggerItem = m_hTriggerItem;

		if (0 != GetParent()->SendMessage(WM_NOTIFY, (WPARAM)tvn.hdr.idFrom, (LPARAM)&tvn)
			&& m_hTriggerItem == hTreeItem)
		{
			// Setting this to true stops the checkbox from changing
			// Handled and reset in OnMNTvStateImageChanging
			//m_bTvnCheckReturnedNonzero = true;
			return 1;
		}
	}

	return 0;
}

LRESULT CDTreeCtrl::SendTVNDropedItem(HTREEITEM hTreeItem, CWnd *pDropWnd, CWnd * pDragWnd)
{
	int i = 0;
	NMTVNDROPITEMS tvn = { 0 };
	tvn.hdr.code = TVN_DROPED_ITEM;
	tvn.hdr.hwndFrom = GetSafeHwnd();
	tvn.hdr.idFrom = GetDlgCtrlID();
	tvn.hTreeItem = hTreeItem;
	tvn.lParam = (LPARAM)GetItemData(hTreeItem);
	if (pDragWnd == nullptr)
		pDragWnd = this;
	tvn.pDragWnd = pDragWnd;
	tvn.pDropWnd = pDropWnd;
	tvn.vtDropItems = m_vtDragCheckItem;

	if (m_bEventSendTargetContainer)
	{
		if (pDropWnd != nullptr && pDropWnd->GetParent())
		{
			CWnd * pSendWnd = nullptr;
			pSendWnd = pDropWnd->GetParent();

			for (; i < 3; i++)
			{
				if (pSendWnd->IsKindOf(RUNTIME_CLASS(CFormView)))
					break;
				pSendWnd = pSendWnd->GetParent();
			}

			if (0 != pSendWnd->SendMessage(WM_NOTIFY, (WPARAM)tvn.hdr.idFrom, (LPARAM)&tvn)
				&& m_hTriggerItem == hTreeItem)
			{
				return 1;
			}
		}
	}
	else
	{
		if (0 != GetParent()->SendMessage(WM_NOTIFY, (WPARAM)tvn.hdr.idFrom, (LPARAM)&tvn)
			&& m_hTriggerItem == hTreeItem)
		{
			return 1;
		}
	}


	return 0;
}

// CDTreeCtrl 메시지 처리기입니다.
void CDTreeCtrl::BuildBitmap()
{
	// 	
	// 	typedef struct tagBITMAPINFOHEADER {
	// 		DWORD  biSize;
	// 		LONG   biWidth;
	// 		LONG   biHeight;
	// 		WORD   biPlanes;
	// 		WORD   biBitCount;
	// 		DWORD  biCompression;
	// 		DWORD  biSizeImage;
	// 		LONG   biXPelsPerMeter;
	// 		LONG   biYPelsPerMeter;
	// 		DWORD  biClrUsed;
	// 		DWORD  biClrImportant;
	// 	} BITMAPINFOHEADER;

	BYTE BitmapInfoData[] = {
		0x28, 0x00, 0x00, 0x00,   0x34, 0x00, 0x00, 0x00,   0x0D, 0x00, 0x00, 0x00,   0x01, 0x00, 0x18, 0x00,
		0x00, 0x00, 0x00, 0x00,   0xEC, 0x07, 0x00, 0x00,   0xC4, 0x0E, 0x00, 0x00,   0xC4, 0x0E, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00 };

	// 	BYTE BitmapBitsData[] = { 
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF5, 0xF5,   0xF5, 0xF9, 0xF9, 0xF9,   0xF8, 0xF8, 0xF8, 0xF5,
	// 		0xF5, 0xF5, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
	// 		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xCC, 0xCB, 0xCA,   0xD5, 0xD4, 0xD4, 0xDC,   0xDB, 0xDB, 0xE1, 0xE1,
	// 		0xE0, 0xE7, 0xE7, 0xE6,   0xEB, 0xEB, 0xEA, 0xEC,   0xEC, 0xEB, 0xEC, 0xEB,   0xEB, 0xEA, 0xE9, 0xE9,
	// 		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCC, 0xCB, 0xCA, 0xDB,
	// 		0xDA, 0xDA, 0xE9, 0xE2,   0xDF, 0xBA, 0x99, 0x8C,   0xBD, 0x9D, 0x90, 0xF6,   0xF3, 0xF2, 0xED, 0xED,
	// 		0xEC, 0xEC, 0xEB, 0xEB,   0xEA, 0xE9, 0xE9, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0xF4, 0xF4, 0xF4, 0xCC,   0xCB, 0xCA, 0xD5, 0xD4,   0xD4, 0xDC, 0xDB, 0xDB,   0xE1, 0xE1, 0xE0, 0xE7,
	// 		0xE7, 0xE6, 0xEB, 0xEB,   0xEA, 0xEC, 0xEC, 0xEB,   0xEC, 0xEB, 0xEB, 0xEA,   0xE9, 0xE9, 0xF4, 0xF4,
	// 		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
	// 		0xF4, 0xC6, 0xC4, 0xC2,   0xE9, 0xE9, 0xE9, 0xED,   0xED, 0xED, 0xF0, 0xF0,   0xF0, 0xF4, 0xF4, 0xF4,
	// 		0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xE6, 0xE6, 0xE6,   0xF4, 0xF4, 0xF4, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCA, 0xC8, 0xC6, 0xF0,   0xEC, 0xEA, 0xBB, 0x99,
	// 		0x8B, 0x97, 0x5E, 0x49,   0x98, 0x60, 0x4B, 0xD1,   0xB9, 0xB0, 0xF9, 0xF9,   0xF9, 0xF6, 0xF6, 0xF6,
	// 		0xE6, 0xE6, 0xE6, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xC6,
	// 		0xC4, 0xC2, 0xE9, 0xE9,   0xE9, 0xED, 0xED, 0xED,   0xF0, 0xF0, 0xF0, 0xF4,   0xF4, 0xF4, 0xF6, 0xF6,
	// 		0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xF6, 0xF6, 0xE6,   0xE6, 0xE6, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xC2, 0xBF, 0xBC,
	// 		0xE5, 0xE4, 0xE3, 0xE9,   0xE9, 0xE9, 0xED, 0xED,   0xED, 0xF2, 0xF2, 0xF2,   0xF4, 0xF4, 0xF4, 0xF5,
	// 		0xF5, 0xF5, 0xF4, 0xF4,   0xF4, 0xE2, 0xE2, 0xE1,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0xF4, 0xF4, 0xF4,   0xD1, 0xCF, 0xCD, 0xE9,   0xE1, 0xDE, 0x95, 0x5C,   0x47, 0x96, 0x5E, 0x48,
	// 		0x97, 0x5F, 0x4A, 0xA4,   0x72, 0x60, 0xFA, 0xF9,   0xF8, 0xF4, 0xF4, 0xF4,   0xE2, 0xE2, 0xE1, 0xF4,
	// 		0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xC2,   0xBF, 0xBC, 0xE5, 0xE4,
	// 		0xE3, 0xBB, 0x99, 0x8B,   0xA7, 0x77, 0x66, 0xA7,   0x77, 0x66, 0xA7, 0x77,   0x66, 0xD1, 0xB9, 0xB0,
	// 		0xF4, 0xF4, 0xF4, 0xE2,   0xE2, 0xE1, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xBF, 0xBB, 0xB8,   0xE1, 0xDF, 0xDD, 0xE5,
	// 		0xE5, 0xE4, 0xEA, 0xEA,   0xEA, 0xEF, 0xEF, 0xEF,   0xF2, 0xF2, 0xF2, 0xF2,   0xF2, 0xF2, 0xF2, 0xF2,
	// 		0xF2, 0xDE, 0xDD, 0xDC,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
	// 		0xE1, 0xE0, 0xDE, 0xAA,   0x7E, 0x6D, 0x94, 0x5B,   0x46, 0xE2, 0xD4, 0xCF,   0xA7, 0x77, 0x66, 0x97,
	// 		0x5F, 0x4A, 0xD5, 0xBF,   0xB7, 0xF6, 0xF6, 0xF6,   0xDE, 0xDD, 0xDC, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xBF,   0xBB, 0xB8, 0xE1, 0xDF,   0xDD, 0xAA, 0x7E, 0x6D,
	// 		0x95, 0x5C, 0x47, 0x95,   0x5C, 0x47, 0x95, 0x5C,   0x47, 0xA7, 0x77, 0x66,   0xF2, 0xF2, 0xF2, 0xDE,
	// 		0xDD, 0xDC, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
	// 		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xBC, 0xB7, 0xB2,   0xDC, 0xD8, 0xD5, 0xDF,   0xDC, 0xDA, 0xE3, 0xE1,
	// 		0xE0, 0xE8, 0xE8, 0xE8,   0xEC, 0xEC, 0xEC, 0xED,   0xED, 0xED, 0xED, 0xED,   0xED, 0xD6, 0xD5, 0xD4,
	// 		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCD, 0xC9, 0xC5, 0xDD,
	// 		0xCF, 0xC9, 0xC8, 0xAE,   0xA3, 0xEE, 0xEE, 0xED,   0xD5, 0xC1, 0xBA, 0x96,   0x5D, 0x48, 0xA5, 0x75,
	// 		0x63, 0xF8, 0xF8, 0xF8,   0xD6, 0xD5, 0xD5, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0xF4, 0xF4, 0xF4, 0xBC,   0xB7, 0xB2, 0xDC, 0xD8,   0xD5, 0xAA, 0x7E, 0x6D,   0x94, 0x5B, 0x46, 0x95,
	// 		0x5C, 0x47, 0x95, 0x5C,   0x47, 0xA7, 0x77, 0x66,   0xED, 0xED, 0xED, 0xD6,   0xD5, 0xD4, 0xF4, 0xF4,
	// 		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
	// 		0xF4, 0xB9, 0xB3, 0xAE,   0xD7, 0xD1, 0xCD, 0xD9,   0xD4, 0xD0, 0xDB, 0xD7,   0xD4, 0xDF, 0xDD, 0xDB,
	// 		0xE3, 0xE2, 0xE1, 0xE6,   0xE6, 0xE5, 0xE8, 0xE8,   0xE8, 0xCD, 0xCD, 0xCC,   0xF4, 0xF4, 0xF4, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xDD,   0xD9, 0xD5, 0xE5, 0xE2,
	// 		0xDF, 0xDC, 0xD8, 0xD5,   0xF4, 0xF3, 0xF2, 0xA1,   0x70, 0x5D, 0x94, 0x5B,   0x46, 0xD6, 0xC3, 0xBC,
	// 		0xDC, 0xDC, 0xDB, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,
	// 		0xB3, 0xAE, 0xD7, 0xD1,   0xCD, 0xAA, 0x7E, 0x6D,   0x95, 0x5C, 0x47, 0x95,   0x5C, 0x47, 0x95, 0x5C,
	// 		0x47, 0xA7, 0x77, 0x66,   0xE8, 0xE8, 0xE8, 0xCD,   0xCD, 0xCC, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,
	// 		0xD5, 0xCF, 0xCB, 0xD5,   0xCF, 0xCB, 0xD6, 0xD1,   0xCD, 0xDA, 0xD5, 0xD2,   0xDE, 0xDB, 0xD8, 0xE1,
	// 		0xDF, 0xDD, 0xE4, 0xE3,   0xE2, 0xC8, 0xC7, 0xC6,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xD5,   0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD6, 0xD1, 0xCD,
	// 		0xE6, 0xE2, 0xE0, 0xCF,   0xB8, 0xAF, 0x92, 0x59,   0x44, 0xA5, 0x76, 0x64,   0xE8, 0xE7, 0xE7, 0xF4,
	// 		0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xD5, 0xCF,
	// 		0xCB, 0xBB, 0x99, 0x8B,   0xC8, 0xAE, 0xA3, 0xC8,   0xAE, 0xA3, 0xC8, 0xAE,   0xA3, 0xD1, 0xB9, 0xB0,
	// 		0xE4, 0xE3, 0xE2, 0xC8,   0xC7, 0xC6, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,   0xD5, 0xCF, 0xCB, 0xD5,
	// 		0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,   0xD8, 0xD3, 0xD0, 0xDC,   0xD8, 0xD5, 0xDF, 0xDD,
	// 		0xDB, 0xC5, 0xC3, 0xC1,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
	// 		0xB9, 0xB3, 0xAE, 0xD5,   0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,   0xD6, 0xD0, 0xCC, 0xF1,
	// 		0xEE, 0xED, 0x9D, 0x69,   0x56, 0x92, 0x59, 0x43,   0xD0, 0xBF, 0xB9, 0xF6,   0xF6, 0xF6, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,
	// 		0xD5, 0xCF, 0xCB, 0xD5,   0xCF, 0xCB, 0xD8, 0xD3,   0xD0, 0xDC, 0xD8, 0xD5,   0xDF, 0xDD, 0xDB, 0xC5,
	// 		0xC3, 0xC1, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
	// 		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xB9,   0xB3, 0xAE, 0xB9, 0xB3,
	// 		0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xBA,   0xB4, 0xAF, 0xBD, 0xB9,   0xB4, 0xC1, 0xBE, 0xBB,
	// 		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xB9,
	// 		0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xD0,   0xCC, 0xC9, 0xC0, 0xA7,
	// 		0x9D, 0xAB, 0x86, 0x76,   0xE4, 0xDF, 0xDC, 0xF5,   0xF5, 0xF5, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xB9,
	// 		0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xBA, 0xB4, 0xAF,   0xBD, 0xB9, 0xB4, 0xC1,   0xBE, 0xBB, 0xF4, 0xF4,
	// 		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF8, 0xF8,   0xF8, 0xF9, 0xF9, 0xF9,
	// 		0xF6, 0xF6, 0xF6, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
	// 		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
	// 		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
	// 		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
	// 		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
	// 		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
	// 		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
	// 		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E };

	BYTE BitmapBitsData[] = {
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF5, 0xF5,   0xF5, 0xF9, 0xF9, 0xF9,   0xF8, 0xF8, 0xF8, 0xF5,
		0xF5, 0xF5, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xCC, 0xCB, 0xCA,   0xD5, 0xD4, 0xD4, 0xDC,   0xDB, 0xDB, 0xE1, 0xE1,
		0xE0, 0xE7, 0xE7, 0xE6,   0xEB, 0xEB, 0xEA, 0xEC,   0xEC, 0xEB, 0xEC, 0xEB,   0xEB, 0xEA, 0xE9, 0xE9,
		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCC, 0xCB, 0xCA, 0xDB,
		0xDA, 0xDA, 0xE9, 0xE2,   0xDF, 0xBA, 0x99, 0x8C,   0xBD, 0x9D, 0x90, 0xF6,   0xF3, 0xF2, 0xED, 0xED,
		0xEC, 0xEC, 0xEB, 0xEB,   0xEA, 0xE9, 0xE9, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0xF4, 0xF4, 0xF4, 0xCC,   0xCB, 0xCA, 0xD5, 0xD4,   0xD4, 0xDC, 0xDB, 0xDB,   0xE1, 0xE1, 0xE0, 0xE7,
		0xE7, 0xE6, 0xEB, 0xEB,   0xEA, 0xEC, 0xEC, 0xEB,   0xEC, 0xEB, 0xEB, 0xEA,   0xE9, 0xE9, 0xF4, 0xF4,
		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED,

		0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
		0xF4, 0xC6, 0xC4, 0xC2,   0xE9, 0xE9, 0xE9, 0xED,   0xED, 0xED, 0xF0, 0xF0,   0xF0, 0xF4, 0xF4, 0xF4,
		0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xE6, 0xE6, 0xE6,   0xF4, 0xF4, 0xF4, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCA, 0xC8, 0xC6, 0xF0,   0xEC, 0xEA, 0xBB, 0x99,
		0x8B, 0x97, 0x5E, 0x49,   0x98, 0x60, 0x4B, 0xD1,   0xB9, 0xB0, 0xF9, 0xF9,   0xF9, 0xF6, 0xF6, 0xF6,
		0xE6, 0xE6, 0xE6, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xC6,
		0xC4, 0xC2, 0xE9, 0xE9,   0xE9, 0xED, 0xED, 0xED,   0xF0, 0xF0, 0xF0, 0xF4,   0xF4, 0xF4, 0xF6, 0xF6,
		0xF6, 0xF6, 0xF6, 0xF6,   0xF6, 0xF6, 0xF6, 0xE6,   0xE6, 0xE6, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xC2, 0xBF, 0xBC,
		0xE5, 0xE4, 0xE3, 0xE9,   0xE9, 0xE9, 0xED, 0xED,   0xED, 0xF2, 0xF2, 0xF2,   0xF4, 0xF4, 0xF4, 0xF5,
		0xF5, 0xF5, 0xF4, 0xF4,   0xF4, 0xE2, 0xE2, 0xE1,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0xF4, 0xF4, 0xF4,   0xD1, 0xCF, 0xCD, 0xE9,   0xE1, 0xDE, 0x95, 0x5C,   0x47, 0x96, 0x5E, 0x48,
		0x97, 0x5F, 0x4A, 0xA4,   0x72, 0x60, 0xFA, 0xF9,   0xF8, 0xF4, 0xF4, 0xF4,   0xE2, 0xE2, 0xE1, 0xF4,
		0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xC2,   0xBF, 0xBC, 0xE5, 0xE4,
		0xE3, 0xBB, 0x99, 0x8B,   0xA7, 0x77, 0x66, 0xA7,   0x77, 0x66, 0xA7, 0x77,   0x66, 0xD1, 0xB9, 0xB0,
		0xF4, 0xF4, 0xF4, 0xE2,   0xE2, 0xE1, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xBF, 0xBB, 0xB8,   0xE1, 0xDF, 0xDD, 0xE5,
		0xE5, 0xE4, 0xEA, 0xEA,   0xEA, 0xEF, 0xEF, 0xEF,   0xF2, 0xF2, 0xF2, 0xF2,   0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xDE, 0xDD, 0xDC,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
		0xE1, 0xE0, 0xDE, 0xAA,   0x7E, 0x6D, 0x94, 0x5B,   0x46, 0xE2, 0xD4, 0xCF,   0xA7, 0x77, 0x66, 0x97,
		0x5F, 0x4A, 0xD5, 0xBF,   0xB7, 0xF6, 0xF6, 0xF6,   0xDE, 0xDD, 0xDC, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xBF,   0xBB, 0xB8, 0xE1, 0xDF,   0xDD, 0xAA, 0x7E, 0x6D,
		0x95, 0x5C, 0x47, 0x95,   0x5C, 0x47, 0x95, 0x5C,   0x47, 0xA7, 0x77, 0x66,   0xF2, 0xF2, 0xF2, 0xDE,
		0xDD, 0xDC, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xBC, 0xB7, 0xB2,   0xDC, 0xD8, 0xD5, 0xDF,   0xDC, 0xDA, 0xE3, 0xE1,
		0xE0, 0xE8, 0xE8, 0xE8,   0xEC, 0xEC, 0xEC, 0xED,   0xED, 0xED, 0xED, 0xED,   0xED, 0xD6, 0xD5, 0xD4,
		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E,

		0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xCD, 0xC9, 0xC5, 0xDD,
		0xCF, 0xC9, 0xC8, 0xAE,   0xA3, 0xEE, 0xEE, 0xED,   0xD5, 0xC1, 0xBA, 0x96,   0x5D, 0x48, 0xA5, 0x75,
		0x63, 0xF8, 0xF8, 0xF8,   0xD6, 0xD5, 0xD5, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0xF4, 0xF4, 0xF4, 0xBC,   0xB7, 0xB2, 0xDC, 0xD8,   0xD5, 0xAA, 0x7E, 0x6D,   0x94, 0x5B, 0x46, 0x95,
		0x5C, 0x47, 0x95, 0x5C,   0x47, 0xA7, 0x77, 0x66,   0xED, 0xED, 0xED, 0xD6,   0xD5, 0xD4, 0xF4, 0xF4,
		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
		0xF4, 0xB9, 0xB3, 0xAE,   0xD7, 0xD1, 0xCD, 0xD9,   0xD4, 0xD0, 0xDB, 0xD7,   0xD4, 0xDF, 0xDD, 0xDB,
		0xE3, 0xE2, 0xE1, 0xE6,   0xE6, 0xE5, 0xE8, 0xE8,   0xE8, 0xCD, 0xCD, 0xCC,   0xF4, 0xF4, 0xF4, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xDD,   0xD9, 0xD5, 0xE5, 0xE2,
		0xDF, 0xDC, 0xD8, 0xD5,   0xF4, 0xF3, 0xF2, 0xA1,   0x70, 0x5D, 0x94, 0x5B,   0x46, 0xD6, 0xC3, 0xBC,
		0xDC, 0xDC, 0xDB, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,
		0xB3, 0xAE, 0xD7, 0xD1,   0xCD, 0xAA, 0x7E, 0x6D,   0x95, 0x5C, 0x47, 0x95,   0x5C, 0x47, 0x95, 0x5C,
		0x47, 0xA7, 0x77, 0x66,   0xE8, 0xE8, 0xE8, 0xCD,   0xCD, 0xCC, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,
		0xD5, 0xCF, 0xCB, 0xD5,   0xCF, 0xCB, 0xD6, 0xD1,   0xCD, 0xDA, 0xD5, 0xD2,   0xDE, 0xDB, 0xD8, 0xE1,
		0xDF, 0xDD, 0xE4, 0xE3,   0xE2, 0xC8, 0xC7, 0xC6,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xD5,   0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD6, 0xD1, 0xCD,
		0xE6, 0xE2, 0xE0, 0xCF,   0xB8, 0xAF, 0x92, 0x59,   0x44, 0xA5, 0x76, 0x64,   0xE8, 0xE7, 0xE7, 0xF4,
		0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xD5, 0xCF,
		0xCB, 0xBB, 0x99, 0x8B,   0xC8, 0xAE, 0xA3, 0xC8,   0xAE, 0xA3, 0xC8, 0xAE,   0xA3, 0xD1, 0xB9, 0xB0,
		0xE4, 0xE3, 0xE2, 0xC8,   0xC7, 0xC6, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,   0xD5, 0xCF, 0xCB, 0xD5,
		0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,   0xD8, 0xD3, 0xD0, 0xDC,   0xD8, 0xD5, 0xDF, 0xDD,
		0xDB, 0xC5, 0xC3, 0xC1,   0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,
		0xB9, 0xB3, 0xAE, 0xD5,   0xCF, 0xCB, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,   0xD6, 0xD0, 0xCC, 0xF1,
		0xEE, 0xED, 0x9D, 0x69,   0x56, 0x92, 0x59, 0x43,   0xD0, 0xBF, 0xB9, 0xF6,   0xF6, 0xF6, 0x8F, 0x8F,
		0x8E,

		0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xD5, 0xCF,   0xCB, 0xD5, 0xCF, 0xCB,
		0xD5, 0xCF, 0xCB, 0xD5,   0xCF, 0xCB, 0xD8, 0xD3,   0xD0, 0xDC, 0xD8, 0xD5,   0xDF, 0xDD, 0xDB, 0xC5,
		0xC3, 0xC1, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,
		0x8F, 0x8E, 0xF4, 0xF4,   0xF4, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xB9,   0xB3, 0xAE, 0xB9, 0xB3,
		0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xBA,   0xB4, 0xAF, 0xBD, 0xB9,   0xB4, 0xC1, 0xBE, 0xBB,
		0xF4, 0xF4, 0xF4, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xB9, 0xB3, 0xAE, 0xB9,
		0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xD0,   0xCC, 0xC9, 0xC0, 0xA7,
		0x9D, 0xAB, 0x86, 0x76,   0xE4, 0xDF, 0xDC, 0xF5,   0xF5, 0xF5, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0xF4, 0xF4, 0xF4, 0xB9,   0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xB9, 0xB3, 0xAE,   0xB9, 0xB3, 0xAE, 0xB9,
		0xB3, 0xAE, 0xB9, 0xB3,   0xAE, 0xBA, 0xB4, 0xAF,   0xBD, 0xB9, 0xB4, 0xC1,   0xBE, 0xBB, 0xF4, 0xF4,
		0xF4, 0x8F, 0x8F, 0x8E,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF8, 0xF8,   0xF8, 0xF9, 0xF9, 0xF9,
		0xF6, 0xF6, 0xF6, 0xF4,   0xF4, 0xF4, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,
		0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0xF4, 0xF4, 0xF4,   0xF4, 0x8F, 0x8F, 0x8E,
		0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,
		0x1C, 0xED, 0x24, 0x1C,   0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x24,   0x1C, 0xED, 0x24, 0x1C,
		0xED, 0x24, 0x1C, 0xED,   0x24, 0x1C, 0xED, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,
		0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,
		0x8E, 0x8F, 0x8F, 0x8E,   0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E,
		0x8F, 0x8F, 0x8E, 0x8F,   0x8F, 0x8E, 0x8F, 0x8F,   0x8E, 0x8F, 0x8F, 0x8E };


	BITMAPINFO *pbi = reinterpret_cast<BITMAPINFO *>(BitmapInfoData);
	BITMAPINFOHEADER *pbih = reinterpret_cast<BITMAPINFOHEADER *>(BitmapInfoData);

	HBITMAP hBitmap = ::CreateDIBitmap(::GetDC(NULL), pbih, CBM_INIT,
		BitmapBitsData, pbi, DIB_RGB_COLORS);
	//ShowGraphic(hBitmap);

	if (NULL != hBitmap && m_bmCheck.Attach(hBitmap))
	{
		if (m_CheckImageList.Create(pbih->biHeight, pbih->biHeight, pbih->biBitCount,
			pbih->biWidth / pbih->biHeight, 0))
		{
			m_CheckImageList.Add(&m_bmCheck, RGB(0xED, 0x1C, 0x24));
		}
	}
}



void CDTreeCtrl::OnNMClick(NMHDR *pNMHDR, LRESULT *pResult)
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	*pResult = 0;
	UNREFERENCED_PARAMETER(pNMHDR);

	UINT Flags = 0;
	DWORD pos = GetMessagePos();
	CPoint point(GET_X_LPARAM(pos), GET_Y_LPARAM(pos));
	ScreenToClient(&point);
	HTREEITEM hTreeItem = HitTest(point, &Flags);
	// 체크 이벤트 처리 안함
	if (NULL != hTreeItem && (Flags & TVHT_ONITEMSTATEICON) == TVHT_ONITEMSTATEICON)
	{
		*pResult = 1;
	}

}

void CDTreeCtrl::PreSubclassWindow()
{
	// TODO: 여기에 특수화된 코드를 추가 및/또는 기본 클래스를 호출합니다.

	CTreeCtrl::PreSubclassWindow();
	SetImageList(&m_CheckImageList, TVSIL_STATE);
}


BOOL CDTreeCtrl::CreateEx(DWORD dwExStyle, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID)
{
	BOOL ret = CTreeCtrl::CreateEx(dwExStyle, dwStyle, rect, pParentWnd, nID);
	if (FALSE != ret)
	{
		SetImageList(&m_CheckImageList, TVSIL_STATE);
	}

	return ret;
}


BOOL CDTreeCtrl::Create(DWORD dwStyle, const RECT &rect, CWnd *pParentWnd, UINT nID)
{
	return CreateEx(0, dwStyle, rect, pParentWnd, nID);
}

void CDTreeCtrl::OnTvnKeydown(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMTVKEYDOWN pTVKeyDown = reinterpret_cast<LPNMTVKEYDOWN>(pNMHDR);
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	*pResult = 0;

	if (pTVKeyDown->wVKey == VK_SPACE)
	{
		HTREEITEM hTreeItem = GetSelectedItem();
		// KeyDown is called before StateImageChanging so check for TVCS_NONE state
		if (NULL != hTreeItem && GetCheck(hTreeItem) != TVCS_NONE)
		{
			//ToggleCheck(hTreeItem);
			SelectItem(hTreeItem);
			TVCS_CHECKSTATE OldCheckState = GetCheck(hTreeItem);
			TVCS_CHECKSTATE NewCheckState = TVCS_CHECKED;

			if (OldCheckState == TVCS_CHECKED || OldCheckState == TVCS_INDETERMINATE)
			{
				NewCheckState = TVCS_UNCHECKED;
			}
			SetCheck(hTreeItem, NewCheckState);
			SendCheckEventEnd(hTreeItem);
		}
	}
}

void CDTreeCtrl::OnTvnBegindrag(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMTREEVIEW pNMTreeView = reinterpret_cast<LPNMTREEVIEW>(pNMHDR);
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	if (m_bAllowDrag == FALSE)
		return;
	// 해당 트리의 root이면 Drag 하지 않는다
	if (m_bAllowRootDrag == FALSE)
	{
		if (GetParentItem(pNMTreeView->itemNew.hItem) == NULL)
			return;
	}

	//20240610 GBM start - 메모리 누수 수정
#if 1
	if (m_pDragImage != nullptr)
	{
		delete m_pDragImage;
		m_pDragImage = nullptr;
	}
#else
	if (m_pDragImage == nullptr)
		m_pDragImage = new CImageList;
#endif
	//20240610 GBM end
	m_pDragImage = CreateDragImageEx(pNMTreeView->itemNew.hItem);

	if (m_pDragImage == nullptr)
		return;

	CRect rect;
	GetItemRect(pNMTreeView->itemNew.hItem, rect, TRUE);
	POINT pt;
	pt.x = rect.left + 5;
	pt.y = rect.top + 5;

	ClientToScreen(&pt);
	m_pDragImage->BeginDrag(0, CPoint(-5, -5));
	m_pDragImage->DragEnter(NULL, pt);
	SetCapture();
	m_bDragging = TRUE;

	*pResult = 0;
}


void CDTreeCtrl::OnMouseMove(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	if (m_bDragging && m_pDragImage)
	{
		POINT pt = point;
		ClientToScreen(&pt);
		m_pDragImage->DragMove(pt);

		m_pDropWnd = MousePointToTreeCtrl(point);
		if (m_pDropWnd == nullptr)
		{
			SetCursor(AfxGetApp()->LoadStandardCursor(IDC_NO));
			//SelectDropTarget(nullptr);
			return;
		}
		SetCursor(AfxGetApp()->LoadCursor(m_uCursorResourceID));
		if ((GetScrollPos(SB_HORZ) > 0) && (GetScrollLimit(SB_VERT) > 0))
		{
			Invalidate();
		}

		//CImageList::DragMove(pt);
		return;
	}
	else
	{
		SelectDropTarget(nullptr);
	}

	// 	if (::DragDetect(m_hWnd, point))
	// 	{
	// 		OnDrag(point);
	// 	}
	CTreeCtrl::OnMouseMove(nFlags, point);
}


CImageList* CDTreeCtrl::CreateDragImageEx(HTREEITEM hCurrent)
{
	int nImg = 0, nSelImg = 0;
	int				cxIcon, cyIcon, cxCheck, cyCheck; // IconSize
	int				nMaxWidth = 0;
	int				nSelected = 0, i = 0; // Check 선택된 아이템
	BOOL			bIncludeCheckItem = FALSE;
	ST_HITEM	*	pItem;
	CClientDC		dcDragged(this);
	CDC			*	pDCCalc = nullptr;
	CDC 			dcMem; // Memory Device Context used to draw the drag image
	CBitmap			bmDrag;
	CBitmap		*	pOldBmp = nullptr;
	CFont		*	pOldFont = nullptr;
	CImageList	*	pRetDragImage = nullptr; // 생성된 Drag Image List
	CImageList	*	pIconImage = nullptr;

	HICON hIcon = nullptr;

	CString			strItemText;
	CRect			rectFirstItem, rcDrag, rcDrawArea, rcDrawOrigin;

	cxIcon = cyIcon = cxCheck = cyCheck = 0;
	RemoveCheckList(&m_vtDragCheckItem);
	//	MakeCheckedItems(TVI_ROOT, &m_vtDragCheckItem, 0);

	if (FindCheckItem(TVI_ROOT, hCurrent) == FALSE)
	{
		// Check된 아이템을 Drag하는것이 아니면 Drag Item을 모두 삭제한다.
		pItem = new ST_HITEM;
		memset(pItem, 0, sizeof(ST_HITEM));
		pItem->nTreeLevel = 1;
		pItem->hItem = hCurrent;
		pItem->tsCheck = GetCheck(hCurrent);
		pItem->dwItemData = GetItemData(hCurrent);
		wcscpy_s(pItem->szCaption, sizeof(pItem->szCaption) / sizeof(TCHAR), GetItemText(hCurrent));
		m_vtDragCheckItem.push_back(pItem);
	}
	else
	{
		MakeCheckedItems(TVI_ROOT, &m_vtDragCheckItem, 0);
	}
	nSelected = m_vtDragCheckItem.size();
	if (nSelected <= 0)
	{
		// [KHS 2019-5-29 09:03:58] 
		// 현재 선택된 아이템만 
		return nullptr;
	}

	pDCCalc = GetDC();
	if (pDCCalc == nullptr)
		return nullptr;

	pIconImage = GetImageList(LVSIL_NORMAL);
	if (pIconImage)
		ImageList_GetIconSize(*pIconImage, &cxIcon, &cyIcon);

	if (m_CheckImageList)
		ImageList_GetIconSize(m_CheckImageList, &cxCheck, &cyCheck);
	// 최대 폭 구하기
	for (i = 0; i < nSelected; i++)
	{
		// Get the item's height and width one by one
		strItemText = GetItemText(m_vtDragCheckItem[i]->hItem);
		rectFirstItem.SetRectEmpty();
		pDCCalc->DrawText(strItemText, rectFirstItem, DT_CALCRECT);
		if (nMaxWidth < (rectFirstItem.Width() + cxIcon + cxCheck))
			nMaxWidth = rectFirstItem.Width() + cxIcon + cxCheck;
	}

	// Get the first item's height and width
	// 	strItemText = GetItemText(m_vtDragCheckItem[0].hItem);
	// 	rectFirstItem.SetRectEmpty();
	// 	pDragImageCalcDC->DrawText(strItemText, rectFirstItem, DT_CALCRECT);
	ReleaseDC(pDCCalc);

	// 한개 아이템이 그려질 영역을 초기화 한다.
	rcDrawOrigin.SetRect(1, 1, nMaxWidth, rectFirstItem.Height());

	// Find the bounding rectangle of the bitmap
	rcDrag.SetRect(0, 0, nMaxWidth + 2, (rectFirstItem.Height() + 2)*nSelected);

	// Create bitmap		
	if (!dcMem.CreateCompatibleDC(&dcDragged))
		return NULL;
	if (!bmDrag.CreateCompatibleBitmap(&dcDragged, rcDrag.Width(), rcDrag.Height()))
		return NULL;

	pOldBmp = dcMem.SelectObject(&bmDrag);
	pOldFont = dcMem.SelectObject(GetFont());

	CBrush brush(RGB(255, 255, 255));
	dcMem.FillRect(&rcDrag, &brush);
	dcMem.SetBkColor(RGB(255, 255, 255));
	dcMem.SetBkMode(TRANSPARENT);
	dcMem.SetTextColor(RGB(0, 0, 0));

	// Search through array list
	for (i = 0; i < nSelected; i++)
	{

		rcDrawArea = rcDrawOrigin;

		hIcon = m_CheckImageList.ExtractIcon(m_vtDragCheckItem[i]->tsCheck + 1);
		rcDrawArea.left += (3 + cxIcon *m_vtDragCheckItem[i]->nTreeLevel);
		::DrawIconEx(dcMem.m_hDC, rcDrawArea.left, rcDrawArea.top, hIcon, cxCheck, cyCheck, 0, NULL, DI_NORMAL);
		rcDrawArea.left += cxCheck;

		if (pIconImage != nullptr)
		{
			GetItemImage(m_vtDragCheckItem[i]->hItem, nImg, nSelImg);
			hIcon = pIconImage->ExtractIcon(nImg);
			rcDrawArea.left += 3;
			::DrawIconEx(dcMem.m_hDC, rcDrawArea.left, rcDrawArea.top, hIcon, 16, 16, 0, NULL, DI_NORMAL);
			rcDrawArea.left += cxIcon;
		}

		dcMem.DrawText(GetItemText(m_vtDragCheckItem[i]->hItem), rcDrawArea, DT_LEFT | DT_SINGLELINE | DT_NOPREFIX);
		rcDrawOrigin.OffsetRect(0, rectFirstItem.Height() + 2);
		if (pIconImage != nullptr)
			DestroyIcon(hIcon);
	}
	dcMem.SelectObject(pOldFont);
	dcMem.SelectObject(pOldBmp);
	dcMem.DeleteDC();
	// Create imagelist
	pRetDragImage = new CImageList;
	pRetDragImage->Create(rcDrag.Width(), rcDrag.Height(),
		ILC_COLOR32 | ILC_MASK, 0, 1);

	pRetDragImage->Add(&bmDrag, RGB(255, 255, 255));
	return pRetDragImage;
}

BOOL CDTreeCtrl::GetCheckedList(HTREEITEM hItem, VT_HITEM * pCheckList, int nLevel)
{
	HTREEITEM hChild = GetChildItem(hItem);
	BOOL bTemp = FALSE;
	ST_HITEM * pData;
	TVCS_CHECKSTATE tsCheck;
	while (hChild != nullptr)
	{
		tsCheck = GetCheck(hChild);
		if (tsCheck != TVCS_UNCHECKED)
		{
			pData = new ST_HITEM;
			wcscpy_s(pData->szCaption,sizeof(pData->szCaption) / sizeof(TCHAR),GetItemText(hChild));
			memset(pData,0,sizeof(ST_HITEM));
			pData->nTreeLevel = nLevel;
			pData->hItem = hChild;
			pData->dwItemData = GetItemData(hChild);
			pCheckList->push_back(pData);
		}
		if (ItemHasChildren(hChild))
		{
			bTemp = GetCheckedList(hChild, pCheckList, nLevel);
		}
		hChild = GetNextSiblingItem(hChild);
	}
	return bTemp;
}

void CDTreeCtrl::MakeCheckedItems(HTREEITEM hItem, VT_HITEM * pCheckList, int nLevel)
{
	//ST_HITEM stItem;
	BOOL bIncludeCheckItem = FALSE, bTemp = FALSE;
	ST_HITEM * pData;
	HTREEITEM hChild = GetChildItem(hItem);
	TVCS_CHECKSTATE tsCheck;
	nLevel++;
	while (hChild != nullptr)
	{
		tsCheck = GetCheck(hChild);
		if(tsCheck != TVCS_UNCHECKED)
		{
			pData = new ST_HITEM;
			memset(pData,0,sizeof(ST_HITEM));
			pData->nTreeLevel = nLevel;
			pData->hItem = hChild;
			pData->tsCheck = GetCheck(hChild);
			pData->dwItemData = GetItemData(hChild);
			wcscpy_s(pData->szCaption,sizeof(pData->szCaption) / sizeof(TCHAR),GetItemText(hChild));
			pCheckList->push_back(pData);
		}
		if (ItemHasChildren(hChild))
		{
			MakeCheckedItems(hChild, pCheckList, nLevel);
		}
		hChild = GetNextSiblingItem(hChild);
	}
}

void CDTreeCtrl::OnLButtonUp(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	CompleteDrag();
	CTreeCtrl::OnLButtonUp(nFlags, point);
}

int CDTreeCtrl::CompleteDrag()
{
	LRESULT lRet = 0;
	ReleaseCapture();
	if (m_bDragging && m_pDragImage)
	{
		m_bDragging = FALSE;
		m_pDragImage->DragLeave(this);
		m_pDragImage->EndDrag();

		lRet = SendTVNDropedItem(m_vtDragCheckItem[0]->hItem, m_pDropWnd);
		delete m_pDragImage;
		m_pDragImage = nullptr;
		RemoveCheckList(&m_vtDragCheckItem);
		m_pDropWnd = nullptr;
	}
	return 1;
}

CWnd* CDTreeCtrl::MousePointToTreeCtrl(CPoint ptClient)
{
	CPoint ptScreen;
	ptScreen = ptClient;
	ClientToScreen(&ptScreen);
	CWnd *pDrop;
	//CDTreeCtrl * pTree;
	CWnd * pHitWnd = WindowFromPoint(ptScreen);
	int i, nCnt;
	nCnt = m_vtDropWnd.size();
	for (i = 0; i < nCnt; i++)
	{
		pDrop = m_vtDropWnd.at(i);
		if (pDrop == nullptr)
			continue;
		if (pDrop == pHitWnd)
		{
			// 			pTree = (CDTreeCtrl*)pDrop;
			// 
			// 			// Drop Tree Control
			// 			pTree->CheckHitTestItem();
			return pDrop;
		}
	}
	return nullptr;
}


int CDTreeCtrl::AddDropWnd(CWnd* pDropTree)
{
	m_vtDropWnd.push_back(pDropTree);
	return 0;
}

int CDTreeCtrl::DelDropWnd(CWnd* pDropTree)
{
	int i;
	CWnd *pWnd;
	for (i = 0; i < m_vtDropWnd.size(); i++)
	{
		pWnd = m_vtDropWnd.at(i);
		if (pWnd == nullptr)
			continue;
		if (pWnd == pDropTree)
		{
			//return pWnd;
			m_vtDropWnd.erase(m_vtDropWnd.begin() + i);
			break;
		}
	}

	return 0;
}

int CDTreeCtrl::CheckHitTestItem()
{
	UINT nHitFlags;
	CPoint pt, ptClient;
	GetCursorPos(&pt);
	ptClient = pt;
	ScreenToClient(&ptClient);
	HTREEITEM hItem = HitTest(ptClient, &nHitFlags);
	if (hItem == nullptr)
		return 0;
	EnsureVisible(hItem);
	SelectDropTarget(hItem);
	return 0;
}


int CDTreeCtrl::CopyItemFromSourceTree(VT_HITEM * pVtSourceCheckItems)
{
	if (pVtSourceCheckItems == nullptr)
		return 0;
	VT_HITEM::iterator itr;

	for (itr = pVtSourceCheckItems->begin(); itr != pVtSourceCheckItems->end(); itr++)
	{

	}
	return 0;
}


int CDTreeCtrl::RemoveCheckList(VT_HITEM * pCheckList)
{
	ST_HITEM * pItem;
	int i = 0;
	for (i = 0; i < pCheckList->size(); i++)
	{
		pItem = (*pCheckList)[i];
		if (pItem)
		{
			delete pItem;
			pItem = nullptr;
		}
	}
	pCheckList->clear();
	return 0;
}


void CDTreeCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	UINT Flags = 0;
	HTREEITEM hTreeItem = HitTest(point, &Flags);
	if (NULL != hTreeItem && (Flags & TVHT_ONITEMSTATEICON) == TVHT_ONITEMSTATEICON)
	{
		if(m_bCheckClickSelect)
			SelectItem(hTreeItem);
		m_hTriggerItem = hTreeItem;
		TVCS_CHECKSTATE OldCheckState = GetCheck(hTreeItem);
		TVCS_CHECKSTATE NewCheckState = TVCS_CHECKED;

		if (OldCheckState == TVCS_CHECKED || OldCheckState == TVCS_INDETERMINATE)
		{
			NewCheckState = TVCS_UNCHECKED;
		}
		SetCheck(hTreeItem, NewCheckState);
		SendCheckEventEnd(hTreeItem);
	}
	CTreeCtrl::OnLButtonDown(nFlags, point);
}

// 
// ST_HITEM* CDTreeCtrl::FindCheckItem(HTREEITEM hItem , VT_HITEM *pVtCheckItem)
// {
// 	int i, nSize;
// 	ST_HITEM * pItem;
// 	nSize = pVtCheckItem->size();
// 	for (i = 0; i < nSize; i++)
// 	{
// 		pItem = (*pVtCheckItem)[i];
// 		if (pItem == nullptr)
// 			continue;
// 
// 		if (pItem->hItem == hItem)
// 			return pItem;
// 	}
// 	return nullptr;
// }
// 


BOOL CDTreeCtrl::FindCheckItem(HTREEITEM hItem, HTREEITEM hCurrent)
{
	TVCS_CHECKSTATE tvs;
	BOOL bIncludeCheckItem = FALSE, bTemp = FALSE;
	HTREEITEM hChild = GetChildItem(hItem);
	while (hChild != nullptr)
	{
		tvs = GetCheck(hChild);
		if (tvs != TVCS_UNCHECKED)
		{
			if (hChild == hCurrent)
				bIncludeCheckItem = TRUE;
		}
		if (ItemHasChildren(hChild))
		{
			bTemp = FindCheckItem(hChild, hCurrent);
			if (bTemp == TRUE)
				bIncludeCheckItem = TRUE;
		}
		hChild = GetNextSiblingItem(hChild);
	}
	return bIncludeCheckItem;
}
