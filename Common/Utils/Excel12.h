#pragma once
//#import "C:\Program Files\Common Files\Microsoft Shared\OFFICE12\mso.dll" rename("RGB", "MSRGB")
//#import "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB" raw_interfaces_only, rename("Reference", "ignorethis"), rename("VBE", "testVBE")
//#import "C:\\Program Files\\Microsoft Office\\Office12\\EXCEL.EXE" exclude("IFont", "IPicture") rename("DialogBox", "ignorethis") rename("RGB", "ignorethis"), rename("VBE", "testVBE"), rename("ReplaceText", "EReplaceText"), rename("CopyFile","ECopyFile"), rename("FindText", "EFindText"), rename("NoPrompt", "ENoPrompt")
//#import "C:\Program Files\Common Files\Microsoft Shared\OFFICE12\mso.dll" rename("RGB", "MSRGB")
//
//#import "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB" raw_interfaces_only, rename("Reference", "ignorethis"), rename("VBE", "testVBE")
////
//#import "C:\Program Files\Microsoft Office\OFFICE12\excel.exe" exclude("IFont", "IPicture") rename("RGB", "ignorethis"), rename("VBE", "testVBE"), rename("ReplaceText", "EReplaceText"), rename("CopyFile","ECopyFile"), rename("FindText", "EFindText"), rename("NoPrompt", "ENoPrompt")
//

namespace Excel_Interface
{

	class CAboveAverage : public COleDispatchDriver
	{
	public:
		CAboveAverage(){} // Calls COleDispatchDriver default constructor
		CAboveAverage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAboveAverage(const CAboveAverage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AboveAverage methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_StopIfTrue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_AboveBelow()
		{
			long result;
			InvokeHelper(0xaab, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AboveBelow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_NumberFormat()
		{
			VARIANT result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CalcFor()
		{
			long result;
			InvokeHelper(0xaaa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CalcFor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_NumStdDev()
		{
			long result;
			InvokeHelper(0xaac, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_NumStdDev(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// AboveAverage properties
	public:

	};


	class CAction : public COleDispatchDriver
	{
	public:
		CAction(){} // Calls COleDispatchDriver default constructor
		CAction(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAction(const CAction& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Action methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Coordinate()
		{
			CString result;
			InvokeHelper(0xa98, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Content()
		{
			CString result;
			InvokeHelper(0xa99, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Execute()
		{
			InvokeHelper(0x8a3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Action properties
	public:

	};


	class CActions : public COleDispatchDriver
	{
	public:
		CActions(){} // Calls COleDispatchDriver default constructor
		CActions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CActions(const CActions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Actions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// Actions properties
	public:

	};


	class CAddIn : public COleDispatchDriver
	{
	public:
		CAddIn(){} // Calls COleDispatchDriver default constructor
		CAddIn(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAddIn(const CAddIn& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AddIn methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Author()
		{
			CString result;
			InvokeHelper(0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Comments()
		{
			CString result;
			InvokeHelper(0x23f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_FullName()
		{
			CString result;
			InvokeHelper(0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_Installed()
		{
			BOOL result;
			InvokeHelper(0x226, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Installed(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x226, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Keywords()
		{
			CString result;
			InvokeHelper(0x241, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Path()
		{
			CString result;
			InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Subject()
		{
			CString result;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Title()
		{
			CString result;
			InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_progID()
		{
			CString result;
			InvokeHelper(0x5f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_CLSID()
		{
			CString result;
			InvokeHelper(0x7fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// AddIn properties
	public:

	};



	class CAddIns : public COleDispatchDriver
	{
	public:
		CAddIns(){} // Calls COleDispatchDriver default constructor
		CAddIns(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAddIns(const CAddIns& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AddIns methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Filename, VARIANT& CopyFile)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &CopyFile);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// AddIns properties
	public:

	};


	class CAdjustments : public COleDispatchDriver
	{
	public:
		CAdjustments(){} // Calls COleDispatchDriver default constructor
		CAdjustments(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAdjustments(const CAdjustments& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Adjustments methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_Item(long Index)
		{
			float result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, Index);
			return result;
		}
		void put_Item(long Index, float newValue)
		{
			static BYTE parms[] = VTS_I4 VTS_R4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Index, newValue);
		}

		// Adjustments properties
	public:

	};


	class CAllowEditRange : public COleDispatchDriver
	{
	public:
		CAllowEditRange(){} // Calls COleDispatchDriver default constructor
		CAllowEditRange(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAllowEditRange(const CAllowEditRange& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AllowEditRange methods
	public:
		CString get_Title()
		{
			CString result;
			InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Title(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_Range(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}
		void ChangePassword(LPCTSTR Password)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Password);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		LPDISPATCH get_Users()
		{
			LPDISPATCH result;
			InvokeHelper(0x8be, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// AllowEditRange properties
	public:

	};


	class CAllowEditRanges : public COleDispatchDriver
	{
	public:
		CAllowEditRanges(){} // Calls COleDispatchDriver default constructor
		CAllowEditRanges(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAllowEditRanges(const CAllowEditRanges& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AllowEditRanges methods
	public:
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Title, LPDISPATCH Range, VARIANT& Password)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_DISPATCH VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Title, Range, &Password);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// AllowEditRanges properties
	public:

	};


	class CAppEvents : public COleDispatchDriver
	{
	public:
		CAppEvents(){} // Calls COleDispatchDriver default constructor
		CAppEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAppEvents(const CAppEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AppEvents methods
	public:
		void NewWorkbook(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void SheetSelectionChange(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x616, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void SheetBeforeDoubleClick(LPDISPATCH Sh, LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x617, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target, Cancel);
		}
		void SheetBeforeRightClick(LPDISPATCH Sh, LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x618, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target, Cancel);
		}
		void SheetActivate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x619, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetDeactivate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetCalculate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetChange(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void WorkbookOpen(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void WorkbookActivate(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x620, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void WorkbookDeactivate(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x621, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void WorkbookBeforeClose(LPDISPATCH Wb, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x622, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Cancel);
		}
		void WorkbookBeforeSave(LPDISPATCH Wb, BOOL SaveAsUI, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_PBOOL ;
			InvokeHelper(0x623, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, SaveAsUI, Cancel);
		}
		void WorkbookBeforePrint(LPDISPATCH Wb, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x624, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Cancel);
		}
		void WorkbookNewSheet(LPDISPATCH Wb, LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x625, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Sh);
		}
		void WorkbookAddinInstall(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x626, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void WorkbookAddinUninstall(LPDISPATCH Wb)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x627, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb);
		}
		void WindowResize(LPDISPATCH Wb, LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x612, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Wn);
		}
		void WindowActivate(LPDISPATCH Wb, LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x614, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Wn);
		}
		void WindowDeactivate(LPDISPATCH Wb, LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x615, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Wn);
		}
		void SheetFollowHyperlink(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void SheetPivotTableUpdate(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x86d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void WorkbookPivotTableCloseConnection(LPDISPATCH Wb, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x870, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Target);
		}
		void WorkbookPivotTableOpenConnection(LPDISPATCH Wb, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x871, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Target);
		}
		void WorkbookSync(LPDISPATCH Wb, long SyncEventType)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x8f1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, SyncEventType);
		}
		void WorkbookBeforeXmlImport(LPDISPATCH Wb, LPDISPATCH Map, LPCTSTR Url, BOOL IsRefresh, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_BSTR VTS_BOOL VTS_PBOOL ;
			InvokeHelper(0x8f2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Map, Url, IsRefresh, Cancel);
		}
		void WorkbookAfterXmlImport(LPDISPATCH Wb, LPDISPATCH Map, BOOL IsRefresh, long Result)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_BOOL VTS_I4 ;
			InvokeHelper(0x8f3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Map, IsRefresh, Result);
		}
		void WorkbookBeforeXmlExport(LPDISPATCH Wb, LPDISPATCH Map, LPCTSTR Url, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_BSTR VTS_PBOOL ;
			InvokeHelper(0x8f4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Map, Url, Cancel);
		}
		void WorkbookAfterXmlExport(LPDISPATCH Wb, LPDISPATCH Map, LPCTSTR Url, long Result)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_BSTR VTS_I4 ;
			InvokeHelper(0x8f5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Map, Url, Result);
		}
		void WorkbookRowsetComplete(LPDISPATCH Wb, LPCTSTR Description, LPCTSTR Sheet, BOOL Success)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_BSTR VTS_BOOL ;
			InvokeHelper(0xa33, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wb, Description, Sheet, Success);
		}
		void AfterCalculate()
		{
			InvokeHelper(0xa34, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// AppEvents properties
	public:

	};


	class CApplication : public COleDispatchDriver
	{
	public:
		CApplication(){} // Calls COleDispatchDriver default constructor
		CApplication(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CApplication(const CApplication& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _Application methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x131, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveChart()
		{
			LPDISPATCH result;
			InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveDialog()
		{
			LPDISPATCH result;
			InvokeHelper(0x32f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveMenuBar()
		{
			LPDISPATCH result;
			InvokeHelper(0x2f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_ActivePrinter()
		{
			CString result;
			InvokeHelper(0x132, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ActivePrinter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x132, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ActiveSheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveWindow()
		{
			LPDISPATCH result;
			InvokeHelper(0x2f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveWorkbook()
		{
			LPDISPATCH result;
			InvokeHelper(0x134, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AddIns()
		{
			LPDISPATCH result;
			InvokeHelper(0x225, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Assistant()
		{
			LPDISPATCH result;
			InvokeHelper(0x59e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Calculate()
		{
			InvokeHelper(0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Cells()
		{
			LPDISPATCH result;
			InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Charts()
		{
			LPDISPATCH result;
			InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Columns()
		{
			LPDISPATCH result;
			InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CommandBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x59f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DDEAppReturnCode()
		{
			long result;
			InvokeHelper(0x14c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void DDEExecute(long Channel, LPCTSTR String)
		{
			static BYTE parms[] = VTS_I4 VTS_BSTR ;
			InvokeHelper(0x14d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel, String);
		}
		long DDEInitiate(LPCTSTR App, LPCTSTR Topic)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x14e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, App, Topic);
			return result;
		}
		void DDEPoke(long Channel, VARIANT& Item, VARIANT& Data)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x14f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel, &Item, &Data);
		}
		VARIANT DDERequest(long Channel, LPCTSTR Item)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_BSTR ;
			InvokeHelper(0x150, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Channel, Item);
			return result;
		}
		void DDETerminate(long Channel)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x151, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel);
		}
		LPDISPATCH get_DialogSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x2fc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT _Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT ExecuteExcel4Macro(LPCTSTR String)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x15e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, String);
			return result;
		}
		LPDISPATCH Intersect(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2fe, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_MenuBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x24d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Modules()
		{
			LPDISPATCH result;
			InvokeHelper(0x246, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Names()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Cell1, VARIANT& Cell2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Cell1, &Cell2);
			return result;
		}
		LPDISPATCH get_Rows()
		{
			LPDISPATCH result;
			InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Run(VARIANT& Macro, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Macro, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		VARIANT _Run2(VARIANT& Macro, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x326, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Macro, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_Selection()
		{
			LPDISPATCH result;
			InvokeHelper(0x93, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SendKeys(VARIANT& Keys, VARIANT& Wait)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x17f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Keys, &Wait);
		}
		LPDISPATCH get_Sheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShortcutMenus(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x308, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get_ThisWorkbook()
		{
			LPDISPATCH result;
			InvokeHelper(0x30a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Toolbars()
		{
			LPDISPATCH result;
			InvokeHelper(0x228, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Union(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x30b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_Windows()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Workbooks()
		{
			LPDISPATCH result;
			InvokeHelper(0x23c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_WorksheetFunction()
		{
			LPDISPATCH result;
			InvokeHelper(0x5a0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Worksheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4IntlMacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x245, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4MacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x243, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ActivateMicrosoftApp(long Index)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x447, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index);
		}
		void AddChartAutoFormat(VARIANT& Chart, LPCTSTR Name, VARIANT& Description)
		{
			static BYTE parms[] = VTS_VARIANT VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xd8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Chart, Name, &Description);
		}
		void AddCustomList(VARIANT& ListArray, VARIANT& ByRow)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x30c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &ListArray, &ByRow);
		}
		BOOL get_AlertBeforeOverwriting()
		{
			BOOL result;
			InvokeHelper(0x3a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlertBeforeOverwriting(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_AltStartupPath()
		{
			CString result;
			InvokeHelper(0x139, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_AltStartupPath(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x139, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AskToUpdateLinks()
		{
			BOOL result;
			InvokeHelper(0x3e0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AskToUpdateLinks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableAnimations()
		{
			BOOL result;
			InvokeHelper(0x49c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableAnimations(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x49c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AutoCorrect()
		{
			LPDISPATCH result;
			InvokeHelper(0x479, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Build()
		{
			long result;
			InvokeHelper(0x13a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_CalculateBeforeSave()
		{
			BOOL result;
			InvokeHelper(0x13b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CalculateBeforeSave(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x13b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Calculation()
		{
			long result;
			InvokeHelper(0x13c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Calculation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x13c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Caller(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x13d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_CanPlaySounds()
		{
			BOOL result;
			InvokeHelper(0x13e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_CanRecordSounds()
		{
			BOOL result;
			InvokeHelper(0x13f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CellDragAndDrop()
		{
			BOOL result;
			InvokeHelper(0x140, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CellDragAndDrop(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x140, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double CentimetersToPoints(double Centimeters)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x43e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Centimeters);
			return result;
		}
		BOOL CheckSpelling(LPCTSTR Word, VARIANT& CustomDictionary, VARIANT& IgnoreUppercase)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Word, &CustomDictionary, &IgnoreUppercase);
			return result;
		}
		VARIANT get_ClipboardFormats(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x141, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_DisplayClipboardWindow()
		{
			BOOL result;
			InvokeHelper(0x142, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayClipboardWindow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x142, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ColorButtons()
		{
			BOOL result;
			InvokeHelper(0x16d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ColorButtons(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x16d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CommandUnderlines()
		{
			long result;
			InvokeHelper(0x143, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CommandUnderlines(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x143, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ConstrainNumeric()
		{
			BOOL result;
			InvokeHelper(0x144, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ConstrainNumeric(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x144, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT ConvertFormula(VARIANT& Formula, long FromReferenceStyle, VARIANT& ToReferenceStyle, VARIANT& ToAbsolute, VARIANT& RelativeTo)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x145, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Formula, FromReferenceStyle, &ToReferenceStyle, &ToAbsolute, &RelativeTo);
			return result;
		}
		BOOL get_CopyObjectsWithCells()
		{
			BOOL result;
			InvokeHelper(0x3df, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CopyObjectsWithCells(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Cursor()
		{
			long result;
			InvokeHelper(0x489, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Cursor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x489, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CustomListCount()
		{
			long result;
			InvokeHelper(0x313, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_CutCopyMode()
		{
			long result;
			InvokeHelper(0x14a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CutCopyMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x14a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DataEntryMode()
		{
			long result;
			InvokeHelper(0x14b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DataEntryMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x14b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Dummy1(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6f6, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		VARIANT Dummy2(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6f7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8);
			return result;
		}
		VARIANT Dummy3()
		{
			VARIANT result;
			InvokeHelper(0x6f8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Dummy4(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15);
			return result;
		}
		VARIANT Dummy5(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6fa, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13);
			return result;
		}
		VARIANT Dummy6()
		{
			VARIANT result;
			InvokeHelper(0x6fb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Dummy7()
		{
			VARIANT result;
			InvokeHelper(0x6fc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Dummy8(VARIANT& Arg1)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6fd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1);
			return result;
		}
		VARIANT Dummy9()
		{
			VARIANT result;
			InvokeHelper(0x6fe, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL Dummy10(VARIANT& arg)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &arg);
			return result;
		}
		void Dummy11()
		{
			InvokeHelper(0x700, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_DefaultFilePath()
		{
			CString result;
			InvokeHelper(0x40e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_DefaultFilePath(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x40e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void DeleteChartAutoFormat(LPCTSTR Name)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name);
		}
		void DeleteCustomList(long ListNum)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x30f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ListNum);
		}
		LPDISPATCH get_Dialogs()
		{
			LPDISPATCH result;
			InvokeHelper(0x2f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayAlerts()
		{
			BOOL result;
			InvokeHelper(0x157, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayAlerts(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x157, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayFormulaBar()
		{
			BOOL result;
			InvokeHelper(0x158, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFormulaBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x158, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayFullScreen()
		{
			BOOL result;
			InvokeHelper(0x425, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFullScreen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x425, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayNoteIndicator()
		{
			BOOL result;
			InvokeHelper(0x159, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayNoteIndicator(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x159, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DisplayCommentIndicator()
		{
			long result;
			InvokeHelper(0x4ac, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DisplayCommentIndicator(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayExcel4Menus()
		{
			BOOL result;
			InvokeHelper(0x39f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayExcel4Menus(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayRecentFiles()
		{
			BOOL result;
			InvokeHelper(0x39e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRecentFiles(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayScrollBars()
		{
			BOOL result;
			InvokeHelper(0x15a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayScrollBars(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x15a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayStatusBar()
		{
			BOOL result;
			InvokeHelper(0x15b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayStatusBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x15b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void DoubleClick()
		{
			InvokeHelper(0x15d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_EditDirectlyInCell()
		{
			BOOL result;
			InvokeHelper(0x3a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EditDirectlyInCell(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableAutoComplete()
		{
			BOOL result;
			InvokeHelper(0x49b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableAutoComplete(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x49b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EnableCancelKey()
		{
			long result;
			InvokeHelper(0x448, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EnableCancelKey(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x448, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableSound()
		{
			BOOL result;
			InvokeHelper(0x4ad, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableSound(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableTipWizard()
		{
			BOOL result;
			InvokeHelper(0x428, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableTipWizard(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x428, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_FileConverters(VARIANT& Index1, VARIANT& Index2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index1, &Index2);
			return result;
		}
		LPDISPATCH get_FileSearch()
		{
			LPDISPATCH result;
			InvokeHelper(0x4b0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_FileFind()
		{
			LPDISPATCH result;
			InvokeHelper(0x4b1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _FindFile()
		{
			InvokeHelper(0x42c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_FixedDecimal()
		{
			BOOL result;
			InvokeHelper(0x15f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FixedDecimal(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x15f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FixedDecimalPlaces()
		{
			long result;
			InvokeHelper(0x160, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FixedDecimalPlaces(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x160, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT GetCustomListContents(long ListNum)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x312, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, ListNum);
			return result;
		}
		long GetCustomListNum(VARIANT& ListArray)
		{
			long result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x311, DISPATCH_METHOD, VT_I4, (void*)&result, parms, &ListArray);
			return result;
		}
		VARIANT GetOpenFilename(VARIANT& FileFilter, VARIANT& FilterIndex, VARIANT& Title, VARIANT& ButtonText, VARIANT& MultiSelect)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x433, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &FileFilter, &FilterIndex, &Title, &ButtonText, &MultiSelect);
			return result;
		}
		VARIANT GetSaveAsFilename(VARIANT& InitialFilename, VARIANT& FileFilter, VARIANT& FilterIndex, VARIANT& Title, VARIANT& ButtonText)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x434, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &InitialFilename, &FileFilter, &FilterIndex, &Title, &ButtonText);
			return result;
		}
		void Goto(VARIANT& Reference, VARIANT& Scroll)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1db, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Reference, &Scroll);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Help(VARIANT& HelpFile, VARIANT& HelpContextID)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x162, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &HelpFile, &HelpContextID);
		}
		BOOL get_IgnoreRemoteRequests()
		{
			BOOL result;
			InvokeHelper(0x164, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IgnoreRemoteRequests(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x164, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double InchesToPoints(double Inches)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x43f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Inches);
			return result;
		}
		VARIANT InputBox(LPCTSTR Prompt, VARIANT& Title, VARIANT& Default, VARIANT& Left, VARIANT& Top, VARIANT& HelpFile, VARIANT& HelpContextID, VARIANT& Type)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x165, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Prompt, &Title, &Default, &Left, &Top, &HelpFile, &HelpContextID, &Type);
			return result;
		}
		BOOL get_Interactive()
		{
			BOOL result;
			InvokeHelper(0x169, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Interactive(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x169, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_International(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x16a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_Iteration()
		{
			BOOL result;
			InvokeHelper(0x16b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Iteration(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x16b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_LargeButtons()
		{
			BOOL result;
			InvokeHelper(0x16c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LargeButtons(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x16c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LibraryPath()
		{
			CString result;
			InvokeHelper(0x16e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void MacroOptions(VARIANT& Macro, VARIANT& Description, VARIANT& HasMenu, VARIANT& MenuText, VARIANT& HasShortcutKey, VARIANT& ShortcutKey, VARIANT& Category, VARIANT& StatusBar, VARIANT& HelpContextID, VARIANT& HelpFile)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x46f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Macro, &Description, &HasMenu, &MenuText, &HasShortcutKey, &ShortcutKey, &Category, &StatusBar, &HelpContextID, &HelpFile);
		}
		void MailLogoff()
		{
			InvokeHelper(0x3b1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void MailLogon(VARIANT& Name, VARIANT& Password, VARIANT& DownloadNewMail)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3af, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name, &Password, &DownloadNewMail);
		}
		VARIANT get_MailSession()
		{
			VARIANT result;
			InvokeHelper(0x3ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_MailSystem()
		{
			long result;
			InvokeHelper(0x3cb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_MathCoprocessorAvailable()
		{
			BOOL result;
			InvokeHelper(0x16f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		double get_MaxChange()
		{
			double result;
			InvokeHelper(0x170, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_MaxChange(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x170, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MaxIterations()
		{
			long result;
			InvokeHelper(0x171, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MaxIterations(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x171, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MemoryFree()
		{
			long result;
			InvokeHelper(0x172, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_MemoryTotal()
		{
			long result;
			InvokeHelper(0x173, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_MemoryUsed()
		{
			long result;
			InvokeHelper(0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_MouseAvailable()
		{
			BOOL result;
			InvokeHelper(0x175, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_MoveAfterReturn()
		{
			BOOL result;
			InvokeHelper(0x176, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MoveAfterReturn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x176, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MoveAfterReturnDirection()
		{
			long result;
			InvokeHelper(0x478, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MoveAfterReturnDirection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x478, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_RecentFiles()
		{
			LPDISPATCH result;
			InvokeHelper(0x4b2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH NextLetter()
		{
			LPDISPATCH result;
			InvokeHelper(0x3cc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_NetworkTemplatesPath()
		{
			CString result;
			InvokeHelper(0x184, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ODBCErrors()
		{
			LPDISPATCH result;
			InvokeHelper(0x4b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ODBCTimeout()
		{
			long result;
			InvokeHelper(0x4b4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ODBCTimeout(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnCalculate()
		{
			CString result;
			InvokeHelper(0x271, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnCalculate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x271, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnData()
		{
			CString result;
			InvokeHelper(0x275, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnData(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x275, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnDoubleClick()
		{
			CString result;
			InvokeHelper(0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnDoubleClick(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnEntry()
		{
			CString result;
			InvokeHelper(0x273, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnEntry(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x273, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void OnKey(LPCTSTR Key, VARIANT& Procedure)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x272, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Key, &Procedure);
		}
		void OnRepeat(LPCTSTR Text, LPCTSTR Procedure)
		{
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x301, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Text, Procedure);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void OnTime(VARIANT& EarliestTime, LPCTSTR Procedure, VARIANT& LatestTime, VARIANT& Schedule)
		{
			static BYTE parms[] = VTS_VARIANT VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x270, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EarliestTime, Procedure, &LatestTime, &Schedule);
		}
		void OnUndo(LPCTSTR Text, LPCTSTR Procedure)
		{
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x302, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Text, Procedure);
		}
		CString get_OnWindow()
		{
			CString result;
			InvokeHelper(0x26f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnWindow(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OperatingSystem()
		{
			CString result;
			InvokeHelper(0x177, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_OrganizationName()
		{
			CString result;
			InvokeHelper(0x178, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Path()
		{
			CString result;
			InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_PathSeparator()
		{
			CString result;
			InvokeHelper(0x179, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT get_PreviousSelections(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x17a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_PivotTableSelection()
		{
			BOOL result;
			InvokeHelper(0x4b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PivotTableSelection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PromptForSummaryInfo()
		{
			BOOL result;
			InvokeHelper(0x426, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PromptForSummaryInfo(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x426, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Quit()
		{
			InvokeHelper(0x12e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RecordMacro(VARIANT& BasicCode, VARIANT& XlmCode)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x305, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &BasicCode, &XlmCode);
		}
		BOOL get_RecordRelative()
		{
			BOOL result;
			InvokeHelper(0x17b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ReferenceStyle()
		{
			long result;
			InvokeHelper(0x17c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReferenceStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x17c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_RegisteredFunctions(VARIANT& Index1, VARIANT& Index2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x307, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index1, &Index2);
			return result;
		}
		BOOL RegisterXLL(LPCTSTR Filename)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Filename);
			return result;
		}
		void Repeat()
		{
			InvokeHelper(0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ResetTipWizard()
		{
			InvokeHelper(0x3a0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_RollZoom()
		{
			BOOL result;
			InvokeHelper(0x4b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RollZoom(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Save(VARIANT& Filename)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename);
		}
		void SaveWorkspace(VARIANT& Filename)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename);
		}
		BOOL get_ScreenUpdating()
		{
			BOOL result;
			InvokeHelper(0x17e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ScreenUpdating(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x17e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SetDefaultChart(VARIANT& FormatName, VARIANT& Gallery)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xdb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &FormatName, &Gallery);
		}
		long get_SheetsInNewWorkbook()
		{
			long result;
			InvokeHelper(0x3e1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SheetsInNewWorkbook(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowChartTipNames()
		{
			BOOL result;
			InvokeHelper(0x4b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowChartTipNames(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowChartTipValues()
		{
			BOOL result;
			InvokeHelper(0x4b8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowChartTipValues(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StandardFont()
		{
			CString result;
			InvokeHelper(0x39c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StandardFont(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x39c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_StandardFontSize()
		{
			double result;
			InvokeHelper(0x39d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_StandardFontSize(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x39d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StartupPath()
		{
			CString result;
			InvokeHelper(0x181, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT get_StatusBar()
		{
			VARIANT result;
			InvokeHelper(0x182, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_StatusBar(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_TemplatesPath()
		{
			CString result;
			InvokeHelper(0x17d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowToolTips()
		{
			BOOL result;
			InvokeHelper(0x183, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowToolTips(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x183, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DefaultSaveFormat()
		{
			long result;
			InvokeHelper(0x4b9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DefaultSaveFormat(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TransitionMenuKey()
		{
			CString result;
			InvokeHelper(0x136, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TransitionMenuKey(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x136, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TransitionMenuKeyAction()
		{
			long result;
			InvokeHelper(0x137, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TransitionMenuKeyAction(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x137, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TransitionNavigKeys()
		{
			BOOL result;
			InvokeHelper(0x138, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TransitionNavigKeys(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x138, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Undo()
		{
			InvokeHelper(0x12f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_UsableHeight()
		{
			double result;
			InvokeHelper(0x185, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_UsableWidth()
		{
			double result;
			InvokeHelper(0x186, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		BOOL get_UserControl()
		{
			BOOL result;
			InvokeHelper(0x4ba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UserControl(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_UserName()
		{
			CString result;
			InvokeHelper(0x187, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_UserName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x187, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VBE()
		{
			LPDISPATCH result;
			InvokeHelper(0x4bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Version()
		{
			CString result;
			InvokeHelper(0x188, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Volatile(VARIANT& Volatile)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x314, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Volatile);
		}
		void _Wait(VARIANT& Time)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x189, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Time);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WindowsForPens()
		{
			BOOL result;
			InvokeHelper(0x18b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_WindowState()
		{
			long result;
			InvokeHelper(0x18c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WindowState(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x18c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_UILanguage()
		{
			long result;
			InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_UILanguage(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DefaultSheetDirection()
		{
			long result;
			InvokeHelper(0xe5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DefaultSheetDirection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CursorMovement()
		{
			long result;
			InvokeHelper(0xe8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CursorMovement(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ControlCharacters()
		{
			BOOL result;
			InvokeHelper(0xe9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ControlCharacters(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xe9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT _WSFunction(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		BOOL get_EnableEvents()
		{
			BOOL result;
			InvokeHelper(0x4bc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableEvents(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayInfoWindow()
		{
			BOOL result;
			InvokeHelper(0x4bd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayInfoWindow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL Wait(VARIANT& Time)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6ea, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Time);
			return result;
		}
		BOOL get_ExtendList()
		{
			BOOL result;
			InvokeHelper(0x701, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ExtendList(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x701, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_OLEDBErrors()
		{
			LPDISPATCH result;
			InvokeHelper(0x702, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString GetPhonetic(VARIANT& Text)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x703, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Text);
			return result;
		}
		LPDISPATCH get_COMAddIns()
		{
			LPDISPATCH result;
			InvokeHelper(0x704, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DefaultWebOptions()
		{
			LPDISPATCH result;
			InvokeHelper(0x705, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_ProductCode()
		{
			CString result;
			InvokeHelper(0x706, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_UserLibraryPath()
		{
			CString result;
			InvokeHelper(0x707, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_AutoPercentEntry()
		{
			BOOL result;
			InvokeHelper(0x708, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoPercentEntry(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x708, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_LanguageSettings()
		{
			LPDISPATCH result;
			InvokeHelper(0x709, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Dummy101()
		{
			LPDISPATCH result;
			InvokeHelper(0x70a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Dummy12(LPDISPATCH p1, LPDISPATCH p2)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x70b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, p1, p2);
		}
		LPDISPATCH get_AnswerWizard()
		{
			LPDISPATCH result;
			InvokeHelper(0x70c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void CalculateFull()
		{
			InvokeHelper(0x70d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL FindFile()
		{
			BOOL result;
			InvokeHelper(0x6eb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_CalculationVersion()
		{
			long result;
			InvokeHelper(0x70e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowWindowsInTaskbar()
		{
			BOOL result;
			InvokeHelper(0x70f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowWindowsInTaskbar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x70f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FeatureInstall()
		{
			long result;
			InvokeHelper(0x710, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FeatureInstall(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x710, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Ready()
		{
			BOOL result;
			InvokeHelper(0x78c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		VARIANT Dummy13(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x78d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_FindFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x78e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_FindFormat(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x78e, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ReplaceFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x78f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_ReplaceFormat(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x78f, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_UsedObjects()
		{
			LPDISPATCH result;
			InvokeHelper(0x790, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_CalculationState()
		{
			long result;
			InvokeHelper(0x791, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_CalculationInterruptKey()
		{
			long result;
			InvokeHelper(0x792, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CalculationInterruptKey(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x792, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Watches()
		{
			LPDISPATCH result;
			InvokeHelper(0x793, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayFunctionToolTips()
		{
			BOOL result;
			InvokeHelper(0x794, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFunctionToolTips(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x794, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutomationSecurity()
		{
			long result;
			InvokeHelper(0x795, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutomationSecurity(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x795, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_FileDialog(long fileDialogType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x796, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, fileDialogType);
			return result;
		}
		void Dummy14()
		{
			InvokeHelper(0x798, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CalculateFullRebuild()
		{
			InvokeHelper(0x799, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_DisplayPasteOptions()
		{
			BOOL result;
			InvokeHelper(0x79a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayPasteOptions(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x79a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayInsertOptions()
		{
			BOOL result;
			InvokeHelper(0x79b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayInsertOptions(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x79b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_GenerateGetPivotData()
		{
			BOOL result;
			InvokeHelper(0x79c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_GenerateGetPivotData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x79c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AutoRecover()
		{
			LPDISPATCH result;
			InvokeHelper(0x79d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Hwnd()
		{
			long result;
			InvokeHelper(0x79e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Hinstance()
		{
			long result;
			InvokeHelper(0x79f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void CheckAbort(VARIANT& KeepAbort)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x7a0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &KeepAbort);
		}
		LPDISPATCH get_ErrorCheckingOptions()
		{
			LPDISPATCH result;
			InvokeHelper(0x7a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AutoFormatAsYouTypeReplaceHyperlinks()
		{
			BOOL result;
			InvokeHelper(0x7a3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoFormatAsYouTypeReplaceHyperlinks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SmartTagRecognizers()
		{
			LPDISPATCH result;
			InvokeHelper(0x7a4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_NewWorkbook()
		{
			LPDISPATCH result;
			InvokeHelper(0x61d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SpellingOptions()
		{
			LPDISPATCH result;
			InvokeHelper(0x7a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Speech()
		{
			LPDISPATCH result;
			InvokeHelper(0x7a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_MapPaperSize()
		{
			BOOL result;
			InvokeHelper(0x7a7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MapPaperSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowStartupDialog()
		{
			BOOL result;
			InvokeHelper(0x7a8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowStartupDialog(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_DecimalSeparator()
		{
			CString result;
			InvokeHelper(0x711, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_DecimalSeparator(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x711, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ThousandsSeparator()
		{
			CString result;
			InvokeHelper(0x712, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ThousandsSeparator(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x712, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UseSystemSeparators()
		{
			BOOL result;
			InvokeHelper(0x7a9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseSystemSeparators(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ThisCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x7aa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RTD()
		{
			LPDISPATCH result;
			InvokeHelper(0x7ab, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayDocumentActionTaskPane()
		{
			BOOL result;
			InvokeHelper(0x8cb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayDocumentActionTaskPane(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void DisplayXMLSourcePane(VARIANT& XmlMap)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x8cc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &XmlMap);
		}
		BOOL get_ArbitraryXMLSupportAvailable()
		{
			BOOL result;
			InvokeHelper(0x8ce, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		VARIANT Support(LPDISPATCH Object, long ID, VARIANT& arg)
		{
			VARIANT result;
			static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x8cf, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Object, ID, &arg);
			return result;
		}
		VARIANT Dummy20(long grfCompareFunctions)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x945, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, grfCompareFunctions);
			return result;
		}
		long get_MeasurementUnit()
		{
			long result;
			InvokeHelper(0x947, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MeasurementUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x947, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowSelectionFloaties()
		{
			BOOL result;
			InvokeHelper(0x948, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowSelectionFloaties(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x948, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowMenuFloaties()
		{
			BOOL result;
			InvokeHelper(0x949, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowMenuFloaties(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x949, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowDevTools()
		{
			BOOL result;
			InvokeHelper(0x94a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowDevTools(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x94a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableLivePreview()
		{
			BOOL result;
			InvokeHelper(0x94b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableLivePreview(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x94b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayDocumentInformationPanel()
		{
			BOOL result;
			InvokeHelper(0x94c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayDocumentInformationPanel(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x94c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AlwaysUseClearType()
		{
			BOOL result;
			InvokeHelper(0x94d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlwaysUseClearType(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x94d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WarnOnFunctionNameConflict()
		{
			BOOL result;
			InvokeHelper(0x94e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WarnOnFunctionNameConflict(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x94e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FormulaBarHeight()
		{
			long result;
			InvokeHelper(0x94f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FormulaBarHeight(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x94f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayFormulaAutoComplete()
		{
			BOOL result;
			InvokeHelper(0x950, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFormulaAutoComplete(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x950, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_GenerateTableRefs()
		{
			long result;
			InvokeHelper(0x951, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_GenerateTableRefs(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x951, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Assistance()
		{
			LPDISPATCH result;
			InvokeHelper(0x952, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void CalculateUntilAsyncQueriesDone()
		{
			InvokeHelper(0x953, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_EnableLargeOperationAlert()
		{
			BOOL result;
			InvokeHelper(0x954, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableLargeOperationAlert(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x954, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LargeOperationCellThousandCount()
		{
			long result;
			InvokeHelper(0x955, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LargeOperationCellThousandCount(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x955, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DeferAsyncQueries()
		{
			BOOL result;
			InvokeHelper(0x956, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DeferAsyncQueries(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x956, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_MultiThreadedCalculation()
		{
			LPDISPATCH result;
			InvokeHelper(0x957, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long SharePointVersion(LPCTSTR bstrUrl)
		{
			long result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x958, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrUrl);
			return result;
		}
		long get_ActiveEncryptionSession()
		{
			long result;
			InvokeHelper(0x95a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_HighQualityModeForGraphics()
		{
			BOOL result;
			InvokeHelper(0x95b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HighQualityModeForGraphics(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x95b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_FileExportConverters()
		{
			LPDISPATCH result;
			InvokeHelper(0xad0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// _Application properties
	public:

	};

	class CArc : public COleDispatchDriver
	{
	public:
		CArc(){} // Calls COleDispatchDriver default constructor
		CArc(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CArc(const CArc& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Arc methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy43()
		{
			InvokeHelper(0x1002b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Arc properties
	public:

	};



	class CArcs : public COleDispatchDriver
	{
	public:
		CArcs(){} // Calls COleDispatchDriver default constructor
		CArcs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CArcs(const CArcs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Arcs methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy43()
		{
			InvokeHelper(0x1002b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Add(double X1, double Y1, double X2, double Y2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, X1, Y1, X2, Y2);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Arcs properties
	public:

	};


	class CAreas : public COleDispatchDriver
	{
	public:
		CAreas(){} // Calls COleDispatchDriver default constructor
		CAreas(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAreas(const CAreas& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Areas methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}

		// Areas properties
	public:

	};



	class CAutoCorrect : public COleDispatchDriver
	{
	public:
		CAutoCorrect(){} // Calls COleDispatchDriver default constructor
		CAutoCorrect(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAutoCorrect(const CAutoCorrect& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AutoCorrect methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddReplacement(LPCTSTR What, LPCTSTR Replacement)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x47a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, What, Replacement);
			return result;
		}
		BOOL get_CapitalizeNamesOfDays()
		{
			BOOL result;
			InvokeHelper(0x47e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CapitalizeNamesOfDays(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x47e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT DeleteReplacement(LPCTSTR What)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x47b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, What);
			return result;
		}
		VARIANT get_ReplacementList(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x47f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_ReplacementList(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x47f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		BOOL get_ReplaceText()
		{
			BOOL result;
			InvokeHelper(0x47c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ReplaceText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x47c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TwoInitialCapitals()
		{
			BOOL result;
			InvokeHelper(0x47d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TwoInitialCapitals(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x47d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CorrectSentenceCap()
		{
			BOOL result;
			InvokeHelper(0x653, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CorrectSentenceCap(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x653, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CorrectCapsLock()
		{
			BOOL result;
			InvokeHelper(0x654, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CorrectCapsLock(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x654, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayAutoCorrectOptions()
		{
			BOOL result;
			InvokeHelper(0x786, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayAutoCorrectOptions(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x786, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoExpandListRange()
		{
			BOOL result;
			InvokeHelper(0x8f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoExpandListRange(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoFillFormulasInLists()
		{
			BOOL result;
			InvokeHelper(0xa52, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoFillFormulasInLists(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa52, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// AutoCorrect properties
	public:

	};


	class CAutoFilter : public COleDispatchDriver
	{
	public:
		CAutoFilter(){} // Calls COleDispatchDriver default constructor
		CAutoFilter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAutoFilter(const CAutoFilter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AutoFilter methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Filters()
		{
			LPDISPATCH result;
			InvokeHelper(0x651, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_FilterMode()
		{
			BOOL result;
			InvokeHelper(0x320, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sort()
		{
			LPDISPATCH result;
			InvokeHelper(0x370, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ApplyFilter()
		{
			InvokeHelper(0xa50, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ShowAllData()
		{
			InvokeHelper(0x31a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// AutoFilter properties
	public:

	};


	class CAutoRecover : public COleDispatchDriver
	{
	public:
		CAutoRecover(){} // Calls COleDispatchDriver default constructor
		CAutoRecover(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAutoRecover(const CAutoRecover& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AutoRecover methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Time()
		{
			long result;
			InvokeHelper(0x18a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Time(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x18a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Path()
		{
			CString result;
			InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Path(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x123, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// AutoRecover properties
	public:

	};


	class CAxes : public COleDispatchDriver
	{
	public:
		CAxes(){} // Calls COleDispatchDriver default constructor
		CAxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAxes(const CAxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Axes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Type, long AxisGroup)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, AxisGroup);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(long Type, long AxisGroup)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, AxisGroup);
			return result;
		}

		// Axes properties
	public:

	};


	class CAxis : public COleDispatchDriver
	{
	public:
		CAxis(){} // Calls COleDispatchDriver default constructor
		CAxis(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAxis(const CAxis& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Axis methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AxisBetweenCategories()
		{
			BOOL result;
			InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AxisBetweenCategories(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AxisGroup()
		{
			long result;
			InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AxisTitle()
		{
			LPDISPATCH result;
			InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_CategoryNames()
		{
			VARIANT result;
			InvokeHelper(0x9c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CategoryNames(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Crosses()
		{
			long result;
			InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Crosses(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_CrossesAt()
		{
			double result;
			InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_CrossesAt(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_HasMajorGridlines()
		{
			BOOL result;
			InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasMajorGridlines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasMinorGridlines()
		{
			BOOL result;
			InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasMinorGridlines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasTitle()
		{
			BOOL result;
			InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasTitle(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_MajorGridlines()
		{
			LPDISPATCH result;
			InvokeHelper(0x59, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_MajorTickMark()
		{
			long result;
			InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MajorTickMark(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_MajorUnit()
		{
			double result;
			InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_MajorUnit(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MajorUnitIsAuto()
		{
			BOOL result;
			InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MajorUnitIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_MaximumScale()
		{
			double result;
			InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_MaximumScale(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MaximumScaleIsAuto()
		{
			BOOL result;
			InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MaximumScaleIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_MinimumScale()
		{
			double result;
			InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_MinimumScale(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MinimumScaleIsAuto()
		{
			BOOL result;
			InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MinimumScaleIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_MinorGridlines()
		{
			LPDISPATCH result;
			InvokeHelper(0x5a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_MinorTickMark()
		{
			long result;
			InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MinorTickMark(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_MinorUnit()
		{
			double result;
			InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_MinorUnit(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MinorUnitIsAuto()
		{
			BOOL result;
			InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MinorUnitIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ReversePlotOrder()
		{
			BOOL result;
			InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ReversePlotOrder(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ScaleType()
		{
			long result;
			InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScaleType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_TickLabelPosition()
		{
			long result;
			InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TickLabelPosition(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TickLabels()
		{
			LPDISPATCH result;
			InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_TickLabelSpacing()
		{
			long result;
			InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TickLabelSpacing(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TickMarkSpacing()
		{
			long result;
			InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TickMarkSpacing(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BaseUnit()
		{
			long result;
			InvokeHelper(0x66f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BaseUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_BaseUnitIsAuto()
		{
			BOOL result;
			InvokeHelper(0x670, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BaseUnitIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x670, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MajorUnitScale()
		{
			long result;
			InvokeHelper(0x671, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MajorUnitScale(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x671, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MinorUnitScale()
		{
			long result;
			InvokeHelper(0x672, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MinorUnitScale(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x672, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CategoryType()
		{
			long result;
			InvokeHelper(0x673, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CategoryType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x673, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		long get_DisplayUnit()
		{
			long result;
			InvokeHelper(0x75e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DisplayUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x75e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_DisplayUnitCustom()
		{
			double result;
			InvokeHelper(0x75f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_DisplayUnitCustom(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x75f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasDisplayUnitLabel()
		{
			BOOL result;
			InvokeHelper(0x760, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasDisplayUnitLabel(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x760, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_DisplayUnitLabel()
		{
			LPDISPATCH result;
			InvokeHelper(0x761, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_LogBase()
		{
			double result;
			InvokeHelper(0xa56, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_LogBase(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa56, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TickLabelSpacingIsAuto()
		{
			BOOL result;
			InvokeHelper(0xa57, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TickLabelSpacingIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa57, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Axis properties
	public:

	};


	class CAxisTitle : public COleDispatchDriver
	{
	public:
		CAxisTitle(){} // Calls COleDispatchDriver default constructor
		CAxisTitle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CAxisTitle(const CAxisTitle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// AxisTitle methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_IncludeInLayout()
		{
			BOOL result;
			InvokeHelper(0xa58, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeInLayout(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa58, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// AxisTitle properties
	public:

	};



	class CBorder : public COleDispatchDriver
	{
	public:
		CBorder(){} // Calls COleDispatchDriver default constructor
		CBorder(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CBorder(const CBorder& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Border methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ColorIndex()
		{
			VARIANT result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_LineStyle()
		{
			VARIANT result;
			InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_LineStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Weight()
		{
			VARIANT result;
			InvokeHelper(0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Weight(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ThemeColor()
		{
			VARIANT result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Border properties
	public:

	};


	class CBorders : public COleDispatchDriver
	{
	public:
		CBorders(){} // Calls COleDispatchDriver default constructor
		CBorders(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CBorders(const CBorders& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Borders methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ColorIndex()
		{
			VARIANT result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		VARIANT get_LineStyle()
		{
			VARIANT result;
			InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_LineStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Weight()
		{
			VARIANT result;
			InvokeHelper(0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Weight(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		VARIANT get_ThemeColor()
		{
			VARIANT result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Borders properties
	public:

	};


	class CButton0 : public COleDispatchDriver
	{
	public:
		CButton0(){} // Calls COleDispatchDriver default constructor
		CButton0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CButton0(const CButton0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Button methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_CancelButton()
		{
			BOOL result;
			InvokeHelper(0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CancelButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DefaultButton()
		{
			BOOL result;
			InvokeHelper(0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DefaultButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DismissButton()
		{
			BOOL result;
			InvokeHelper(0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DismissButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HelpButton()
		{
			BOOL result;
			InvokeHelper(0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HelpButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Button properties
	public:

	};


	class CButtons : public COleDispatchDriver
	{
	public:
		CButtons(){} // Calls COleDispatchDriver default constructor
		CButtons(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CButtons(const CButtons& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Buttons methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_CancelButton()
		{
			BOOL result;
			InvokeHelper(0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CancelButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DefaultButton()
		{
			BOOL result;
			InvokeHelper(0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DefaultButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DismissButton()
		{
			BOOL result;
			InvokeHelper(0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DismissButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HelpButton()
		{
			BOOL result;
			InvokeHelper(0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HelpButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Buttons properties
	public:

	};


	class CCalculatedFields : public COleDispatchDriver
	{
	public:
		CCalculatedFields(){} // Calls COleDispatchDriver default constructor
		CCalculatedFields(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCalculatedFields(const CCalculatedFields& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CalculatedFields methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Add(LPCTSTR Name, LPCTSTR Formula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Formula);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Field)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Field);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, LPCTSTR Formula, VARIANT& UseStandardFormula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Formula, &UseStandardFormula);
			return result;
		}

		// CalculatedFields properties
	public:

	};

	class CCalculatedItems : public COleDispatchDriver
	{
	public:
		CCalculatedItems(){} // Calls COleDispatchDriver default constructor
		CCalculatedItems(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCalculatedItems(const CCalculatedItems& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CalculatedItems methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Add(LPCTSTR Name, LPCTSTR Formula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Formula);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Field)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Field);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, LPCTSTR Formula, VARIANT& UseStandardFormula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Formula, &UseStandardFormula);
			return result;
		}

		// CalculatedItems properties
	public:

	};


	class CCalculatedMember : public COleDispatchDriver
	{
	public:
		CCalculatedMember(){} // Calls COleDispatchDriver default constructor
		CCalculatedMember(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCalculatedMember(const CCalculatedMember& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CalculatedMember methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_SourceName()
		{
			CString result;
			InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_SolveOrder()
		{
			long result;
			InvokeHelper(0x88b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_IsValid()
		{
			BOOL result;
			InvokeHelper(0x88c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// CalculatedMember properties
	public:

	};


	class CCalculatedMembers : public COleDispatchDriver
	{
	public:
		CCalculatedMembers(){} // Calls COleDispatchDriver default constructor
		CCalculatedMembers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCalculatedMembers(const CCalculatedMembers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CalculatedMembers methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, LPCTSTR Formula, VARIANT& SolveOrder, VARIANT& Type)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Formula, &SolveOrder, &Type);
			return result;
		}

		// CalculatedMembers properties
	public:

	};


	class CCalloutFormat : public COleDispatchDriver
	{
	public:
		CCalloutFormat(){} // Calls COleDispatchDriver default constructor
		CCalloutFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCalloutFormat(const CCalloutFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CalloutFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void AutomaticLength()
		{
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CustomDrop(float Drop)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Drop);
		}
		void CustomLength(float Length)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Length);
		}
		void PresetDrop(long DropType)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DropType);
		}
		long get_Accent()
		{
			long result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Accent(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Angle()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Angle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutoAttach()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoAttach(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutoLength()
		{
			long result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Border()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Border(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Drop()
		{
			float result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		long get_DropType()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_Gap()
		{
			float result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Gap(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Length()
		{
			float result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// CalloutFormat properties
	public:

	};


	class CCharacters : public COleDispatchDriver
	{
	public:
		CCharacters(){} // Calls COleDispatchDriver default constructor
		CCharacters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCharacters(const CCharacters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Characters methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Insert(LPCTSTR String)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, String);
			return result;
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_PhoneticCharacters()
		{
			CString result;
			InvokeHelper(0x5f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticCharacters(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Characters properties
	public:

	};


	class CChart : public COleDispatchDriver
	{
	public:
		CChart(){} // Calls COleDispatchDriver default constructor
		CChart(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChart(const CChart& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _Chart methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_CodeName()
		{
			CString result;
			InvokeHelper(0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__CodeName()
		{
			CString result;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__CodeName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnDoubleClick()
		{
			CString result;
			InvokeHelper(0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnDoubleClick(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PageSetup()
		{
			LPDISPATCH result;
			InvokeHelper(0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void _Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		BOOL get_ProtectContents()
		{
			BOOL result;
			InvokeHelper(0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectDrawingObjects()
		{
			BOOL result;
			InvokeHelper(0x125, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectionMode()
		{
			BOOL result;
			InvokeHelper(0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _Dummy23()
		{
			InvokeHelper(0x10017, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Shapes()
		{
			LPDISPATCH result;
			InvokeHelper(0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x97, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &LegendKey, &AutoText, &HasLeaderLines);
		}
		LPDISPATCH Arcs(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2f8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Area3DGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AreaGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void AutoFormat(long Gallery, VARIANT& Format)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Gallery, &Format);
		}
		BOOL get_AutoScaling()
		{
			BOOL result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaling(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Axes(VARIANT& Type, long AxisGroup)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 ;
			InvokeHelper(0x17, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Type, AxisGroup);
			return result;
		}
		void SetBackgroundPicture(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4a4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		LPDISPATCH get_Bar3DGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH BarGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Buttons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_ChartArea()
		{
			LPDISPATCH result;
			InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH ChartGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH ChartObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x424, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_ChartTitle()
		{
			LPDISPATCH result;
			InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ChartWizard(VARIANT& Source, VARIANT& Gallery, VARIANT& Format, VARIANT& PlotBy, VARIANT& CategoryLabels, VARIANT& SeriesLabels, VARIANT& HasLegend, VARIANT& Title, VARIANT& CategoryTitle, VARIANT& ValueTitle, VARIANT& ExtraTitle)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xc4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Source, &Gallery, &Format, &PlotBy, &CategoryLabels, &SeriesLabels, &HasLegend, &Title, &CategoryTitle, &ValueTitle, &ExtraTitle);
		}
		LPDISPATCH CheckBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x338, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
		}
		LPDISPATCH get_Column3DGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH ColumnGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void CopyPicture(long Appearance, long Format, long Size)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Appearance, Format, Size);
		}
		LPDISPATCH get_Corners()
		{
			LPDISPATCH result;
			InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void CreatePublisher(VARIANT& Edition, long Appearance, long Size, VARIANT& ContainsPICT, VARIANT& ContainsBIFF, VARIANT& ContainsRTF, VARIANT& ContainsVALU)
		{
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1ca, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Edition, Appearance, Size, &ContainsPICT, &ContainsBIFF, &ContainsRTF, &ContainsVALU);
		}
		LPDISPATCH get_DataTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x573, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DepthPercent()
		{
			long result;
			InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DepthPercent(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Deselect()
		{
			InvokeHelper(0x460, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_DisplayBlanksAs()
		{
			long result;
			InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DisplayBlanksAs(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH DoughnutGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Drawings(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x304, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DrawingObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x58, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DropDowns(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x344, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Elevation()
		{
			long result;
			InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Elevation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT _Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		LPDISPATCH get_Floor()
		{
			LPDISPATCH result;
			InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_GapDepth()
		{
			long result;
			InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_GapDepth(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH GroupBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x342, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH GroupObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x459, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT get_HasAxis(VARIANT& Index1, VARIANT& Index2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index1, &Index2);
			return result;
		}
		void put_HasAxis(VARIANT& Index1, VARIANT& Index2, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index1, &Index2, &newValue);
		}
		BOOL get_HasDataTable()
		{
			BOOL result;
			InvokeHelper(0x574, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasDataTable(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x574, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasLegend()
		{
			BOOL result;
			InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasLegend(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasTitle()
		{
			BOOL result;
			InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasTitle(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HeightPercent()
		{
			long result;
			InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HeightPercent(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Hyperlinks()
		{
			LPDISPATCH result;
			InvokeHelper(0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Labels(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x349, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Legend()
		{
			LPDISPATCH result;
			InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Line3DGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH LineGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Lines(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH ListBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x340, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Location(long Where, VARIANT& Name)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x575, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Where, &Name);
			return result;
		}
		LPDISPATCH OLEObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x31f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH OptionButtons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Ovals(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x321, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Paste(VARIANT& Type)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Type);
		}
		long get_Perspective()
		{
			long result;
			InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Perspective(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x39, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Pictures(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x303, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Pie3DGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH PieGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_PlotArea()
		{
			LPDISPATCH result;
			InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_PlotVisibleOnly()
		{
			BOOL result;
			InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PlotVisibleOnly(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH RadarGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Rectangles(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x306, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT get_RightAngleAxes()
		{
			VARIANT result;
			InvokeHelper(0x3a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RightAngleAxes(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Rotation()
		{
			VARIANT result;
			InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Rotation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH ScrollBars(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH SeriesCollection(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x44, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_SizeWithWindow()
		{
			BOOL result;
			InvokeHelper(0x5e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SizeWithWindow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowWindow()
		{
			BOOL result;
			InvokeHelper(0x577, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowWindow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x577, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Spinners(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x346, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_SubType()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SubType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SurfaceGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH TextBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x309, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ChartType()
		{
			long result;
			InvokeHelper(0x578, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ChartType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x578, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ApplyCustomType(long ChartType, VARIANT& TypeName)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x579, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ChartType, &TypeName);
		}
		LPDISPATCH get_Walls()
		{
			LPDISPATCH result;
			InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_WallsAndGridlines2D()
		{
			BOOL result;
			InvokeHelper(0xd2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WallsAndGridlines2D(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xd2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH XYGroups(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x10, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_BarShape()
		{
			long result;
			InvokeHelper(0x57b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BarShape(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x57b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PlotBy()
		{
			long result;
			InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PlotBy(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void CopyChartBuild()
		{
			InvokeHelper(0x57c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ProtectFormatting()
		{
			BOOL result;
			InvokeHelper(0x57d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectFormatting(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x57d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ProtectData()
		{
			BOOL result;
			InvokeHelper(0x57e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x57e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ProtectGoalSeek()
		{
			BOOL result;
			InvokeHelper(0x57f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectGoalSeek(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x57f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ProtectSelection()
		{
			BOOL result;
			InvokeHelper(0x580, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectSelection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x580, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void GetChartElement(long x, long y, long * ElementID, long * Arg1, long * Arg2)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 ;
			InvokeHelper(0x581, DISPATCH_METHOD, VT_EMPTY, NULL, parms, x, y, ElementID, Arg1, Arg2);
		}
		void SetSourceData(LPDISPATCH Source, VARIANT& PlotBy)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT ;
			InvokeHelper(0x585, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Source, &PlotBy);
		}
		BOOL Export(LPCTSTR Filename, VARIANT& FilterName, VARIANT& Interactive)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x586, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Filename, &FilterName, &Interactive);
			return result;
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_PivotLayout()
		{
			LPDISPATCH result;
			InvokeHelper(0x716, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_HasPivotFields()
		{
			BOOL result;
			InvokeHelper(0x717, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasPivotFields(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x717, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Scripts()
		{
			LPDISPATCH result;
			InvokeHelper(0x718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		LPDISPATCH get_Tab()
		{
			LPDISPATCH result;
			InvokeHelper(0x411, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MailEnvelope()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines, VARIANT& ShowSeriesName, VARIANT& ShowCategoryName, VARIANT& ShowValue, VARIANT& ShowPercentage, VARIANT& ShowBubbleSize, VARIANT& Separator)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x782, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &LegendKey, &AutoText, &HasLeaderLines, &ShowSeriesName, &ShowCategoryName, &ShowValue, &ShowPercentage, &ShowBubbleSize, &Separator);
		}
		void SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout, VARIANT& Local)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x785, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout, &Local);
		}
		void Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		void ApplyLayout(long Layout, VARIANT& ChartType)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x9c4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Layout, &ChartType);
		}
		void SetElement(long Element)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9c6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Element);
		}
		BOOL get_ShowDataLabelsOverMaximum()
		{
			BOOL result;
			InvokeHelper(0x9c8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowDataLabelsOverMaximum(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SideWall()
		{
			LPDISPATCH result;
			InvokeHelper(0x9c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BackWall()
		{
			LPDISPATCH result;
			InvokeHelper(0x9ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void ApplyChartTemplate(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x9cb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		void SaveChartTemplate(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x9cc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		void SetDefaultChart(VARIANT& Name)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xdb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name);
		}
		void ExportAsFixedFormat(long Type, VARIANT& Filename, VARIANT& Quality, VARIANT& IncludeDocProperties, VARIANT& IgnorePrintAreas, VARIANT& From, VARIANT& To, VARIANT& OpenAfterPublish, VARIANT& FixedFormatExtClassPtr)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Filename, &Quality, &IncludeDocProperties, &IgnorePrintAreas, &From, &To, &OpenAfterPublish, &FixedFormatExtClassPtr);
		}
		VARIANT get_ChartStyle()
		{
			VARIANT result;
			InvokeHelper(0x9cd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ChartStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void ClearToMatchStyle()
		{
			InvokeHelper(0x9ce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// _Chart properties
	public:

	};

	class CChartArea : public COleDispatchDriver
	{
	public:
		CChartArea(){} // Calls COleDispatchDriver default constructor
		CChartArea(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartArea(const CChartArea& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartArea methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Clear()
		{
			VARIANT result;
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearContents()
		{
			VARIANT result;
			InvokeHelper(0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ChartArea properties
	public:

	};


	class CChartColorFormat : public COleDispatchDriver
	{
	public:
		CChartColorFormat(){} // Calls COleDispatchDriver default constructor
		CChartColorFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartColorFormat(const CChartColorFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartColorFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_SchemeColor()
		{
			long result;
			InvokeHelper(0x66e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SchemeColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RGB()
		{
			long result;
			InvokeHelper(0x41f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// ChartColorFormat properties
	public:

	};


	class CChartEvents : public COleDispatchDriver
	{
	public:
		CChartEvents(){} // Calls COleDispatchDriver default constructor
		CChartEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartEvents(const CChartEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartEvents methods
	public:
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Deactivate()
		{
			InvokeHelper(0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Resize()
		{
			InvokeHelper(0x100, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void MouseDown(long Button, long Shift, long x, long y)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x5fb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Button, Shift, x, y);
		}
		void MouseUp(long Button, long Shift, long x, long y)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x5fc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Button, Shift, x, y);
		}
		void MouseMove(long Button, long Shift, long x, long y)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x5fd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Button, Shift, x, y);
		}
		void BeforeRightClick(BOOL * Cancel)
		{
			static BYTE parms[] = VTS_PBOOL ;
			InvokeHelper(0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Cancel);
		}
		void DragPlot()
		{
			InvokeHelper(0x5ff, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void DragOver()
		{
			InvokeHelper(0x600, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void BeforeDoubleClick(long ElementID, long Arg1, long Arg2, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_PBOOL ;
			InvokeHelper(0x601, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ElementID, Arg1, Arg2, Cancel);
		}
		void Select(long ElementID, long Arg1, long Arg2)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ElementID, Arg1, Arg2);
		}
		void SeriesChange(long SeriesIndex, long PointIndex)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x602, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SeriesIndex, PointIndex);
		}
		void Calculate()
		{
			InvokeHelper(0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// ChartEvents properties
	public:

	};


	class CChartFillFormat : public COleDispatchDriver
	{
	public:
		CChartFillFormat(){} // Calls COleDispatchDriver default constructor
		CChartFillFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartFillFormat(const CChartFillFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartFillFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void OneColorGradient(long Style, long Variant, float Degree)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 ;
			InvokeHelper(0x655, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant, Degree);
		}
		void TwoColorGradient(long Style, long Variant)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x658, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant);
		}
		void PresetTextured(long PresetTexture)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x659, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PresetTexture);
		}
		void Solid()
		{
			InvokeHelper(0x65b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Patterned(long Pattern)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Pattern);
		}
		void UserPicture(VARIANT& PictureFile, VARIANT& PictureFormat, VARIANT& PictureStackUnit, VARIANT& PicturePlacement)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x65d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &PictureFile, &PictureFormat, &PictureStackUnit, &PicturePlacement);
		}
		void UserTextured(LPCTSTR TextureFile)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x662, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TextureFile);
		}
		void PresetGradient(long Style, long Variant, long PresetGradientType)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x664, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant, PresetGradientType);
		}
		LPDISPATCH get_BackColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x666, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ForeColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x667, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_GradientColorType()
		{
			long result;
			InvokeHelper(0x668, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_GradientDegree()
		{
			float result;
			InvokeHelper(0x669, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		long get_GradientStyle()
		{
			long result;
			InvokeHelper(0x66a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_GradientVariant()
		{
			long result;
			InvokeHelper(0x66b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Pattern()
		{
			long result;
			InvokeHelper(0x5f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_PresetGradientType()
		{
			long result;
			InvokeHelper(0x665, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_PresetTexture()
		{
			long result;
			InvokeHelper(0x65a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_TextureName()
		{
			CString result;
			InvokeHelper(0x66c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_TextureType()
		{
			long result;
			InvokeHelper(0x66d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ChartFillFormat properties
	public:

	};


	class CChartFormat : public COleDispatchDriver
	{
	public:
		CChartFormat(){} // Calls COleDispatchDriver default constructor
		CChartFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartFormat(const CChartFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Glow()
		{
			LPDISPATCH result;
			InvokeHelper(0xa67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Line()
		{
			LPDISPATCH result;
			InvokeHelper(0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PictureFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shadow()
		{
			LPDISPATCH result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SoftEdge()
		{
			LPDISPATCH result;
			InvokeHelper(0xa66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextFrame2()
		{
			LPDISPATCH result;
			InvokeHelper(0xa63, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ThreeD()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ChartFormat properties
	public:

	};


	class CChartGroup : public COleDispatchDriver
	{
	public:
		CChartGroup(){} // Calls COleDispatchDriver default constructor
		CChartGroup(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartGroup(const CChartGroup& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartGroup methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_AxisGroup()
		{
			long result;
			InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AxisGroup(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DoughnutHoleSize()
		{
			long result;
			InvokeHelper(0x466, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DoughnutHoleSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x466, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_DownBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DropLines()
		{
			LPDISPATCH result;
			InvokeHelper(0x8e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_FirstSliceAngle()
		{
			long result;
			InvokeHelper(0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FirstSliceAngle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_GapWidth()
		{
			long result;
			InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_GapWidth(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasDropLines()
		{
			BOOL result;
			InvokeHelper(0x3d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasDropLines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasHiLoLines()
		{
			BOOL result;
			InvokeHelper(0x3e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasHiLoLines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasRadarAxisLabels()
		{
			BOOL result;
			InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasRadarAxisLabels(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasSeriesLines()
		{
			BOOL result;
			InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasSeriesLines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasUpDownBars()
		{
			BOOL result;
			InvokeHelper(0x42, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasUpDownBars(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_HiLoLines()
		{
			LPDISPATCH result;
			InvokeHelper(0x8f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Overlap()
		{
			long result;
			InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Overlap(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_RadarAxisLabels()
		{
			LPDISPATCH result;
			InvokeHelper(0x90, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH SeriesCollection(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x44, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_SeriesLines()
		{
			LPDISPATCH result;
			InvokeHelper(0x91, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_SubType()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SubType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_UpBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x8c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_VaryByCategories()
		{
			BOOL result;
			InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_VaryByCategories(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SizeRepresents()
		{
			long result;
			InvokeHelper(0x674, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SizeRepresents(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x674, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BubbleScale()
		{
			long result;
			InvokeHelper(0x675, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BubbleScale(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x675, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowNegativeBubbles()
		{
			BOOL result;
			InvokeHelper(0x676, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowNegativeBubbles(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x676, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SplitType()
		{
			long result;
			InvokeHelper(0x677, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SplitType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x677, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_SplitValue()
		{
			VARIANT result;
			InvokeHelper(0x678, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_SplitValue(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x678, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_SecondPlotSize()
		{
			long result;
			InvokeHelper(0x679, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SecondPlotSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x679, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Has3DShading()
		{
			BOOL result;
			InvokeHelper(0x67a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Has3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ChartGroup properties
	public:

	};


	class CChartGroups : public COleDispatchDriver
	{
	public:
		CChartGroups(){} // Calls COleDispatchDriver default constructor
		CChartGroups(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartGroups(const CChartGroups& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartGroups methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// ChartGroups properties
	public:

	};


	class CChartObject : public COleDispatchDriver
	{
	public:
		CChartObject(){} // Calls COleDispatchDriver default constructor
		CChartObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartObject(const CChartObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartObject methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT _Copy()
		{
			VARIANT result;
			InvokeHelper(0xa31, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Activate()
		{
			VARIANT result;
			InvokeHelper(0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Chart()
		{
			LPDISPATCH result;
			InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectChartObject()
		{
			BOOL result;
			InvokeHelper(0x5f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectChartObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// ChartObject properties
	public:

	};


	class CChartObjects : public COleDispatchDriver
	{
	public:
		CChartObjects(){} // Calls COleDispatchDriver default constructor
		CChartObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartObjects(const CChartObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT _Copy()
		{
			VARIANT result;
			InvokeHelper(0xa31, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy25()
		{
			InvokeHelper(0x10019, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy27()
		{
			InvokeHelper(0x1001b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy28()
		{
			InvokeHelper(0x1001c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ProtectChartObject()
		{
			BOOL result;
			InvokeHelper(0x5f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ProtectChartObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// ChartObjects properties
	public:

	};


	class CCharts : public COleDispatchDriver
	{
	public:
		CCharts(){} // Calls COleDispatchDriver default constructor
		CCharts(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCharts(const CCharts& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Charts methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Before, VARIANT& After, VARIANT& Count)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Before, &After, &Count);
			return result;
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy7()
		{
			InvokeHelper(0x10007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Visible()
		{
			VARIANT result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Visible(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}

		// Charts properties
	public:

	};


	class CChartTitle : public COleDispatchDriver
	{
	public:
		CChartTitle(){} // Calls COleDispatchDriver default constructor
		CChartTitle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartTitle(const CChartTitle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartTitle methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_IncludeInLayout()
		{
			BOOL result;
			InvokeHelper(0xa58, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeInLayout(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa58, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ChartTitle properties
	public:

	};


	class CChartView : public COleDispatchDriver
	{
	public:
		CChartView(){} // Calls COleDispatchDriver default constructor
		CChartView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CChartView(const CChartView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ChartView methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ChartView properties
	public:

	};


	class CCheckBox : public COleDispatchDriver
	{
	public:
		CCheckBox(){} // Calls COleDispatchDriver default constructor
		CCheckBox(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCheckBox(const CCheckBox& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CheckBox methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// CheckBox properties
	public:

	};


	class CCheckBoxes : public COleDispatchDriver
	{
	public:
		CCheckBoxes(){} // Calls COleDispatchDriver default constructor
		CCheckBoxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCheckBoxes(const CCheckBoxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CheckBoxes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// CheckBoxes properties
	public:

	};


	class CColorFormat : public COleDispatchDriver
	{
	public:
		CColorFormat(){} // Calls COleDispatchDriver default constructor
		CColorFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorFormat(const CColorFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_RGB()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RGB(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SchemeColor()
		{
			long result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SchemeColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_TintAndShade()
		{
			float result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ObjectThemeColor()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ObjectThemeColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ColorFormat properties
	public:

	};


	class CColorScale : public COleDispatchDriver
	{
	public:
		CColorScale(){} // Calls COleDispatchDriver default constructor
		CColorScale(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorScale(const CColorScale& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorScale methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ColorScaleCriteria()
		{
			LPDISPATCH result;
			InvokeHelper(0xa9c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ColorScale properties
	public:

	};


	class CColorScaleCriteria : public COleDispatchDriver
	{
	public:
		CColorScaleCriteria(){} // Calls COleDispatchDriver default constructor
		CColorScaleCriteria(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorScaleCriteria(const CColorScaleCriteria& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorScaleCriteria methods
	public:
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// ColorScaleCriteria properties
	public:

	};


	class CColorScaleCriterion : public COleDispatchDriver
	{
	public:
		CColorScaleCriterion(){} // Calls COleDispatchDriver default constructor
		CColorScaleCriterion(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorScaleCriterion(const CColorScaleCriterion& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorScaleCriterion methods
	public:
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_FormatColor()
		{
			LPDISPATCH result;
			InvokeHelper(0xa9d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ColorScaleCriterion properties
	public:

	};


	class CColorStop : public COleDispatchDriver
	{
	public:
		CColorStop(){} // Calls COleDispatchDriver default constructor
		CColorStop(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorStop(const CColorStop& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorStop methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ThemeColor()
		{
			long result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Position()
		{
			double result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Position(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ColorStop properties
	public:

	};


	class CColorStops : public COleDispatchDriver
	{
	public:
		CColorStops(){} // Calls COleDispatchDriver default constructor
		CColorStops(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CColorStops(const CColorStops& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ColorStops methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(double Position)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Position);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Clear()
		{
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// ColorStops properties
	public:

	};


	class CComment : public COleDispatchDriver
	{
	public:
		CComment(){} // Calls COleDispatchDriver default constructor
		CComment(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CComment(const CComment& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Comment methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Author()
		{
			CString result;
			InvokeHelper(0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shape()
		{
			LPDISPATCH result;
			InvokeHelper(0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString Text(VARIANT& Text, VARIANT& Start, VARIANT& Overwrite)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Text, &Start, &Overwrite);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Comment properties
	public:

	};


	class CComments : public COleDispatchDriver
	{
	public:
		CComments(){} // Calls COleDispatchDriver default constructor
		CComments(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CComments(const CComments& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Comments methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Comments properties
	public:

	};


	class Ccon : public COleDispatchDriver
	{
	public:
		Ccon(){} // Calls COleDispatchDriver default constructor
		Ccon(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		Ccon(const Ccon& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Icon methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// Icon properties
	public:

	};


	class CconCriteria : public COleDispatchDriver
	{
	public:
		CconCriteria(){} // Calls COleDispatchDriver default constructor
		CconCriteria(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CconCriteria(const CconCriteria& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IconCriteria methods
	public:
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// IconCriteria properties
	public:

	};


	class CconCriterion : public COleDispatchDriver
	{
	public:
		CconCriterion(){} // Calls COleDispatchDriver default constructor
		CconCriterion(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CconCriterion(const CconCriterion& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IconCriterion methods
	public:
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Operator()
		{
			long result;
			InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Operator(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x31d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// IconCriterion properties
	public:

	};


	class CConditionValue : public COleDispatchDriver
	{
	public:
		CConditionValue(){} // Calls COleDispatchDriver default constructor
		CConditionValue(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CConditionValue(const CConditionValue& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ConditionValue methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Modify(long newtype, VARIANT& newvalue)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, newtype, &newvalue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// ConditionValue properties
	public:

	};


	class CConnections : public COleDispatchDriver
	{
	public:
		CConnections(){} // Calls COleDispatchDriver default constructor
		CConnections(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CConnections(const CConnections& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Connections methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddFromFile(LPCTSTR Filename)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa8c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, LPCTSTR Description, VARIANT& ConnectionString, VARIANT& CommandText, VARIANT& lCmdtype)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Description, &ConnectionString, &CommandText, &lCmdtype);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Connections properties
	public:

	};


	class CConnectorFormat : public COleDispatchDriver
	{
	public:
		CConnectorFormat(){} // Calls COleDispatchDriver default constructor
		CConnectorFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CConnectorFormat(const CConnectorFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ConnectorFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void BeginConnect(LPDISPATCH ConnectedShape, long ConnectionSite)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x6d6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ConnectedShape, ConnectionSite);
		}
		void BeginDisconnect()
		{
			InvokeHelper(0x6d9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void EndConnect(LPDISPATCH ConnectedShape, long ConnectionSite)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x6da, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ConnectedShape, ConnectionSite);
		}
		void EndDisconnect()
		{
			InvokeHelper(0x6db, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_BeginConnected()
		{
			long result;
			InvokeHelper(0x6dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BeginConnectedShape()
		{
			LPDISPATCH result;
			InvokeHelper(0x6dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_BeginConnectionSite()
		{
			long result;
			InvokeHelper(0x6de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_EndConnected()
		{
			long result;
			InvokeHelper(0x6df, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_EndConnectedShape()
		{
			LPDISPATCH result;
			InvokeHelper(0x6e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_EndConnectionSite()
		{
			long result;
			InvokeHelper(0x6e1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ConnectorFormat properties
	public:

	};


	class CconSet : public COleDispatchDriver
	{
	public:
		CconSet(){} // Calls COleDispatchDriver default constructor
		CconSet(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CconSet(const CconSet& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IconSet methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ID()
		{
			long result;
			InvokeHelper(0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// IconSet properties
	public:

	};


	class CconSetCondition : public COleDispatchDriver
	{
	public:
		CconSetCondition(){} // Calls COleDispatchDriver default constructor
		CconSetCondition(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CconSetCondition(const CconSetCondition& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IconSetCondition methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ReverseOrder()
		{
			BOOL result;
			InvokeHelper(0xaa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ReverseOrder(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xaa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PercentileValues()
		{
			BOOL result;
			InvokeHelper(0xaa4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PercentileValues(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xaa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowIconOnly()
		{
			BOOL result;
			InvokeHelper(0xaa5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowIconOnly(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xaa5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_IconSet()
		{
			VARIANT result;
			InvokeHelper(0xaa6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_IconSet(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_IconCriteria()
		{
			LPDISPATCH result;
			InvokeHelper(0xaa7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// IconSetCondition properties
	public:

	};


	class CconSets : public COleDispatchDriver
	{
	public:
		CconSets(){} // Calls COleDispatchDriver default constructor
		CconSets(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CconSets(const CconSets& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IconSets methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// IconSets properties
	public:

	};


	class CControlFormat : public COleDispatchDriver
	{
	public:
		CControlFormat(){} // Calls COleDispatchDriver default constructor
		CControlFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CControlFormat(const CControlFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ControlFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void AddItem(LPCTSTR Text, VARIANT& Index)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Text, &Index);
		}
		void RemoveAllItems()
		{
			InvokeHelper(0x355, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RemoveItem(long Index, VARIANT& Count)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, &Count);
		}
		long get_DropDownLines()
		{
			long result;
			InvokeHelper(0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DropDownLines(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LargeChange()
		{
			long result;
			InvokeHelper(0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LargeChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		long get_ListCount()
		{
			long result;
			InvokeHelper(0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListCount(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x351, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MultiSelect()
		{
			long result;
			InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MultiSelect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ControlFormat properties
	public:

	};


	class CCorners : public COleDispatchDriver
	{
	public:
		CCorners(){} // Calls COleDispatchDriver default constructor
		CCorners(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCorners(const CCorners& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Corners methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// Corners properties
	public:

	};


	class CCubeField : public COleDispatchDriver
	{
	public:
		CCubeField(){} // Calls COleDispatchDriver default constructor
		CCubeField(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCubeField(const CCubeField& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CubeField methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_CubeFieldType()
		{
			long result;
			InvokeHelper(0x77e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get__Caption()
		{
			CString result;
			InvokeHelper(0xa6b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TreeviewControl()
		{
			LPDISPATCH result;
			InvokeHelper(0x77f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DragToColumn()
		{
			BOOL result;
			InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToHide()
		{
			BOOL result;
			InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToHide(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToPage()
		{
			BOOL result;
			InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToPage(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToRow()
		{
			BOOL result;
			InvokeHelper(0x5e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToRow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToData()
		{
			BOOL result;
			InvokeHelper(0x734, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x734, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HiddenLevels()
		{
			long result;
			InvokeHelper(0x780, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HiddenLevels(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x780, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasMemberProperties()
		{
			BOOL result;
			InvokeHelper(0x885, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_LayoutForm()
		{
			long result;
			InvokeHelper(0x738, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LayoutForm(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x738, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PivotFields()
		{
			LPDISPATCH result;
			InvokeHelper(0x2ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _AddMemberPropertyField(LPCTSTR Property, VARIANT& PropertyOrder)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x886, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Property, &PropertyOrder);
		}
		BOOL get_EnableMultiplePageItems()
		{
			BOOL result;
			InvokeHelper(0x888, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableMultiplePageItems(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x888, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LayoutSubtotalLocation()
		{
			long result;
			InvokeHelper(0x736, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LayoutSubtotalLocation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x736, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowInFieldList()
		{
			BOOL result;
			InvokeHelper(0x889, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowInFieldList(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x889, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void AddMemberPropertyField(LPCTSTR Property, VARIANT& PropertyOrder, VARIANT& PropertyDisplayedIn)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xa6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Property, &PropertyOrder, &PropertyDisplayedIn);
		}
		BOOL get_IncludeNewItemsInFilter()
		{
			BOOL result;
			InvokeHelper(0xa1b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeNewItemsInFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CubeFieldSubType()
		{
			long result;
			InvokeHelper(0xa6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllItemsVisible()
		{
			BOOL result;
			InvokeHelper(0xa21, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void ClearManualFilter()
		{
			InvokeHelper(0xa22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CreatePivotFields()
		{
			InvokeHelper(0xa6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_CurrentPageName()
		{
			CString result;
			InvokeHelper(0x73c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CurrentPageName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x73c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsDate()
		{
			BOOL result;
			InvokeHelper(0xa70, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// CubeField properties
	public:

	};


	class CCubeFields : public COleDispatchDriver
	{
	public:
		CCubeFields(){} // Calls COleDispatchDriver default constructor
		CCubeFields(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCubeFields(const CCubeFields& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CubeFields methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddSet(LPCTSTR Name, LPCTSTR Caption)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x88a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Caption);
			return result;
		}

		// CubeFields properties
	public:

	};


	class CCustomProperties : public COleDispatchDriver
	{
	public:
		CCustomProperties(){} // Calls COleDispatchDriver default constructor
		CCustomProperties(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCustomProperties(const CCustomProperties& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CustomProperties methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, VARIANT& Value)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &Value);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// CustomProperties properties
	public:

	};


	class CCustomProperty : public COleDispatchDriver
	{
	public:
		CCustomProperty(){} // Calls COleDispatchDriver default constructor
		CCustomProperty(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCustomProperty(const CCustomProperty& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CustomProperty methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get__Default()
		{
			VARIANT result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// CustomProperty properties
	public:

	};


	class CCustomView : public COleDispatchDriver
	{
	public:
		CCustomView(){} // Calls COleDispatchDriver default constructor
		CCustomView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCustomView(const CCustomView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CustomView methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_PrintSettings()
		{
			BOOL result;
			InvokeHelper(0x629, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_RowColSettings()
		{
			BOOL result;
			InvokeHelper(0x62a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void Show()
		{
			InvokeHelper(0x1f0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// CustomView properties
	public:

	};


	class CCustomViews : public COleDispatchDriver
	{
	public:
		CCustomViews(){} // Calls COleDispatchDriver default constructor
		CCustomViews(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CCustomViews(const CCustomViews& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// CustomViews methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& ViewName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &ViewName);
			return result;
		}
		LPDISPATCH Add(LPCTSTR ViewName, VARIANT& PrintSettings, VARIANT& RowColSettings)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ViewName, &PrintSettings, &RowColSettings);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& ViewName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &ViewName);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// CustomViews properties
	public:

	};


	class CDatabar : public COleDispatchDriver
	{
	public:
		CDatabar(){} // Calls COleDispatchDriver default constructor
		CDatabar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDatabar(const CDatabar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Databar methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MinPoint()
		{
			LPDISPATCH result;
			InvokeHelper(0xa9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MaxPoint()
		{
			LPDISPATCH result;
			InvokeHelper(0xa9f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_PercentMin()
		{
			long result;
			InvokeHelper(0xaa0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PercentMin(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PercentMax()
		{
			long result;
			InvokeHelper(0xaa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PercentMax(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_BarColor()
		{
			LPDISPATCH result;
			InvokeHelper(0xaa2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowValue()
		{
			BOOL result;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowValue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Databar properties
	public:

	};


	class CDataLabel : public COleDispatchDriver
	{
	public:
		CDataLabel(){} // Calls COleDispatchDriver default constructor
		CDataLabel(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDataLabel(const CDataLabel& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DataLabel methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoText()
		{
			BOOL result;
			InvokeHelper(0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NumberFormat()
		{
			CString result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_NumberFormatLinked()
		{
			BOOL result;
			InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLinked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_NumberFormatLocal()
		{
			VARIANT result;
			InvokeHelper(0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_ShowLegendKey()
		{
			BOOL result;
			InvokeHelper(0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowLegendKey(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Type()
		{
			VARIANT result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Type(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowSeriesName()
		{
			BOOL result;
			InvokeHelper(0x7e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowSeriesName(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowCategoryName()
		{
			BOOL result;
			InvokeHelper(0x7e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowCategoryName(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowValue()
		{
			BOOL result;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowValue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowPercentage()
		{
			BOOL result;
			InvokeHelper(0x7e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowPercentage(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowBubbleSize()
		{
			BOOL result;
			InvokeHelper(0x7ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowBubbleSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Separator()
		{
			VARIANT result;
			InvokeHelper(0x7eb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Separator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x7eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DataLabel properties
	public:

	};


	class CDataLabels : public COleDispatchDriver
	{
	public:
		CDataLabels(){} // Calls COleDispatchDriver default constructor
		CDataLabels(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDataLabels(const CDataLabels& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DataLabels methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy9()
		{
			InvokeHelper(0x10009, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy10()
		{
			InvokeHelper(0x1000a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy13()
		{
			InvokeHelper(0x1000d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy16()
		{
			InvokeHelper(0x10010, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy17()
		{
			InvokeHelper(0x10011, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoText()
		{
			BOOL result;
			InvokeHelper(0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NumberFormat()
		{
			CString result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_NumberFormatLinked()
		{
			BOOL result;
			InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLinked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_NumberFormatLocal()
		{
			VARIANT result;
			InvokeHelper(0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_ShowLegendKey()
		{
			BOOL result;
			InvokeHelper(0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowLegendKey(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Type()
		{
			VARIANT result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Type(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowSeriesName()
		{
			BOOL result;
			InvokeHelper(0x7e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowSeriesName(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowCategoryName()
		{
			BOOL result;
			InvokeHelper(0x7e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowCategoryName(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowValue()
		{
			BOOL result;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowValue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowPercentage()
		{
			BOOL result;
			InvokeHelper(0x7e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowPercentage(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowBubbleSize()
		{
			BOOL result;
			InvokeHelper(0x7ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowBubbleSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Separator()
		{
			VARIANT result;
			InvokeHelper(0x7eb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Separator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x7eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DataLabels properties
	public:

	};


	class CDataTable : public COleDispatchDriver
	{
	public:
		CDataTable(){} // Calls COleDispatchDriver default constructor
		CDataTable(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDataTable(const CDataTable& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DataTable methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowLegendKey()
		{
			BOOL result;
			InvokeHelper(0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowLegendKey(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasBorderHorizontal()
		{
			BOOL result;
			InvokeHelper(0x687, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasBorderHorizontal(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x687, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasBorderVertical()
		{
			BOOL result;
			InvokeHelper(0x688, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasBorderVertical(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x688, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasBorderOutline()
		{
			BOOL result;
			InvokeHelper(0x689, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasBorderOutline(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x689, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Select()
		{
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DataTable properties
	public:

	};


	class CDefaultWebOptions : public COleDispatchDriver
	{
	public:
		CDefaultWebOptions(){} // Calls COleDispatchDriver default constructor
		CDefaultWebOptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDefaultWebOptions(const CDefaultWebOptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DefaultWebOptions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_RelyOnCSS()
		{
			BOOL result;
			InvokeHelper(0x76b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RelyOnCSS(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SaveHiddenData()
		{
			BOOL result;
			InvokeHelper(0x76c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveHiddenData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_LoadPictures()
		{
			BOOL result;
			InvokeHelper(0x76d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LoadPictures(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_OrganizeInFolder()
		{
			BOOL result;
			InvokeHelper(0x76e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_OrganizeInFolder(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UpdateLinksOnSave()
		{
			BOOL result;
			InvokeHelper(0x76f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UpdateLinksOnSave(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UseLongFileNames()
		{
			BOOL result;
			InvokeHelper(0x770, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseLongFileNames(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x770, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CheckIfOfficeIsHTMLEditor()
		{
			BOOL result;
			InvokeHelper(0x771, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CheckIfOfficeIsHTMLEditor(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x771, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DownloadComponents()
		{
			BOOL result;
			InvokeHelper(0x772, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DownloadComponents(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x772, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RelyOnVML()
		{
			BOOL result;
			InvokeHelper(0x773, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RelyOnVML(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x773, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AllowPNG()
		{
			BOOL result;
			InvokeHelper(0x774, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AllowPNG(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x774, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ScreenSize()
		{
			long result;
			InvokeHelper(0x775, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScreenSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x775, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PixelsPerInch()
		{
			long result;
			InvokeHelper(0x776, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PixelsPerInch(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x776, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LocationOfComponents()
		{
			CString result;
			InvokeHelper(0x777, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LocationOfComponents(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x777, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Encoding()
		{
			long result;
			InvokeHelper(0x71e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Encoding(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x71e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AlwaysSaveInDefaultEncoding()
		{
			BOOL result;
			InvokeHelper(0x778, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlwaysSaveInDefaultEncoding(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x778, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Fonts()
		{
			LPDISPATCH result;
			InvokeHelper(0x779, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_FolderSuffix()
		{
			CString result;
			InvokeHelper(0x77a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_TargetBrowser()
		{
			long result;
			InvokeHelper(0x883, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TargetBrowser(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x883, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SaveNewWebPagesAsWebArchives()
		{
			BOOL result;
			InvokeHelper(0x884, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveNewWebPagesAsWebArchives(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x884, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// DefaultWebOptions properties
	public:

	};


	class CDiagram : public COleDispatchDriver
	{
	public:
		CDiagram(){} // Calls COleDispatchDriver default constructor
		CDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDiagram(const CDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Diagram methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Nodes()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_AutoLayout()
		{
			long result;
			InvokeHelper(0x8c3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoLayout(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Reverse()
		{
			long result;
			InvokeHelper(0x8c4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Reverse(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutoFormat()
		{
			long result;
			InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoFormat(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x72, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Convert(long Type)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x416, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type);
		}
		void FitText()
		{
			InvokeHelper(0x900, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Diagram properties
	public:

	};


	class CDiagramNode : public COleDispatchDriver
	{
	public:
		CDiagramNode(){} // Calls COleDispatchDriver default constructor
		CDiagramNode(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDiagramNode(const CDiagramNode& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DiagramNode methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddNode(long pos, long nodeType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, pos, nodeType);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void MoveNode(LPDISPATCH pTargetNode, long pos)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pTargetNode, pos);
		}
		void ReplaceNode(LPDISPATCH pTargetNode)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pTargetNode);
		}
		void SwapNode(LPDISPATCH pTargetNode, BOOL swapChildren)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BOOL ;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pTargetNode, swapChildren);
		}
		LPDISPATCH CloneNode(BOOL copyChildren, LPDISPATCH pTargetNode, long pos)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BOOL VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0xf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, copyChildren, pTargetNode, pos);
			return result;
		}
		void TransferChildren(LPDISPATCH pReceivingNode)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pReceivingNode);
		}
		LPDISPATCH NextNode()
		{
			LPDISPATCH result;
			InvokeHelper(0x11, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH PrevNode()
		{
			LPDISPATCH result;
			InvokeHelper(0x12, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Children()
		{
			LPDISPATCH result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shape()
		{
			LPDISPATCH result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Root()
		{
			LPDISPATCH result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Diagram()
		{
			LPDISPATCH result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Layout()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Layout(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TextShape()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DiagramNode properties
	public:

	};

	class CDiagramNodeChildren : public COleDispatchDriver
	{
	public:
		CDiagramNodeChildren(){} // Calls COleDispatchDriver default constructor
		CDiagramNodeChildren(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDiagramNodeChildren(const CDiagramNodeChildren& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DiagramNodeChildren methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH AddNode(VARIANT& Index, long nodeType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index, nodeType);
			return result;
		}
		void SelectAll()
		{
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_FirstChild()
		{
			LPDISPATCH result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LastChild()
		{
			LPDISPATCH result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DiagramNodeChildren properties
	public:

	};

	class CDiagramNodes : public COleDispatchDriver
	{
	public:
		CDiagramNodes(){} // Calls COleDispatchDriver default constructor
		CDiagramNodes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDiagramNodes(const CDiagramNodes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DiagramNodes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void SelectAll()
		{
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// DiagramNodes properties
	public:

	};

	class CDialog0 : public COleDispatchDriver
	{
	public:
		CDialog0(){} // Calls COleDispatchDriver default constructor
		CDialog0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialog0(const CDialog0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Dialog methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL Show(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}

		// Dialog properties
	public:

	};


	class CDialogFrame : public COleDispatchDriver
	{
	public:
		CDialogFrame(){} // Calls COleDispatchDriver default constructor
		CDialogFrame(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialogFrame(const CDialogFrame& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DialogFrame methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy4()
		{
			InvokeHelper(0x10004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy5()
		{
			InvokeHelper(0x10005, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		void _Dummy7()
		{
			InvokeHelper(0x10007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy8()
		{
			InvokeHelper(0x10008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy9()
		{
			InvokeHelper(0x10009, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy10()
		{
			InvokeHelper(0x1000a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy17()
		{
			InvokeHelper(0x10011, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy18()
		{
			InvokeHelper(0x10012, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		void _Dummy20()
		{
			InvokeHelper(0x10014, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy23()
		{
			InvokeHelper(0x10017, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy25()
		{
			InvokeHelper(0x10019, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// DialogFrame properties
	public:

	};

	class CDialogs : public COleDispatchDriver
	{
	public:
		CDialogs(){} // Calls COleDispatchDriver default constructor
		CDialogs(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialogs(const CDialogs& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Dialogs methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Dialogs properties
	public:

	};

	class CDialogSheet : public COleDispatchDriver
	{
	public:
		CDialogSheet(){} // Calls COleDispatchDriver default constructor
		CDialogSheet(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialogSheet(const CDialogSheet& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DialogSheet methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_CodeName()
		{
			CString result;
			InvokeHelper(0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__CodeName()
		{
			CString result;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__CodeName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnDoubleClick()
		{
			CString result;
			InvokeHelper(0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnDoubleClick(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PageSetup()
		{
			LPDISPATCH result;
			InvokeHelper(0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void _Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		BOOL get_ProtectContents()
		{
			BOOL result;
			InvokeHelper(0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectDrawingObjects()
		{
			BOOL result;
			InvokeHelper(0x125, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectionMode()
		{
			BOOL result;
			InvokeHelper(0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectScenarios()
		{
			BOOL result;
			InvokeHelper(0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Shapes()
		{
			LPDISPATCH result;
			InvokeHelper(0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy29()
		{
			InvokeHelper(0x1001d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Arcs(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2f8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy31()
		{
			InvokeHelper(0x1001f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy32()
		{
			InvokeHelper(0x10020, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Buttons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy34()
		{
			InvokeHelper(0x10022, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_EnableCalculation()
		{
			BOOL result;
			InvokeHelper(0x590, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableCalculation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x590, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH ChartObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x424, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH CheckBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x338, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
		}
		void _Dummy40()
		{
			InvokeHelper(0x10028, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy41()
		{
			InvokeHelper(0x10029, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy42()
		{
			InvokeHelper(0x1002a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy43()
		{
			InvokeHelper(0x1002b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy44()
		{
			InvokeHelper(0x1002c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy45()
		{
			InvokeHelper(0x1002d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_DisplayAutomaticPageBreaks()
		{
			BOOL result;
			InvokeHelper(0x283, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayAutomaticPageBreaks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x283, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Drawings(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x304, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DrawingObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x58, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DropDowns(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x344, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_EnableAutoFilter()
		{
			BOOL result;
			InvokeHelper(0x484, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableAutoFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x484, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EnableSelection()
		{
			long result;
			InvokeHelper(0x591, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EnableSelection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x591, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableOutlining()
		{
			BOOL result;
			InvokeHelper(0x485, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableOutlining(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x485, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnablePivotTable()
		{
			BOOL result;
			InvokeHelper(0x486, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnablePivotTable(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x486, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT _Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		void _Dummy56()
		{
			InvokeHelper(0x10038, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ResetAllPageBreaks()
		{
			InvokeHelper(0x592, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH GroupBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x342, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH GroupObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x459, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Labels(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x349, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Lines(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH ListBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x340, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Names()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH OLEObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x31f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy65()
		{
			InvokeHelper(0x10041, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy66()
		{
			InvokeHelper(0x10042, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy67()
		{
			InvokeHelper(0x10043, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH OptionButtons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy69()
		{
			InvokeHelper(0x10045, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Ovals(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x321, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Paste(VARIANT& Destination, VARIANT& Link)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Destination, &Link);
		}
		void _PasteSpecial(VARIANT& Format, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel);
		}
		LPDISPATCH Pictures(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x303, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy74()
		{
			InvokeHelper(0x1004a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy75()
		{
			InvokeHelper(0x1004b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy76()
		{
			InvokeHelper(0x1004c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Rectangles(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x306, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy78()
		{
			InvokeHelper(0x1004e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy79()
		{
			InvokeHelper(0x1004f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ScrollArea()
		{
			CString result;
			InvokeHelper(0x599, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ScrollArea(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x599, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH ScrollBars(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy82()
		{
			InvokeHelper(0x10052, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy83()
		{
			InvokeHelper(0x10053, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Spinners(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x346, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy85()
		{
			InvokeHelper(0x10055, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy86()
		{
			InvokeHelper(0x10056, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH TextBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x309, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy88()
		{
			InvokeHelper(0x10058, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy89()
		{
			InvokeHelper(0x10059, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy90()
		{
			InvokeHelper(0x1005a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_QueryTables()
		{
			LPDISPATCH result;
			InvokeHelper(0x59a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayPageBreaks()
		{
			BOOL result;
			InvokeHelper(0x59b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayPageBreaks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x59b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Comments()
		{
			LPDISPATCH result;
			InvokeHelper(0x23f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Hyperlinks()
		{
			LPDISPATCH result;
			InvokeHelper(0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ClearCircles()
		{
			InvokeHelper(0x59c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CircleInvalid()
		{
			InvokeHelper(0x59d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get__DisplayRightToLeft()
		{
			long result;
			InvokeHelper(0x288, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__DisplayRightToLeft(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AutoFilter()
		{
			LPDISPATCH result;
			InvokeHelper(0x319, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayRightToLeft()
		{
			BOOL result;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRightToLeft(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Scripts()
		{
			LPDISPATCH result;
			InvokeHelper(0x718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void _CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang, VARIANT& IgnoreFinalYaa, VARIANT& SpellScript)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x719, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang, &IgnoreFinalYaa, &SpellScript);
		}
		LPDISPATCH get_Tab()
		{
			LPDISPATCH result;
			InvokeHelper(0x411, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MailEnvelope()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout, VARIANT& Local)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x785, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout, &Local);
		}
		LPDISPATCH get_CustomProperties()
		{
			LPDISPATCH result;
			InvokeHelper(0x7ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SmartTags()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Protection()
		{
			LPDISPATCH result;
			InvokeHelper(0xb0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PasteSpecial(VARIANT& Format, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel, VARIANT& NoHTMLFormatting)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x788, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &NoHTMLFormatting);
		}
		void Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly, VARIANT& AllowFormattingCells, VARIANT& AllowFormattingColumns, VARIANT& AllowFormattingRows, VARIANT& AllowInsertingColumns, VARIANT& AllowInsertingRows, VARIANT& AllowInsertingHyperlinks, VARIANT& AllowDeletingColumns, VARIANT& AllowDeletingRows, VARIANT& AllowSorting, VARIANT& AllowFiltering, VARIANT& AllowUsingPivotTables)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly, &AllowFormattingCells, &AllowFormattingColumns, &AllowFormattingRows, &AllowInsertingColumns, &AllowInsertingRows, &AllowInsertingHyperlinks, &AllowDeletingColumns, &AllowDeletingRows, &AllowSorting, &AllowFiltering, &AllowUsingPivotTables);
		}
		void _Dummy113()
		{
			InvokeHelper(0x10071, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy114()
		{
			InvokeHelper(0x10072, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy115()
		{
			InvokeHelper(0x10073, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		BOOL get_EnableFormatConditionsCalculation()
		{
			BOOL result;
			InvokeHelper(0x9cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableFormatConditionsCalculation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Sort()
		{
			LPDISPATCH result;
			InvokeHelper(0x370, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ExportAsFixedFormat(long Type, VARIANT& Filename, VARIANT& Quality, VARIANT& IncludeDocProperties, VARIANT& IgnorePrintAreas, VARIANT& From, VARIANT& To, VARIANT& OpenAfterPublish, VARIANT& FixedFormatExtClassPtr)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Filename, &Quality, &IncludeDocProperties, &IgnorePrintAreas, &From, &To, &OpenAfterPublish, &FixedFormatExtClassPtr);
		}
		VARIANT get_DefaultButton()
		{
			VARIANT result;
			InvokeHelper(0x359, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_DefaultButton(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_DialogFrame()
		{
			LPDISPATCH result;
			InvokeHelper(0x347, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH EditBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT get_Focus()
		{
			VARIANT result;
			InvokeHelper(0x32e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Focus(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x32e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL Hide(VARIANT& Cancel)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x32d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Cancel);
			return result;
		}
		BOOL Show()
		{
			BOOL result;
			InvokeHelper(0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// DialogSheet properties
	public:

	};


	class CDialogSheets : public COleDispatchDriver
	{
	public:
		CDialogSheets(){} // Calls COleDispatchDriver default constructor
		CDialogSheets(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialogSheets(const CDialogSheets& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DialogSheets methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Before, VARIANT& After, VARIANT& Count)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Before, &After, &Count);
			return result;
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy7()
		{
			InvokeHelper(0x10007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Visible()
		{
			VARIANT result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Visible(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}

		// DialogSheets properties
	public:

	};

	class CDialogSheetView : public COleDispatchDriver
	{
	public:
		CDialogSheetView(){} // Calls COleDispatchDriver default constructor
		CDialogSheetView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDialogSheetView(const CDialogSheetView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DialogSheetView methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DialogSheetView properties
	public:

	};

	class CDisplayUnitLabel : public COleDispatchDriver
	{
	public:
		CDisplayUnitLabel(){} // Calls COleDispatchDriver default constructor
		CDisplayUnitLabel(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDisplayUnitLabel(const CDisplayUnitLabel& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DisplayUnitLabel methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy21()
		{
			InvokeHelper(0x10015, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DisplayUnitLabel properties
	public:

	};


	class CDocEvents : public COleDispatchDriver
	{
	public:
		CDocEvents(){} // Calls COleDispatchDriver default constructor
		CDocEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDocEvents(const CDocEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DocEvents methods
	public:
		void SelectionChange(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x607, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}
		void BeforeDoubleClick(LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x601, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target, Cancel);
		}
		void BeforeRightClick(LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target, Cancel);
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Deactivate()
		{
			InvokeHelper(0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Calculate()
		{
			InvokeHelper(0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Change(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x609, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}
		void FollowHyperlink(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x5be, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}
		void PivotTableUpdate(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x86c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}

		// DocEvents properties
	public:

	};


	class CDownBars : public COleDispatchDriver
	{
	public:
		CDownBars(){} // Calls COleDispatchDriver default constructor
		CDownBars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDownBars(const CDownBars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DownBars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DownBars properties
	public:

	};


	class CDrawing : public COleDispatchDriver
	{
	public:
		CDrawing(){} // Calls COleDispatchDriver default constructor
		CDrawing(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDrawing(const CDrawing& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Drawing methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT AddVertex(double Left, double Top)
		{
			VARIANT result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x259, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Left, Top);
			return result;
		}
		VARIANT Reshape(long Vertex, BOOL Insert, VARIANT& Left, VARIANT& Top)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_BOOL VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Vertex, Insert, &Left, &Top);
			return result;
		}
		VARIANT get_Vertices(VARIANT& Index1, VARIANT& Index2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index1, &Index2);
			return result;
		}

		// Drawing properties
	public:

	};


	class CDrawingObjects : public COleDispatchDriver
	{
	public:
		CDrawingObjects(){} // Calls COleDispatchDriver default constructor
		CDrawingObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDrawingObjects(const CDrawingObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DrawingObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy28()
		{
			InvokeHelper(0x1001c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT AddItem(VARIANT& Text, VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Text, &Index);
			return result;
		}
		VARIANT get_ArrowHeadLength()
		{
			VARIANT result;
			InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadLength(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadStyle()
		{
			VARIANT result;
			InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadWidth()
		{
			VARIANT result;
			InvokeHelper(0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_CancelButton()
		{
			BOOL result;
			InvokeHelper(0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CancelButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DefaultButton()
		{
			BOOL result;
			InvokeHelper(0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DefaultButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DismissButton()
		{
			BOOL result;
			InvokeHelper(0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DismissButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayVerticalScrollBar()
		{
			BOOL result;
			InvokeHelper(0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayVerticalScrollBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DropDownLines()
		{
			long result;
			InvokeHelper(0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DropDownLines(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy47()
		{
			InvokeHelper(0x1002f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_HelpButton()
		{
			BOOL result;
			InvokeHelper(0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HelpButton(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_InputType()
		{
			long result;
			InvokeHelper(0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_InputType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_LargeChange()
		{
			long result;
			InvokeHelper(0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LargeChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy54()
		{
			InvokeHelper(0x10036, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void _Dummy56()
		{
			InvokeHelper(0x10038, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MultiLine()
		{
			BOOL result;
			InvokeHelper(0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MultiLine(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MultiSelect()
		{
			BOOL result;
			InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MultiSelect(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT RemoveAllItems()
		{
			VARIANT result;
			InvokeHelper(0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT RemoveItem(long Index, VARIANT& Count)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Index, &Count);
			return result;
		}
		VARIANT Reshape(long Vertex, VARIANT& Insert, VARIANT& Left, VARIANT& Top)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Vertex, &Insert, &Left, &Top);
			return result;
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Selected(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Ungroup()
		{
			LPDISPATCH result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT Vertices(VARIANT& Index1, VARIANT& Index2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x26d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index1, &Index2);
			return result;
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT LinkCombo(VARIANT& Link)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x358, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Link);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// DrawingObjects properties
	public:

	};

	class CDrawings : public COleDispatchDriver
	{
	public:
		CDrawings(){} // Calls COleDispatchDriver default constructor
		CDrawings(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDrawings(const CDrawings& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Drawings methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy44()
		{
			InvokeHelper(0x1002c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT Reshape(long Vertex, BOOL Insert, VARIANT& Left, VARIANT& Top)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_BOOL VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Vertex, Insert, &Left, &Top);
			return result;
		}
		void _Dummy46()
		{
			InvokeHelper(0x1002e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Add(double X1, double Y1, double X2, double Y2, BOOL Closed)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, X1, Y1, X2, Y2, Closed);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Drawings properties
	public:

	};

	class CDropDown : public COleDispatchDriver
	{
	public:
		CDropDown(){} // Calls COleDispatchDriver default constructor
		CDropDown(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDropDown(const CDropDown& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DropDown methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddItem(VARIANT& Text, VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Text, &Index);
			return result;
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_LinkedObject()
		{
			VARIANT result;
			InvokeHelper(0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_List(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_ListCount()
		{
			long result;
			InvokeHelper(0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT RemoveAllItems()
		{
			VARIANT result;
			InvokeHelper(0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT RemoveItem(long Index, VARIANT& Count)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Index, &Count);
			return result;
		}
		VARIANT get_Selected(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Selected(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		long get_DropDownLines()
		{
			long result;
			InvokeHelper(0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DropDownLines(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// DropDown properties
	public:

	};

	class CDropDowns : public COleDispatchDriver
	{
	public:
		CDropDowns(){} // Calls COleDispatchDriver default constructor
		CDropDowns(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDropDowns(const CDropDowns& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DropDowns methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddItem(VARIANT& Text, VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Text, &Index);
			return result;
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy31()
		{
			InvokeHelper(0x1001f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_List(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		void _Dummy33()
		{
			InvokeHelper(0x10021, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT RemoveAllItems()
		{
			VARIANT result;
			InvokeHelper(0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT RemoveItem(long Index, VARIANT& Count)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Index, &Count);
			return result;
		}
		VARIANT get_Selected(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Selected(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		long get_DropDownLines()
		{
			long result;
			InvokeHelper(0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DropDownLines(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height, VARIANT& Editable)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height, &Editable);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// DropDowns properties
	public:

	};

	class CDropLines : public COleDispatchDriver
	{
	public:
		CDropLines(){} // Calls COleDispatchDriver default constructor
		CDropLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CDropLines(const CDropLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// DropLines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// DropLines properties
	public:

	};

	class CEditBox : public COleDispatchDriver
	{
	public:
		CEditBox(){} // Calls COleDispatchDriver default constructor
		CEditBox(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CEditBox(const CEditBox& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// EditBox methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayVerticalScrollBar()
		{
			BOOL result;
			InvokeHelper(0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayVerticalScrollBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_InputType()
		{
			long result;
			InvokeHelper(0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_InputType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedObject()
		{
			CString result;
			InvokeHelper(0x35e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_MultiLine()
		{
			BOOL result;
			InvokeHelper(0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MultiLine(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PasswordEdit()
		{
			BOOL result;
			InvokeHelper(0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PasswordEdit(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// EditBox properties
	public:

	};

	class CEditBoxes : public COleDispatchDriver
	{
	public:
		CEditBoxes(){} // Calls COleDispatchDriver default constructor
		CEditBoxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CEditBoxes(const CEditBoxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// EditBoxes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayVerticalScrollBar()
		{
			BOOL result;
			InvokeHelper(0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayVerticalScrollBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_InputType()
		{
			long result;
			InvokeHelper(0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_InputType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy34()
		{
			InvokeHelper(0x10022, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_MultiLine()
		{
			BOOL result;
			InvokeHelper(0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MultiLine(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PasswordEdit()
		{
			BOOL result;
			InvokeHelper(0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PasswordEdit(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Item(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// EditBoxes properties
	public:

	};

	class CError : public COleDispatchDriver
	{
	public:
		CError(){} // Calls COleDispatchDriver default constructor
		CError(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CError(const CError& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Error methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Value()
		{
			BOOL result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_Ignore()
		{
			BOOL result;
			InvokeHelper(0x8a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Ignore(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Error properties
	public:

	};

	class CErrorBars : public COleDispatchDriver
	{
	public:
		CErrorBars(){} // Calls COleDispatchDriver default constructor
		CErrorBars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CErrorBars(const CErrorBars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ErrorBars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_EndStyle()
		{
			long result;
			InvokeHelper(0x464, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EndStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x464, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ErrorBars properties
	public:

	};

	class CErrorCheckingOptions : public COleDispatchDriver
	{
	public:
		CErrorCheckingOptions(){} // Calls COleDispatchDriver default constructor
		CErrorCheckingOptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CErrorCheckingOptions(const CErrorCheckingOptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ErrorCheckingOptions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BackgroundChecking()
		{
			BOOL result;
			InvokeHelper(0x899, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundChecking(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x899, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_IndicatorColorIndex()
		{
			long result;
			InvokeHelper(0x89a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_IndicatorColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x89a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EvaluateToError()
		{
			BOOL result;
			InvokeHelper(0x89b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EvaluateToError(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x89b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextDate()
		{
			BOOL result;
			InvokeHelper(0x89c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextDate(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x89c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_NumberAsText()
		{
			BOOL result;
			InvokeHelper(0x89d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_NumberAsText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x89d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_InconsistentFormula()
		{
			BOOL result;
			InvokeHelper(0x89e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InconsistentFormula(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x89e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_OmittedCells()
		{
			BOOL result;
			InvokeHelper(0x89f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_OmittedCells(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x89f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UnlockedFormulaCells()
		{
			BOOL result;
			InvokeHelper(0x8a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UnlockedFormulaCells(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EmptyCellReferences()
		{
			BOOL result;
			InvokeHelper(0x8a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EmptyCellReferences(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ListDataValidation()
		{
			BOOL result;
			InvokeHelper(0x8f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ListDataValidation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_InconsistentTableFormula()
		{
			BOOL result;
			InvokeHelper(0xa73, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InconsistentTableFormula(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa73, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ErrorCheckingOptions properties
	public:

	};

	class CErrors : public COleDispatchDriver
	{
	public:
		CErrors(){} // Calls COleDispatchDriver default constructor
		CErrors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CErrors(const CErrors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Errors methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// Errors properties
	public:

	};

	class CFileExportConverter : public COleDispatchDriver
	{
	public:
		CFileExportConverter(){} // Calls COleDispatchDriver default constructor
		CFileExportConverter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFileExportConverter(const CFileExportConverter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FileExportConverter methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Extensions()
		{
			CString result;
			InvokeHelper(0xad1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Description()
		{
			CString result;
			InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_FileFormat()
		{
			long result;
			InvokeHelper(0x120, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// FileExportConverter properties
	public:

	};


	class CFileExportConverters : public COleDispatchDriver
	{
	public:
		CFileExportConverters(){} // Calls COleDispatchDriver default constructor
		CFileExportConverters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFileExportConverters(const CFileExportConverters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FileExportConverters methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// FileExportConverters properties
	public:

	};


	class CFillFormat : public COleDispatchDriver
	{
	public:
		CFillFormat(){} // Calls COleDispatchDriver default constructor
		CFillFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFillFormat(const CFillFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FillFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Background()
		{
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void OneColorGradient(long Style, long Variant, float Degree)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant, Degree);
		}
		void Patterned(long Pattern)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Pattern);
		}
		void PresetGradient(long Style, long Variant, long PresetGradientType)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant, PresetGradientType);
		}
		void PresetTextured(long PresetTexture)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PresetTexture);
		}
		void Solid()
		{
			InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void TwoColorGradient(long Style, long Variant)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Style, Variant);
		}
		void UserPicture(LPCTSTR PictureFile)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PictureFile);
		}
		void UserTextured(LPCTSTR TextureFile)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TextureFile);
		}
		LPDISPATCH get_BackColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void put_BackColor(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ForeColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void put_ForeColor(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_GradientColorType()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_GradientDegree()
		{
			float result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		long get_GradientStyle()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_GradientVariant()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Pattern()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_PresetGradientType()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_PresetTexture()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_TextureName()
		{
			CString result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_TextureType()
		{
			long result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_Transparency()
		{
			float result;
			InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Transparency(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_GradientStops()
		{
			LPDISPATCH result;
			InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_TextureOffsetX()
		{
			float result;
			InvokeHelper(0x73, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_TextureOffsetX(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x73, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_TextureOffsetY()
		{
			float result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_TextureOffsetY(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x74, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextureAlignment()
		{
			long result;
			InvokeHelper(0x75, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextureAlignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x75, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_TextureHorizontalScale()
		{
			float result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_TextureHorizontalScale(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x76, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_TextureVerticalScale()
		{
			float result;
			InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_TextureVerticalScale(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextureTile()
		{
			long result;
			InvokeHelper(0x78, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextureTile(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RotateWithObject()
		{
			long result;
			InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RotateWithObject(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x79, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// FillFormat properties
	public:

	};


	class CFilter : public COleDispatchDriver
	{
	public:
		CFilter(){} // Calls COleDispatchDriver default constructor
		CFilter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFilter(const CFilter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Filter methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_On()
		{
			BOOL result;
			InvokeHelper(0x652, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Criteria1()
		{
			VARIANT result;
			InvokeHelper(0x31c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get__Operator()
		{
			long result;
			InvokeHelper(0xa51, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Criteria2()
		{
			VARIANT result;
			InvokeHelper(0x31e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Operator()
		{
			long result;
			InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Operator(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x31d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// Filter properties
	public:

	};


	class CFilters : public COleDispatchDriver
	{
	public:
		CFilters(){} // Calls COleDispatchDriver default constructor
		CFilters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFilters(const CFilters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Filters methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Filters properties
	public:

	};


	class CFloor : public COleDispatchDriver
	{
	public:
		CFloor(){} // Calls COleDispatchDriver default constructor
		CFloor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFloor(const CFloor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Floor methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_PictureType()
		{
			VARIANT result;
			InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PictureType(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void Paste()
		{
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Thickness()
		{
			long result;
			InvokeHelper(0xa5c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Thickness(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Floor properties
	public:

	};



	class CFontEx : public COleDispatchDriver
	{
	public:
		CFontEx(){} // Calls COleDispatchDriver default constructor
		CFontEx(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFontEx(const CFontEx& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Font methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Background()
		{
			VARIANT result;
			InvokeHelper(0xb4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Background(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Bold()
		{
			VARIANT result;
			InvokeHelper(0x60, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Bold(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x60, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ColorIndex()
		{
			VARIANT result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FontStyle()
		{
			VARIANT result;
			InvokeHelper(0xb1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FontStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Italic()
		{
			VARIANT result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Italic(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Name()
		{
			VARIANT result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Name(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_OutlineFont()
		{
			VARIANT result;
			InvokeHelper(0xdd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_OutlineFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Shadow()
		{
			VARIANT result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Size()
		{
			VARIANT result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Size(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Strikethrough()
		{
			VARIANT result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Strikethrough(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Subscript()
		{
			VARIANT result;
			InvokeHelper(0xb3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Subscript(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Superscript()
		{
			VARIANT result;
			InvokeHelper(0xb2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Superscript(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Underline()
		{
			VARIANT result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Underline(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ThemeColor()
		{
			VARIANT result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ThemeFont()
		{
			long result;
			InvokeHelper(0x93f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThemeFont(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x93f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Font properties
	public:

	};


	class CFormatColor : public COleDispatchDriver
	{
	public:
		CFormatColor(){} // Calls COleDispatchDriver default constructor
		CFormatColor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFormatColor(const CFormatColor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FormatColor methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ColorIndex()
		{
			long result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_ThemeColor()
		{
			VARIANT result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// FormatColor properties
	public:

	};


	class CFormatCondition : public COleDispatchDriver
	{
	public:
		CFormatCondition(){} // Calls COleDispatchDriver default constructor
		CFormatCondition(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFormatCondition(const CFormatCondition& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FormatCondition methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Modify(long Type, VARIANT& Operator, VARIANT& Formula1, VARIANT& Formula2)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xa3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Operator, &Formula1, &Formula2);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Operator()
		{
			long result;
			InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Formula1()
		{
			CString result;
			InvokeHelper(0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Formula2()
		{
			CString result;
			InvokeHelper(0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Modify(long Type, VARIANT& Operator, VARIANT& Formula1, VARIANT& Formula2, VARIANT& String, VARIANT& Operator2)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Operator, &Formula1, &Formula2, &String, &Operator2);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextOperator()
		{
			long result;
			InvokeHelper(0xa35, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextOperator(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa35, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DateOperator()
		{
			long result;
			InvokeHelper(0xa36, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DateOperator(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_NumberFormat()
		{
			VARIANT result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_StopIfTrue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// FormatCondition properties
	public:

	};


	class CFormatConditions : public COleDispatchDriver
	{
	public:
		CFormatConditions(){} // Calls COleDispatchDriver default constructor
		CFormatConditions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFormatConditions(const CFormatConditions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FormatConditions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Add(long Type, VARIANT& Operator, VARIANT& Formula1, VARIANT& Formula2, VARIANT& String, VARIANT& TextOperator, VARIANT& DateOperator, VARIANT& ScopeType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, &Operator, &Formula1, &Formula2, &String, &TextOperator, &DateOperator, &ScopeType);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH AddColorScale(long ColorScaleType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa38, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ColorScaleType);
			return result;
		}
		LPDISPATCH AddDatabar()
		{
			LPDISPATCH result;
			InvokeHelper(0xa3a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddIconSetCondition()
		{
			LPDISPATCH result;
			InvokeHelper(0xa3b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddTop10()
		{
			LPDISPATCH result;
			InvokeHelper(0xa3c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddAboveAverage()
		{
			LPDISPATCH result;
			InvokeHelper(0xa3d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddUniqueValues()
		{
			LPDISPATCH result;
			InvokeHelper(0xa3e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// FormatConditions properties
	public:

	};


	class CFreeformBuilder : public COleDispatchDriver
	{
	public:
		CFreeformBuilder(){} // Calls COleDispatchDriver default constructor
		CFreeformBuilder(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CFreeformBuilder(const CFreeformBuilder& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// FreeformBuilder methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void AddNodes(long SegmentType, long EditingType, float X1, float Y1, VARIANT& X2, VARIANT& Y2, VARIANT& X3, VARIANT& Y3)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6e2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SegmentType, EditingType, X1, Y1, &X2, &Y2, &X3, &Y3);
		}
		LPDISPATCH ConvertToShape()
		{
			LPDISPATCH result;
			InvokeHelper(0x6e6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// FreeformBuilder properties
	public:

	};


	class CGlobal : public COleDispatchDriver
	{
	public:
		CGlobal(){} // Calls COleDispatchDriver default constructor
		CGlobal(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGlobal(const CGlobal& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _Global methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x131, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveChart()
		{
			LPDISPATCH result;
			InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveDialog()
		{
			LPDISPATCH result;
			InvokeHelper(0x32f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveMenuBar()
		{
			LPDISPATCH result;
			InvokeHelper(0x2f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_ActivePrinter()
		{
			CString result;
			InvokeHelper(0x132, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ActivePrinter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x132, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ActiveSheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveWindow()
		{
			LPDISPATCH result;
			InvokeHelper(0x2f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveWorkbook()
		{
			LPDISPATCH result;
			InvokeHelper(0x134, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AddIns()
		{
			LPDISPATCH result;
			InvokeHelper(0x225, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Assistant()
		{
			LPDISPATCH result;
			InvokeHelper(0x59e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Calculate()
		{
			InvokeHelper(0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Cells()
		{
			LPDISPATCH result;
			InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Charts()
		{
			LPDISPATCH result;
			InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Columns()
		{
			LPDISPATCH result;
			InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CommandBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x59f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DDEAppReturnCode()
		{
			long result;
			InvokeHelper(0x14c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void DDEExecute(long Channel, LPCTSTR String)
		{
			static BYTE parms[] = VTS_I4 VTS_BSTR ;
			InvokeHelper(0x14d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel, String);
		}
		long DDEInitiate(LPCTSTR App, LPCTSTR Topic)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR ;
			InvokeHelper(0x14e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, App, Topic);
			return result;
		}
		void DDEPoke(long Channel, VARIANT& Item, VARIANT& Data)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x14f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel, &Item, &Data);
		}
		VARIANT DDERequest(long Channel, LPCTSTR Item)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_BSTR ;
			InvokeHelper(0x150, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Channel, Item);
			return result;
		}
		void DDETerminate(long Channel)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x151, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Channel);
		}
		LPDISPATCH get_DialogSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x2fc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT _Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT ExecuteExcel4Macro(LPCTSTR String)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x15e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, String);
			return result;
		}
		LPDISPATCH Intersect(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2fe, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_MenuBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x24d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Modules()
		{
			LPDISPATCH result;
			InvokeHelper(0x246, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Names()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Cell1, VARIANT& Cell2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Cell1, &Cell2);
			return result;
		}
		LPDISPATCH get_Rows()
		{
			LPDISPATCH result;
			InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Run(VARIANT& Macro, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Macro, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		VARIANT _Run2(VARIANT& Macro, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x326, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Macro, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_Selection()
		{
			LPDISPATCH result;
			InvokeHelper(0x93, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SendKeys(VARIANT& Keys, VARIANT& Wait)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x17f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Keys, &Wait);
		}
		LPDISPATCH get_Sheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShortcutMenus(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x308, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get_ThisWorkbook()
		{
			LPDISPATCH result;
			InvokeHelper(0x30a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Toolbars()
		{
			LPDISPATCH result;
			InvokeHelper(0x228, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Union(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x30b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		LPDISPATCH get_Windows()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Workbooks()
		{
			LPDISPATCH result;
			InvokeHelper(0x23c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_WorksheetFunction()
		{
			LPDISPATCH result;
			InvokeHelper(0x5a0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Worksheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4IntlMacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x245, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4MacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x243, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// _Global properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	class CGraphic : public COleDispatchDriver
	{
	public:
		CGraphic(){} // Calls COleDispatchDriver default constructor
		CGraphic(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGraphic(const CGraphic& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Graphic methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Brightness()
		{
			float result;
			InvokeHelper(0x892, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Brightness(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x892, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ColorType()
		{
			long result;
			InvokeHelper(0x893, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ColorType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x893, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Contrast()
		{
			float result;
			InvokeHelper(0x894, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Contrast(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x894, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropBottom()
		{
			float result;
			InvokeHelper(0x895, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropBottom(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x895, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropLeft()
		{
			float result;
			InvokeHelper(0x896, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropLeft(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x896, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropRight()
		{
			float result;
			InvokeHelper(0x897, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropRight(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x897, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropTop()
		{
			float result;
			InvokeHelper(0x898, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropTop(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x898, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Filename()
		{
			CString result;
			InvokeHelper(0x587, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Filename(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x587, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Height()
		{
			float result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Height(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LockAspectRatio()
		{
			long result;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LockAspectRatio(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Width()
		{
			float result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Width(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Graphic properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	class CGridlines : public COleDispatchDriver
	{
	public:
		CGridlines(){} // Calls COleDispatchDriver default constructor
		CGridlines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGridlines(const CGridlines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Gridlines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Gridlines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	class CGroupBox : public COleDispatchDriver
	{
	public:
		CGroupBox(){} // Calls COleDispatchDriver default constructor
		CGroupBox(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGroupBox(const CGroupBox& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// GroupBox methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// GroupBox properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	class CGroupBoxes : public COleDispatchDriver
	{
	public:
		CGroupBoxes(){} // Calls COleDispatchDriver default constructor
		CGroupBoxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGroupBoxes(const CGroupBoxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// GroupBoxes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// GroupBoxes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	class CGroupObject : public COleDispatchDriver
	{
	public:
		CGroupObject(){} // Calls COleDispatchDriver default constructor
		CGroupObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGroupObject(const CGroupObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// GroupObject methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy27()
		{
			InvokeHelper(0x1001b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy28()
		{
			InvokeHelper(0x1001c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy30()
		{
			InvokeHelper(0x1001e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_ArrowHeadLength()
		{
			VARIANT result;
			InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadLength(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadStyle()
		{
			VARIANT result;
			InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadWidth()
		{
			VARIANT result;
			InvokeHelper(0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy37()
		{
			InvokeHelper(0x10025, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy38()
		{
			InvokeHelper(0x10026, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy41()
		{
			InvokeHelper(0x10029, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy42()
		{
			InvokeHelper(0x1002a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy43()
		{
			InvokeHelper(0x1002b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy44()
		{
			InvokeHelper(0x1002c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy45()
		{
			InvokeHelper(0x1002d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy47()
		{
			InvokeHelper(0x1002f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy48()
		{
			InvokeHelper(0x10030, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy50()
		{
			InvokeHelper(0x10032, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy52()
		{
			InvokeHelper(0x10034, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy53()
		{
			InvokeHelper(0x10035, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy54()
		{
			InvokeHelper(0x10036, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy55()
		{
			InvokeHelper(0x10037, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy56()
		{
			InvokeHelper(0x10038, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy57()
		{
			InvokeHelper(0x10039, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy58()
		{
			InvokeHelper(0x1003a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy59()
		{
			InvokeHelper(0x1003b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy60()
		{
			InvokeHelper(0x1003c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy61()
		{
			InvokeHelper(0x1003d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy62()
		{
			InvokeHelper(0x1003e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy63()
		{
			InvokeHelper(0x1003f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy65()
		{
			InvokeHelper(0x10041, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy66()
		{
			InvokeHelper(0x10042, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy67()
		{
			InvokeHelper(0x10043, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy68()
		{
			InvokeHelper(0x10044, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy70()
		{
			InvokeHelper(0x10046, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy72()
		{
			InvokeHelper(0x10048, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy73()
		{
			InvokeHelper(0x10049, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Ungroup()
		{
			LPDISPATCH result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy75()
		{
			InvokeHelper(0x1004b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy77()
		{
			InvokeHelper(0x1004d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// GroupObject properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CGroupObjects wrapper class

	class CGroupObjects : public COleDispatchDriver
	{
	public:
		CGroupObjects(){} // Calls COleDispatchDriver default constructor
		CGroupObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGroupObjects(const CGroupObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// GroupObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy27()
		{
			InvokeHelper(0x1001b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy28()
		{
			InvokeHelper(0x1001c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy30()
		{
			InvokeHelper(0x1001e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_ArrowHeadLength()
		{
			VARIANT result;
			InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadLength(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadStyle()
		{
			VARIANT result;
			InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadWidth()
		{
			VARIANT result;
			InvokeHelper(0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy37()
		{
			InvokeHelper(0x10025, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy38()
		{
			InvokeHelper(0x10026, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy41()
		{
			InvokeHelper(0x10029, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy42()
		{
			InvokeHelper(0x1002a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy43()
		{
			InvokeHelper(0x1002b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy44()
		{
			InvokeHelper(0x1002c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy45()
		{
			InvokeHelper(0x1002d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy47()
		{
			InvokeHelper(0x1002f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy48()
		{
			InvokeHelper(0x10030, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy50()
		{
			InvokeHelper(0x10032, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy52()
		{
			InvokeHelper(0x10034, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy53()
		{
			InvokeHelper(0x10035, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy54()
		{
			InvokeHelper(0x10036, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy55()
		{
			InvokeHelper(0x10037, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy56()
		{
			InvokeHelper(0x10038, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy57()
		{
			InvokeHelper(0x10039, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy58()
		{
			InvokeHelper(0x1003a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy59()
		{
			InvokeHelper(0x1003b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy60()
		{
			InvokeHelper(0x1003c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy61()
		{
			InvokeHelper(0x1003d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy62()
		{
			InvokeHelper(0x1003e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy63()
		{
			InvokeHelper(0x1003f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy65()
		{
			InvokeHelper(0x10041, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy66()
		{
			InvokeHelper(0x10042, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy67()
		{
			InvokeHelper(0x10043, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy68()
		{
			InvokeHelper(0x10044, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy70()
		{
			InvokeHelper(0x10046, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy72()
		{
			InvokeHelper(0x10048, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy73()
		{
			InvokeHelper(0x10049, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Ungroup()
		{
			LPDISPATCH result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy75()
		{
			InvokeHelper(0x1004b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy77()
		{
			InvokeHelper(0x1004d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// GroupObjects properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CGroupShapes wrapper class

	class CGroupShapes : public COleDispatchDriver
	{
	public:
		CGroupShapes(){} // Calls COleDispatchDriver default constructor
		CGroupShapes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CGroupShapes(const CGroupShapes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// GroupShapes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// GroupShapes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHeaderFooter wrapper class

	class CHeaderFooter : public COleDispatchDriver
	{
	public:
		CHeaderFooter(){} // Calls COleDispatchDriver default constructor
		CHeaderFooter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHeaderFooter(const CHeaderFooter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// HeaderFooter methods
	public:
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Picture()
		{
			LPDISPATCH result;
			InvokeHelper(0x1df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// HeaderFooter properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHiLoLines wrapper class

	class CHiLoLines : public COleDispatchDriver
	{
	public:
		CHiLoLines(){} // Calls COleDispatchDriver default constructor
		CHiLoLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHiLoLines(const CHiLoLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// HiLoLines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// HiLoLines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHPageBreak wrapper class

	class CHPageBreak : public COleDispatchDriver
	{
	public:
		CHPageBreak(){} // Calls COleDispatchDriver default constructor
		CHPageBreak(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHPageBreak(const CHPageBreak& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// HPageBreak methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void DragOff(long Direction, long RegionIndex)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Direction, RegionIndex);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Extent()
		{
			long result;
			InvokeHelper(0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Location()
		{
			LPDISPATCH result;
			InvokeHelper(0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_Location(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}

		// HPageBreak properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHPageBreaks wrapper class

	class CHPageBreaks : public COleDispatchDriver
	{
	public:
		CHPageBreaks(){} // Calls COleDispatchDriver default constructor
		CHPageBreaks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHPageBreaks(const CHPageBreaks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// HPageBreaks methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPDISPATCH Before)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Before);
			return result;
		}

		// HPageBreaks properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHyperlink wrapper class

	class CHyperlink : public COleDispatchDriver
	{
	public:
		CHyperlink(){} // Calls COleDispatchDriver default constructor
		CHyperlink(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHyperlink(const CHyperlink& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Hyperlink methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shape()
		{
			LPDISPATCH result;
			InvokeHelper(0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_SubAddress()
		{
			CString result;
			InvokeHelper(0x5bf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SubAddress(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Address()
		{
			CString result;
			InvokeHelper(0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Address(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void AddToFavorites()
		{
			InvokeHelper(0x5c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Follow(VARIANT& NewWindow, VARIANT& AddHistory, VARIANT& ExtraInfo, VARIANT& Method, VARIANT& HeaderInfo)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x650, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &NewWindow, &AddHistory, &ExtraInfo, &Method, &HeaderInfo);
		}
		CString get_EmailSubject()
		{
			CString result;
			InvokeHelper(0x75b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_EmailSubject(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x75b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ScreenTip()
		{
			CString result;
			InvokeHelper(0x759, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ScreenTip(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x759, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TextToDisplay()
		{
			CString result;
			InvokeHelper(0x75a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TextToDisplay(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x75a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void CreateNewDocument(LPCTSTR Filename, BOOL EditNow, BOOL Overwrite)
		{
			static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_BOOL ;
			InvokeHelper(0x75c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, EditNow, Overwrite);
		}

		// Hyperlink properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CHyperlinks wrapper class

	class CHyperlinks : public COleDispatchDriver
	{
	public:
		CHyperlinks(){} // Calls COleDispatchDriver default constructor
		CHyperlinks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CHyperlinks(const CHyperlinks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Hyperlinks methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPDISPATCH Anchor, LPCTSTR Address, VARIANT& SubAddress, VARIANT& ScreenTip, VARIANT& TextToDisplay)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Anchor, Address, &SubAddress, &ScreenTip, &TextToDisplay);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Hyperlinks properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLabel wrapper class

	class CLabel : public COleDispatchDriver
	{
	public:
		CLabel(){} // Calls COleDispatchDriver default constructor
		CLabel(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLabel(const CLabel& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Label methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy33()
		{
			InvokeHelper(0x10021, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Label properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLabels wrapper class

	class CLabels : public COleDispatchDriver
	{
	public:
		CLabels(){} // Calls COleDispatchDriver default constructor
		CLabels(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLabels(const CLabels& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Labels methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void _Dummy33()
		{
			InvokeHelper(0x10021, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Labels properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLeaderLines wrapper class

	class CLeaderLines : public COleDispatchDriver
	{
	public:
		CLeaderLines(){} // Calls COleDispatchDriver default constructor
		CLeaderLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLeaderLines(const CLeaderLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LeaderLines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Select()
		{
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// LeaderLines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLegend wrapper class

	class CLegend : public COleDispatchDriver
	{
	public:
		CLegend(){} // Calls COleDispatchDriver default constructor
		CLegend(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLegend(const CLegend& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Legend methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH LegendEntries(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xad, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Clear()
		{
			VARIANT result;
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_IncludeInLayout()
		{
			BOOL result;
			InvokeHelper(0xa58, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeInLayout(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa58, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Legend properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLegendEntries wrapper class

	class CLegendEntries : public COleDispatchDriver
	{
	public:
		CLegendEntries(){} // Calls COleDispatchDriver default constructor
		CLegendEntries(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLegendEntries(const CLegendEntries& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LegendEntries methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// LegendEntries properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLegendEntry wrapper class

	class CLegendEntry : public COleDispatchDriver
	{
	public:
		CLegendEntry(){} // Calls COleDispatchDriver default constructor
		CLegendEntry(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLegendEntry(const CLegendEntry& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LegendEntry methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LegendKey()
		{
			LPDISPATCH result;
			InvokeHelper(0xae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// LegendEntry properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLegendKey wrapper class

	class CLegendKey : public COleDispatchDriver
	{
	public:
		CLegendKey(){} // Calls COleDispatchDriver default constructor
		CLegendKey(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLegendKey(const CLegendKey& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LegendKey methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_InvertIfNegative()
		{
			BOOL result;
			InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InvertIfNegative(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColor()
		{
			long result;
			InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColorIndex()
		{
			long result;
			InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColor()
		{
			long result;
			InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColorIndex()
		{
			long result;
			InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerSize()
		{
			long result;
			InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerStyle()
		{
			long result;
			InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PictureType()
		{
			long result;
			InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PictureUnit()
		{
			long result;
			InvokeHelper(0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_Smooth()
		{
			BOOL result;
			InvokeHelper(0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Smooth(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_PictureUnit2()
		{
			double result;
			InvokeHelper(0xa59, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit2(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// LegendKey properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLine wrapper class

	class CLine : public COleDispatchDriver
	{
	public:
		CLine(){} // Calls COleDispatchDriver default constructor
		CLine(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLine(const CLine& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Line methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ArrowHeadLength()
		{
			VARIANT result;
			InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadLength(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadStyle()
		{
			VARIANT result;
			InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadWidth()
		{
			VARIANT result;
			InvokeHelper(0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Line properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLinearGradient wrapper class

	class CLinearGradient : public COleDispatchDriver
	{
	public:
		CLinearGradient(){} // Calls COleDispatchDriver default constructor
		CLinearGradient(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLinearGradient(const CLinearGradient& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LinearGradient methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ColorStops()
		{
			LPDISPATCH result;
			InvokeHelper(0xac9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_Degree()
		{
			double result;
			InvokeHelper(0x657, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Degree(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x657, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// LinearGradient properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLineFormat wrapper class

	class CLineFormat : public COleDispatchDriver
	{
	public:
		CLineFormat(){} // Calls COleDispatchDriver default constructor
		CLineFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLineFormat(const CLineFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LineFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BackColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void put_BackColor(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BeginArrowheadLength()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BeginArrowheadLength(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BeginArrowheadStyle()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BeginArrowheadStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BeginArrowheadWidth()
		{
			long result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BeginArrowheadWidth(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_DashStyle()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DashStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EndArrowheadLength()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EndArrowheadLength(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EndArrowheadStyle()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EndArrowheadStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EndArrowheadWidth()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EndArrowheadWidth(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ForeColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void put_ForeColor(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Pattern()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Pattern(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Style()
		{
			long result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Style(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Transparency()
		{
			float result;
			InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Transparency(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Weight()
		{
			float result;
			InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Weight(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// LineFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLines wrapper class

	class CLines : public COleDispatchDriver
	{
	public:
		CLines(){} // Calls COleDispatchDriver default constructor
		CLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLines(const CLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Lines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ArrowHeadLength()
		{
			VARIANT result;
			InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadLength(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadStyle()
		{
			VARIANT result;
			InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ArrowHeadWidth()
		{
			VARIANT result;
			InvokeHelper(0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ArrowHeadWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(double X1, double Y1, double X2, double Y2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, X1, Y1, X2, Y2);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Lines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CLinkFormat wrapper class

	class CLinkFormat : public COleDispatchDriver
	{
	public:
		CLinkFormat(){} // Calls COleDispatchDriver default constructor
		CLinkFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CLinkFormat(const CLinkFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// LinkFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AutoUpdate()
		{
			BOOL result;
			InvokeHelper(0x418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoUpdate(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Update()
		{
			InvokeHelper(0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// LinkFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListBox0 wrapper class

	class CListBox0 : public COleDispatchDriver
	{
	public:
		CListBox0(){} // Calls COleDispatchDriver default constructor
		CListBox0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListBox0(const CListBox0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListBox methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddItem(VARIANT& Text, VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Text, &Index);
			return result;
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_LinkedObject()
		{
			VARIANT result;
			InvokeHelper(0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_List(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_ListCount()
		{
			long result;
			InvokeHelper(0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MultiSelect()
		{
			long result;
			InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MultiSelect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT RemoveAllItems()
		{
			VARIANT result;
			InvokeHelper(0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT RemoveItem(long Index, VARIANT& Count)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Index, &Count);
			return result;
		}
		VARIANT get_Selected(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Selected(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ListBox properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListBoxes wrapper class

	class CListBoxes : public COleDispatchDriver
	{
	public:
		CListBoxes(){} // Calls COleDispatchDriver default constructor
		CListBoxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListBoxes(const CListBoxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListBoxes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddItem(VARIANT& Text, VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Text, &Index);
			return result;
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy31()
		{
			InvokeHelper(0x1001f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_List(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_List(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		void _Dummy33()
		{
			InvokeHelper(0x10021, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListIndex()
		{
			long result;
			InvokeHelper(0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MultiSelect()
		{
			long result;
			InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MultiSelect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT RemoveAllItems()
		{
			VARIANT result;
			InvokeHelper(0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT RemoveItem(long Index, VARIANT& Count)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Index, &Count);
			return result;
		}
		VARIANT get_Selected(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Selected(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// ListBoxes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListColumn wrapper class

	class CListColumn : public COleDispatchDriver
	{
	public:
		CListColumn(){} // Calls COleDispatchDriver default constructor
		CListColumn(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListColumn(const CListColumn& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListColumn methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ListDataFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x911, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_TotalsCalculation()
		{
			long result;
			InvokeHelper(0x912, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TotalsCalculation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x912, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_XPath()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_SharePointFormula()
		{
			CString result;
			InvokeHelper(0x913, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataBodyRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2c1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Total()
		{
			LPDISPATCH result;
			InvokeHelper(0xa79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ListColumn properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListColumns wrapper class

	class CListColumns : public COleDispatchDriver
	{
	public:
		CListColumns(){} // Calls COleDispatchDriver default constructor
		CListColumns(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListColumns(const CListColumns& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListColumns methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Position)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Position);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// ListColumns properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListDataFormat wrapper class

	class CListDataFormat : public COleDispatchDriver
	{
	public:
		CListDataFormat(){} // Calls COleDispatchDriver default constructor
		CListDataFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListDataFormat(const CListDataFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListDataFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Choices()
		{
			VARIANT result;
			InvokeHelper(0x92c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_DecimalPlaces()
		{
			long result;
			InvokeHelper(0x92d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_DefaultValue()
		{
			VARIANT result;
			InvokeHelper(0x92e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_IsPercent()
		{
			BOOL result;
			InvokeHelper(0x92f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_lcid()
		{
			long result;
			InvokeHelper(0x930, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_MaxCharacters()
		{
			long result;
			InvokeHelper(0x931, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_MaxNumber()
		{
			VARIANT result;
			InvokeHelper(0x932, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_MinNumber()
		{
			VARIANT result;
			InvokeHelper(0x933, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_Required()
		{
			BOOL result;
			InvokeHelper(0x934, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_ReadOnly()
		{
			BOOL result;
			InvokeHelper(0x128, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowFillIn()
		{
			BOOL result;
			InvokeHelper(0x935, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// ListDataFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListObject wrapper class

	class CListObject : public COleDispatchDriver
	{
	public:
		CListObject(){} // Calls COleDispatchDriver default constructor
		CListObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListObject(const CListObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListObject methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString Publish(VARIANT& Target, BOOL LinkSource)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_BOOL ;
			InvokeHelper(0x767, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Target, LinkSource);
			return result;
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Unlink()
		{
			InvokeHelper(0x904, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Unlist()
		{
			InvokeHelper(0x905, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void UpdateChanges(long iConflictType)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x906, DISPATCH_METHOD, VT_EMPTY, NULL, parms, iConflictType);
		}
		void Resize(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x100, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_Active()
		{
			BOOL result;
			InvokeHelper(0x908, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataBodyRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2c1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayRightToLeft()
		{
			BOOL result;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_HeaderRowRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x909, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_InsertRowRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x90a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ListColumns()
		{
			LPDISPATCH result;
			InvokeHelper(0x90b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ListRows()
		{
			LPDISPATCH result;
			InvokeHelper(0x90c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_QueryTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x56a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowAutoFilter()
		{
			BOOL result;
			InvokeHelper(0x90d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowAutoFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x90d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTotals()
		{
			BOOL result;
			InvokeHelper(0x90e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTotals(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x90e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SourceType()
		{
			long result;
			InvokeHelper(0x2ad, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TotalsRowRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x90f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_SharePointURL()
		{
			CString result;
			InvokeHelper(0x910, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_XmlMap()
		{
			LPDISPATCH result;
			InvokeHelper(0x8cd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_DisplayName()
		{
			CString result;
			InvokeHelper(0xa75, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_DisplayName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa75, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowHeaders()
		{
			BOOL result;
			InvokeHelper(0xa76, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowHeaders(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa76, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AutoFilter()
		{
			LPDISPATCH result;
			InvokeHelper(0x319, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_TableStyle()
		{
			VARIANT result;
			InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TableStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_ShowTableStyleFirstColumn()
		{
			BOOL result;
			InvokeHelper(0xa77, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleFirstColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleLastColumn()
		{
			BOOL result;
			InvokeHelper(0xa03, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleLastColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa03, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleRowStripes()
		{
			BOOL result;
			InvokeHelper(0xa04, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleRowStripes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa04, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleColumnStripes()
		{
			BOOL result;
			InvokeHelper(0xa05, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleColumnStripes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa05, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Sort()
		{
			LPDISPATCH result;
			InvokeHelper(0x370, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Comment()
		{
			CString result;
			InvokeHelper(0x38e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Comment(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x38e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ExportToVisio()
		{
			InvokeHelper(0xa78, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// ListObject properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListObjects wrapper class

	class CListObjects : public COleDispatchDriver
	{
	public:
		CListObjects(){} // Calls COleDispatchDriver default constructor
		CListObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListObjects(const CListObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Add(long SourceType, VARIANT& Source, VARIANT& LinkSource, long XlListObjectHasHeaders, VARIANT& Destination)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SourceType, &Source, &LinkSource, XlListObjectHasHeaders, &Destination);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(long SourceType, VARIANT& Source, VARIANT& LinkSource, long XlListObjectHasHeaders, VARIANT& Destination, VARIANT& TableStyleName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SourceType, &Source, &LinkSource, XlListObjectHasHeaders, &Destination, &TableStyleName);
			return result;
		}

		// ListObjects properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListRow wrapper class

	class CListRow : public COleDispatchDriver
	{
	public:
		CListRow(){} // Calls COleDispatchDriver default constructor
		CListRow(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListRow(const CListRow& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListRow methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_InvalidData()
		{
			BOOL result;
			InvokeHelper(0x914, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ListRow properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CListRows wrapper class

	class CListRows : public COleDispatchDriver
	{
	public:
		CListRows(){} // Calls COleDispatchDriver default constructor
		CListRows(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CListRows(const CListRows& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ListRows methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Add(VARIANT& Position)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Position);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Position, VARIANT& AlwaysInsert)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Position, &AlwaysInsert);
			return result;
		}

		// ListRows properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMailer wrapper class

	class CMailer : public COleDispatchDriver
	{
	public:
		CMailer(){} // Calls COleDispatchDriver default constructor
		CMailer(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMailer(const CMailer& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Mailer methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_BCCRecipients()
		{
			VARIANT result;
			InvokeHelper(0x3d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_BCCRecipients(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_CCRecipients()
		{
			VARIANT result;
			InvokeHelper(0x3d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CCRecipients(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Enclosures()
		{
			VARIANT result;
			InvokeHelper(0x3d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Enclosures(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_Received()
		{
			BOOL result;
			InvokeHelper(0x3da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		DATE get_SendDateTime()
		{
			DATE result;
			InvokeHelper(0x3db, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
			return result;
		}
		CString get_Sender()
		{
			CString result;
			InvokeHelper(0x3dc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Subject()
		{
			CString result;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Subject(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_ToRecipients()
		{
			VARIANT result;
			InvokeHelper(0x3d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ToRecipients(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_WhichAddress()
		{
			VARIANT result;
			InvokeHelper(0x3ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_WhichAddress(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Mailer properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenu0 wrapper class

	class CMenu0 : public COleDispatchDriver
	{
	public:
		CMenu0(){} // Calls COleDispatchDriver default constructor
		CMenu0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenu0(const CMenu0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Menu methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MenuItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x251, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Menu properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenuBar wrapper class

	class CMenuBar : public COleDispatchDriver
	{
	public:
		CMenuBar(){} // Calls COleDispatchDriver default constructor
		CMenuBar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenuBar(const CMenuBar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// MenuBar methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_BuiltIn()
		{
			BOOL result;
			InvokeHelper(0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Menus()
		{
			LPDISPATCH result;
			InvokeHelper(0x24f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Reset()
		{
			InvokeHelper(0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// MenuBar properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenuBars wrapper class

	class CMenuBars : public COleDispatchDriver
	{
	public:
		CMenuBars(){} // Calls COleDispatchDriver default constructor
		CMenuBars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenuBars(const CMenuBars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// MenuBars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Name)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Name);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// MenuBars properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenuItem wrapper class

	class CMenuItem : public COleDispatchDriver
	{
	public:
		CMenuItem(){} // Calls COleDispatchDriver default constructor
		CMenuItem(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenuItem(const CMenuItem& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// MenuItem methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Checked()
		{
			BOOL result;
			InvokeHelper(0x257, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Checked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HelpContextID()
		{
			long result;
			InvokeHelper(0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HelpContextID(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_HelpFile()
		{
			CString result;
			InvokeHelper(0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_HelpFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StatusBar()
		{
			CString result;
			InvokeHelper(0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StatusBar(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// MenuItem properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenuItems wrapper class

	class CMenuItems : public COleDispatchDriver
	{
	public:
		CMenuItems(){} // Calls COleDispatchDriver default constructor
		CMenuItems(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenuItems(const CMenuItems& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// MenuItems methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Caption, VARIANT& OnAction, VARIANT& ShortcutKey, VARIANT& Before, VARIANT& Restore, VARIANT& StatusBar, VARIANT& HelpFile, VARIANT& HelpContextID)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Caption, &OnAction, &ShortcutKey, &Before, &Restore, &StatusBar, &HelpFile, &HelpContextID);
			return result;
		}
		LPDISPATCH AddMenu(LPCTSTR Caption, VARIANT& Before, VARIANT& Restore)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x256, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Caption, &Before, &Restore);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// MenuItems properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMenus wrapper class

	class CMenus : public COleDispatchDriver
	{
	public:
		CMenus(){} // Calls COleDispatchDriver default constructor
		CMenus(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMenus(const CMenus& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Menus methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Caption, VARIANT& Before, VARIANT& Restore)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Caption, &Before, &Restore);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Menus properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CModule wrapper class

	class CModule : public COleDispatchDriver
	{
	public:
		CModule(){} // Calls COleDispatchDriver default constructor
		CModule(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CModule(const CModule& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Module methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_CodeName()
		{
			CString result;
			InvokeHelper(0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__CodeName()
		{
			CString result;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__CodeName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnDoubleClick()
		{
			CString result;
			InvokeHelper(0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnDoubleClick(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PageSetup()
		{
			LPDISPATCH result;
			InvokeHelper(0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void _Dummy18()
		{
			InvokeHelper(0x10012, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		BOOL get_ProtectContents()
		{
			BOOL result;
			InvokeHelper(0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _Dummy21()
		{
			InvokeHelper(0x10015, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ProtectionMode()
		{
			BOOL result;
			InvokeHelper(0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _Dummy23()
		{
			InvokeHelper(0x10017, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Shapes()
		{
			LPDISPATCH result;
			InvokeHelper(0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT InsertFile(VARIANT& Filename, VARIANT& Merge)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x248, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Filename, &Merge);
			return result;
		}
		void SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x785, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}

		// Module properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CModules wrapper class

	class CModules : public COleDispatchDriver
	{
	public:
		CModules(){} // Calls COleDispatchDriver default constructor
		CModules(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CModules(const CModules& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Modules methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Before, VARIANT& After, VARIANT& Count)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Before, &After, &Count);
			return result;
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy7()
		{
			InvokeHelper(0x10007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Visible()
		{
			VARIANT result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Visible(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName, VARIANT& IgnorePrintAreas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName, &IgnorePrintAreas);
		}

		// Modules properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CModuleView wrapper class

	class CModuleView : public COleDispatchDriver
	{
	public:
		CModuleView(){} // Calls COleDispatchDriver default constructor
		CModuleView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CModuleView(const CModuleView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ModuleView methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ModuleView properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CMultiThreadedCalculation wrapper class

	class CMultiThreadedCalculation : public COleDispatchDriver
	{
	public:
		CMultiThreadedCalculation(){} // Calls COleDispatchDriver default constructor
		CMultiThreadedCalculation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CMultiThreadedCalculation(const CMultiThreadedCalculation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// MultiThreadedCalculation methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ThreadMode()
		{
			long result;
			InvokeHelper(0xace, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThreadMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xace, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ThreadCount()
		{
			long result;
			InvokeHelper(0xacf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThreadCount(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xacf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// MultiThreadedCalculation properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CName wrapper class

	class CName : public COleDispatchDriver
	{
	public:
		CName(){} // Calls COleDispatchDriver default constructor
		CName(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CName(const CName& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Name methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Category()
		{
			CString result;
			InvokeHelper(0x3a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Category(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_CategoryLocal()
		{
			CString result;
			InvokeHelper(0x3a7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CategoryLocal(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_MacroType()
		{
			long result;
			InvokeHelper(0x3a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MacroType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_RefersTo()
		{
			VARIANT result;
			InvokeHelper(0x3aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RefersTo(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_ShortcutKey()
		{
			CString result;
			InvokeHelper(0x255, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ShortcutKey(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x255, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Value(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NameLocal()
		{
			CString result;
			InvokeHelper(0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NameLocal(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_RefersToLocal()
		{
			VARIANT result;
			InvokeHelper(0x3ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RefersToLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_RefersToR1C1()
		{
			VARIANT result;
			InvokeHelper(0x3ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RefersToR1C1(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_RefersToR1C1Local()
		{
			VARIANT result;
			InvokeHelper(0x3ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RefersToR1C1Local(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_RefersToRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x488, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Comment()
		{
			CString result;
			InvokeHelper(0x38e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Comment(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x38e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WorkbookParameter()
		{
			BOOL result;
			InvokeHelper(0xa2f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WorkbookParameter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ValidWorkbookParameter()
		{
			BOOL result;
			InvokeHelper(0xa30, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// Name properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CNames wrapper class

	class CNames : public COleDispatchDriver
	{
	public:
		CNames(){} // Calls COleDispatchDriver default constructor
		CNames(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CNames(const CNames& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Names methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Name, VARIANT& RefersTo, VARIANT& Visible, VARIANT& MacroType, VARIANT& ShortcutKey, VARIANT& Category, VARIANT& NameLocal, VARIANT& RefersToLocal, VARIANT& CategoryLocal, VARIANT& RefersToR1C1, VARIANT& RefersToR1C1Local)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Name, &RefersTo, &Visible, &MacroType, &ShortcutKey, &Category, &NameLocal, &RefersToLocal, &CategoryLocal, &RefersToR1C1, &RefersToR1C1Local);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index, VARIANT& IndexLocal, VARIANT& RefersTo)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index, &IndexLocal, &RefersTo);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index, VARIANT& IndexLocal, VARIANT& RefersTo)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index, &IndexLocal, &RefersTo);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Names properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// Cnterior wrapper class

	class CInteriorEx : public COleDispatchDriver
	{
	public:
		CInteriorEx(){} // Calls COleDispatchDriver default constructor
		CInteriorEx(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CInteriorEx(const CInteriorEx& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Interior methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ColorIndex()
		{
			VARIANT result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_InvertIfNegative()
		{
			VARIANT result;
			InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_InvertIfNegative(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Pattern()
		{
			VARIANT result;
			InvokeHelper(0x5f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Pattern(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_PatternColor()
		{
			VARIANT result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PatternColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_PatternColorIndex()
		{
			VARIANT result;
			InvokeHelper(0x62, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PatternColorIndex(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x62, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_ThemeColor()
		{
			VARIANT result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_PatternThemeColor()
		{
			VARIANT result;
			InvokeHelper(0xa53, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PatternThemeColor(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa53, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_PatternTintAndShade()
		{
			VARIANT result;
			InvokeHelper(0xa54, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PatternTintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa54, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Gradient()
		{
			LPDISPATCH result;
			InvokeHelper(0xa55, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Interior properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CODBCConnection wrapper class

	class CODBCConnection : public COleDispatchDriver
	{
	public:
		CODBCConnection(){} // Calls COleDispatchDriver default constructor
		CODBCConnection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CODBCConnection(const CODBCConnection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ODBCConnection methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BackgroundQuery()
		{
			BOOL result;
			InvokeHelper(0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundQuery(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void CancelRefresh()
		{
			InvokeHelper(0x635, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_CommandText()
		{
			VARIANT result;
			InvokeHelper(0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CommandText(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_CommandType()
		{
			long result;
			InvokeHelper(0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CommandType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Connection()
		{
			VARIANT result;
			InvokeHelper(0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Connection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_EnableRefresh()
		{
			BOOL result;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		DATE get_RefreshDate()
		{
			DATE result;
			InvokeHelper(0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
			return result;
		}
		BOOL get_Refreshing()
		{
			BOOL result;
			InvokeHelper(0x633, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_RefreshOnFileOpen()
		{
			BOOL result;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RefreshOnFileOpen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RefreshPeriod()
		{
			long result;
			InvokeHelper(0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RefreshPeriod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RobustConnect()
		{
			long result;
			InvokeHelper(0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RobustConnect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SaveAsODC(LPCTSTR ODCFileName, VARIANT& Description, VARIANT& Keywords)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x822, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ODCFileName, &Description, &Keywords);
		}
		BOOL get_SavePassword()
		{
			BOOL result;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SavePassword(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceConnectionFile()
		{
			CString result;
			InvokeHelper(0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceConnectionFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_SourceData()
		{
			VARIANT result;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_SourceData(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_SourceDataFile()
		{
			CString result;
			InvokeHelper(0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceDataFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x820, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ServerCredentialsMethod()
		{
			long result;
			InvokeHelper(0xa90, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ServerCredentialsMethod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa90, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ServerSSOApplicationID()
		{
			CString result;
			InvokeHelper(0xa91, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ServerSSOApplicationID(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa91, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AlwaysUseConnectionFile()
		{
			BOOL result;
			InvokeHelper(0xa92, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlwaysUseConnectionFile(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa92, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ODBCConnection properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CODBCError wrapper class

	class CODBCError : public COleDispatchDriver
	{
	public:
		CODBCError(){} // Calls COleDispatchDriver default constructor
		CODBCError(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CODBCError(const CODBCError& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ODBCError methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_SqlState()
		{
			CString result;
			InvokeHelper(0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_ErrorString()
		{
			CString result;
			InvokeHelper(0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// ODBCError properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CODBCErrors wrapper class

	class CODBCErrors : public COleDispatchDriver
	{
	public:
		CODBCErrors(){} // Calls COleDispatchDriver default constructor
		CODBCErrors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CODBCErrors(const CODBCErrors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ODBCErrors methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// ODBCErrors properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEDBConnection wrapper class

	class COLEDBConnection : public COleDispatchDriver
	{
	public:
		COLEDBConnection(){} // Calls COleDispatchDriver default constructor
		COLEDBConnection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEDBConnection(const COLEDBConnection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEDBConnection methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ADOConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0x81a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BackgroundQuery()
		{
			BOOL result;
			InvokeHelper(0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundQuery(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void CancelRefresh()
		{
			InvokeHelper(0x635, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_CommandText()
		{
			VARIANT result;
			InvokeHelper(0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CommandText(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_CommandType()
		{
			long result;
			InvokeHelper(0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CommandType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Connection()
		{
			VARIANT result;
			InvokeHelper(0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Connection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_EnableRefresh()
		{
			BOOL result;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_LocalConnection()
		{
			VARIANT result;
			InvokeHelper(0x72b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_LocalConnection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x72b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_MaintainConnection()
		{
			BOOL result;
			InvokeHelper(0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MaintainConnection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void MakeConnection()
		{
			InvokeHelper(0x81c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		DATE get_RefreshDate()
		{
			DATE result;
			InvokeHelper(0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
			return result;
		}
		BOOL get_Refreshing()
		{
			BOOL result;
			InvokeHelper(0x633, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_RefreshOnFileOpen()
		{
			BOOL result;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RefreshOnFileOpen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RefreshPeriod()
		{
			long result;
			InvokeHelper(0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RefreshPeriod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RobustConnect()
		{
			long result;
			InvokeHelper(0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RobustConnect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SaveAsODC(LPCTSTR ODCFileName, VARIANT& Description, VARIANT& Keywords)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x822, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ODCFileName, &Description, &Keywords);
		}
		BOOL get_SavePassword()
		{
			BOOL result;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SavePassword(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceConnectionFile()
		{
			CString result;
			InvokeHelper(0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceConnectionFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceDataFile()
		{
			CString result;
			InvokeHelper(0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceDataFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x820, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_OLAP()
		{
			BOOL result;
			InvokeHelper(0x81d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_UseLocalConnection()
		{
			BOOL result;
			InvokeHelper(0x72d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseLocalConnection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x72d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MaxDrillthroughRecords()
		{
			long result;
			InvokeHelper(0xa8f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MaxDrillthroughRecords(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa8f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsConnected()
		{
			BOOL result;
			InvokeHelper(0x81b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ServerCredentialsMethod()
		{
			long result;
			InvokeHelper(0xa90, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ServerCredentialsMethod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa90, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ServerSSOApplicationID()
		{
			CString result;
			InvokeHelper(0xa91, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ServerSSOApplicationID(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa91, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AlwaysUseConnectionFile()
		{
			BOOL result;
			InvokeHelper(0xa92, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlwaysUseConnectionFile(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa92, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ServerFillColor()
		{
			BOOL result;
			InvokeHelper(0xa93, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ServerFillColor(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa93, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ServerFontStyle()
		{
			BOOL result;
			InvokeHelper(0xa94, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ServerFontStyle(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa94, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ServerNumberFormat()
		{
			BOOL result;
			InvokeHelper(0xa95, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ServerNumberFormat(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa95, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ServerTextColor()
		{
			BOOL result;
			InvokeHelper(0xa96, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ServerTextColor(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa96, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RetrieveInOfficeUILang()
		{
			BOOL result;
			InvokeHelper(0xa97, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RetrieveInOfficeUILang(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa97, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// OLEDBConnection properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEDBError wrapper class

	class COLEDBError : public COleDispatchDriver
	{
	public:
		COLEDBError(){} // Calls COleDispatchDriver default constructor
		COLEDBError(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEDBError(const COLEDBError& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEDBError methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_SqlState()
		{
			CString result;
			InvokeHelper(0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_ErrorString()
		{
			CString result;
			InvokeHelper(0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Native()
		{
			long result;
			InvokeHelper(0x769, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Number()
		{
			long result;
			InvokeHelper(0x1c3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Stage()
		{
			long result;
			InvokeHelper(0x76a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// OLEDBError properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEDBErrors wrapper class

	class COLEDBErrors : public COleDispatchDriver
	{
	public:
		COLEDBErrors(){} // Calls COleDispatchDriver default constructor
		COLEDBErrors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEDBErrors(const COLEDBErrors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEDBErrors methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// OLEDBErrors properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEFormat wrapper class

	class COLEFormat : public COleDispatchDriver
	{
	public:
		COLEFormat(){} // Calls COleDispatchDriver default constructor
		COLEFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEFormat(const COLEFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Object()
		{
			LPDISPATCH result;
			InvokeHelper(0x419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_progID()
		{
			CString result;
			InvokeHelper(0x5f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Verb(VARIANT& Verb)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x25e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Verb);
		}

		// OLEFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEObject wrapper class

	class COLEObject : public COleDispatchDriver
	{
	public:
		COLEObject(){} // Calls COleDispatchDriver default constructor
		COLEObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEObject(const COLEObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _OLEObject methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010094, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x80010095, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010096, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x8001025a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x80010227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x800100d5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x80010235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x80010075, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x8001040f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x80010258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x80010258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x8001007b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x8001007b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x800101e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x8001007f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x8001007f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x8001010d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8001010d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x8001006e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8001006e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x80010254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x80010269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x80010269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x8001026a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8001026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x800100eb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x8001025d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x8001007e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x8001007e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x8001026c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x8001022e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8001022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x8001007a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x8001007a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x8001026e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x800105f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010080, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010081, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x80010067, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x80010067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Activate()
		{
			VARIANT result;
			InvokeHelper(0x80010130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_AutoLoad()
		{
			BOOL result;
			InvokeHelper(0x800104a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoLoad(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x800104a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoUpdate()
		{
			BOOL result;
			InvokeHelper(0x80010418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoUpdate(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x80010418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Object()
		{
			LPDISPATCH result;
			InvokeHelper(0x80010419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_OLEType()
		{
			VARIANT result;
			InvokeHelper(0x8001041e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		CString get_SourceName()
		{
			CString result;
			InvokeHelper(0x800102d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x800102d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Update()
		{
			VARIANT result;
			InvokeHelper(0x800102a8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Verb(long Verb)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8001025e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Verb);
			return result;
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x80010422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ListFillRange()
		{
			CString result;
			InvokeHelper(0x8001034f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ListFillRange(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8001034f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_progID()
		{
			CString result;
			InvokeHelper(0x800105f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_AltHTML()
		{
			CString result;
			InvokeHelper(0x8001073d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_AltHTML(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8001073d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// _OLEObject properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEObjectEvents wrapper class

	class COLEObjectEvents : public COleDispatchDriver
	{
	public:
		COLEObjectEvents(){} // Calls COleDispatchDriver default constructor
		COLEObjectEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEObjectEvents(const COLEObjectEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEObjectEvents methods
	public:
		void GotFocus()
		{
			InvokeHelper(0x605, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void LostFocus()
		{
			InvokeHelper(0x606, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// OLEObjectEvents properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COLEObjects wrapper class

	class COLEObjects : public COleDispatchDriver
	{
	public:
		COLEObjects(){} // Calls COleDispatchDriver default constructor
		COLEObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COLEObjects(const COLEObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OLEObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy30()
		{
			InvokeHelper(0x1001e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_AutoLoad()
		{
			BOOL result;
			InvokeHelper(0x4a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoLoad(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy32()
		{
			InvokeHelper(0x10020, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy33()
		{
			InvokeHelper(0x10021, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy34()
		{
			InvokeHelper(0x10022, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_SourceName()
		{
			CString result;
			InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x2d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy36()
		{
			InvokeHelper(0x10024, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy37()
		{
			InvokeHelper(0x10025, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy38()
		{
			InvokeHelper(0x10026, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy39()
		{
			InvokeHelper(0x10027, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy40()
		{
			InvokeHelper(0x10028, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _Dummy41()
		{
			InvokeHelper(0x10029, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Add(VARIANT& ClassType, VARIANT& Filename, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel, VARIANT& Left, VARIANT& Top, VARIANT& Width, VARIANT& Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// OLEObjects properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COptionButton wrapper class

	class COptionButton : public COleDispatchDriver
	{
	public:
		COptionButton(){} // Calls COleDispatchDriver default constructor
		COptionButton(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COptionButton(const COptionButton& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OptionButton methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_GroupBox()
		{
			LPDISPATCH result;
			InvokeHelper(0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// OptionButton properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COptionButtons wrapper class

	class COptionButtons : public COleDispatchDriver
	{
	public:
		COptionButtons(){} // Calls COleDispatchDriver default constructor
		COptionButtons(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COptionButtons(const COptionButtons& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// OptionButtons methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Accelerator()
		{
			VARIANT result;
			InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Accelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PhoneticAccelerator()
		{
			VARIANT result;
			InvokeHelper(0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PhoneticAccelerator(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_GroupBox()
		{
			LPDISPATCH result;
			InvokeHelper(0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// OptionButtons properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COutline wrapper class

	class COutline : public COleDispatchDriver
	{
	public:
		COutline(){} // Calls COleDispatchDriver default constructor
		COutline(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COutline(const COutline& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Outline methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AutomaticStyles()
		{
			BOOL result;
			InvokeHelper(0x3bf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutomaticStyles(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT ShowLevels(VARIANT& RowLevels, VARIANT& ColumnLevels)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3c0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &RowLevels, &ColumnLevels);
			return result;
		}
		long get_SummaryColumn()
		{
			long result;
			InvokeHelper(0x3c1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SummaryColumn(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SummaryRow()
		{
			long result;
			InvokeHelper(0x386, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SummaryRow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x386, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Outline properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COval wrapper class

	class COval : public COleDispatchDriver
	{
	public:
		COval(){} // Calls COleDispatchDriver default constructor
		COval(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COval(const COval& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Oval methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Oval properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// COvals wrapper class

	class COvals : public COleDispatchDriver
	{
	public:
		COvals(){} // Calls COleDispatchDriver default constructor
		COvals(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		COvals(const COvals& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Ovals methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Ovals properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPage wrapper class

	class CPage : public COleDispatchDriver
	{
	public:
		CPage(){} // Calls COleDispatchDriver default constructor
		CPage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPage(const CPage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Page methods
	public:
		LPDISPATCH get_LeftHeader()
		{
			LPDISPATCH result;
			InvokeHelper(0x3fa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CenterHeader()
		{
			LPDISPATCH result;
			InvokeHelper(0x3f3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RightHeader()
		{
			LPDISPATCH result;
			InvokeHelper(0x402, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LeftFooter()
		{
			LPDISPATCH result;
			InvokeHelper(0x3f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CenterFooter()
		{
			LPDISPATCH result;
			InvokeHelper(0x3f2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RightFooter()
		{
			LPDISPATCH result;
			InvokeHelper(0x401, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Page properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPages wrapper class

	class CPages : public COleDispatchDriver
	{
	public:
		CPages(){} // Calls COleDispatchDriver default constructor
		CPages(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPages(const CPages& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Pages methods
	public:
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Pages properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPageSetup wrapper class

	class CPageSetup : public COleDispatchDriver
	{
	public:
		CPageSetup(){} // Calls COleDispatchDriver default constructor
		CPageSetup(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPageSetup(const CPageSetup& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PageSetup methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BlackAndWhite()
		{
			BOOL result;
			InvokeHelper(0x3f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BlackAndWhite(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_BottomMargin()
		{
			double result;
			InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_BottomMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_CenterFooter()
		{
			CString result;
			InvokeHelper(0x3f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CenterFooter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_CenterHeader()
		{
			CString result;
			InvokeHelper(0x3f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CenterHeader(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CenterHorizontally()
		{
			BOOL result;
			InvokeHelper(0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CenterHorizontally(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CenterVertically()
		{
			BOOL result;
			InvokeHelper(0x3ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CenterVertically(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ChartSize()
		{
			long result;
			InvokeHelper(0x3f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ChartSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Draft()
		{
			BOOL result;
			InvokeHelper(0x3fc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Draft(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FirstPageNumber()
		{
			long result;
			InvokeHelper(0x3f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FirstPageNumber(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_FitToPagesTall()
		{
			VARIANT result;
			InvokeHelper(0x3f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FitToPagesTall(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FitToPagesWide()
		{
			VARIANT result;
			InvokeHelper(0x3f6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FitToPagesWide(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		double get_FooterMargin()
		{
			double result;
			InvokeHelper(0x3f7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_FooterMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_HeaderMargin()
		{
			double result;
			InvokeHelper(0x3f8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_HeaderMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LeftFooter()
		{
			CString result;
			InvokeHelper(0x3f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LeftFooter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LeftHeader()
		{
			CString result;
			InvokeHelper(0x3fa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LeftHeader(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_LeftMargin()
		{
			double result;
			InvokeHelper(0x3e7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_LeftMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Order()
		{
			long result;
			InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Order(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PaperSize()
		{
			long result;
			InvokeHelper(0x3ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PaperSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_PrintArea()
		{
			CString result;
			InvokeHelper(0x3fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PrintArea(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PrintGridlines()
		{
			BOOL result;
			InvokeHelper(0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintGridlines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PrintHeadings()
		{
			BOOL result;
			InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintHeadings(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PrintNotes()
		{
			BOOL result;
			InvokeHelper(0x3fd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintNotes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_PrintQuality(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3fe, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_PrintQuality(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		CString get_PrintTitleColumns()
		{
			CString result;
			InvokeHelper(0x3ff, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PrintTitleColumns(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_PrintTitleRows()
		{
			CString result;
			InvokeHelper(0x400, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PrintTitleRows(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x400, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_RightFooter()
		{
			CString result;
			InvokeHelper(0x401, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_RightFooter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_RightHeader()
		{
			CString result;
			InvokeHelper(0x402, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_RightHeader(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_RightMargin()
		{
			double result;
			InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_RightMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_TopMargin()
		{
			double result;
			InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_TopMargin(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x3e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Zoom()
		{
			VARIANT result;
			InvokeHelper(0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Zoom(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_PrintComments()
		{
			long result;
			InvokeHelper(0x5f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PrintComments(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PrintErrors()
		{
			long result;
			InvokeHelper(0x865, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PrintErrors(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x865, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_CenterHeaderPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x866, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CenterFooterPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x867, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LeftHeaderPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x868, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LeftFooterPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x869, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RightHeaderPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x86a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RightFooterPicture()
		{
			LPDISPATCH result;
			InvokeHelper(0x86b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_OddAndEvenPagesHeaderFooter()
		{
			BOOL result;
			InvokeHelper(0xa28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_OddAndEvenPagesHeaderFooter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DifferentFirstPageHeaderFooter()
		{
			BOOL result;
			InvokeHelper(0xa29, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DifferentFirstPageHeaderFooter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ScaleWithDocHeaderFooter()
		{
			BOOL result;
			InvokeHelper(0xa2a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ScaleWithDocHeaderFooter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AlignMarginsHeaderFooter()
		{
			BOOL result;
			InvokeHelper(0xa2b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AlignMarginsHeaderFooter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Pages()
		{
			LPDISPATCH result;
			InvokeHelper(0xa2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_EvenPage()
		{
			LPDISPATCH result;
			InvokeHelper(0xa2d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_FirstPage()
		{
			LPDISPATCH result;
			InvokeHelper(0xa2e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// PageSetup properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPane wrapper class

	class CPane : public COleDispatchDriver
	{
	public:
		CPane(){} // Calls COleDispatchDriver default constructor
		CPane(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPane(const CPane& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Pane methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL Activate()
		{
			BOOL result;
			InvokeHelper(0x130, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT LargeScroll(VARIANT& Down, VARIANT& Up, VARIANT& ToRight, VARIANT& ToLeft)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Down, &Up, &ToRight, &ToLeft);
			return result;
		}
		long get_ScrollColumn()
		{
			long result;
			InvokeHelper(0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScrollColumn(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ScrollRow()
		{
			long result;
			InvokeHelper(0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScrollRow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT SmallScroll(VARIANT& Down, VARIANT& Up, VARIANT& ToRight, VARIANT& ToLeft)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Down, &Up, &ToRight, &ToLeft);
			return result;
		}
		LPDISPATCH get_VisibleRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ScrollIntoView(long Left, long Top, long Width, long Height, VARIANT& Start)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Left, Top, Width, Height, &Start);
		}
		long PointsToScreenPixelsX(long Points)
		{
			long result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f0, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Points);
			return result;
		}
		long PointsToScreenPixelsY(long Points)
		{
			long result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Points);
			return result;
		}

		// Pane properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPanes wrapper class

	class CPanes : public COleDispatchDriver
	{
	public:
		CPanes(){} // Calls COleDispatchDriver default constructor
		CPanes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPanes(const CPanes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Panes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}

		// Panes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CParameter wrapper class

	class CParameter : public COleDispatchDriver
	{
	public:
		CParameter(){} // Calls COleDispatchDriver default constructor
		CParameter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CParameter(const CParameter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Parameter methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DataType()
		{
			long result;
			InvokeHelper(0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DataType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x2d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_PromptString()
		{
			CString result;
			InvokeHelper(0x63f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value()
		{
			VARIANT result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SourceRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x640, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SetParam(long Type, VARIANT& Value)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x641, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Value);
		}
		BOOL get_RefreshOnChange()
		{
			BOOL result;
			InvokeHelper(0x757, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RefreshOnChange(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x757, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Parameter properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CParameters wrapper class

	class CParameters : public COleDispatchDriver
	{
	public:
		CParameters(){} // Calls COleDispatchDriver default constructor
		CParameters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CParameters(const CParameters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Parameters methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, VARIANT& iDataType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &iDataType);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Parameters properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPhonetic wrapper class

	class CPhonetic : public COleDispatchDriver
	{
	public:
		CPhonetic(){} // Calls COleDispatchDriver default constructor
		CPhonetic(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPhonetic(const CPhonetic& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Phonetic methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CharacterType()
		{
			long result;
			InvokeHelper(0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CharacterType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Alignment()
		{
			long result;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Alignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Phonetic properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPhonetics wrapper class

	class CPhonetics : public COleDispatchDriver
	{
	public:
		CPhonetics(){} // Calls COleDispatchDriver default constructor
		CPhonetics(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPhonetics(const CPhonetics& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Phonetics methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Start()
		{
			long result;
			InvokeHelper(0x260, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Length()
		{
			long result;
			InvokeHelper(0x261, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CharacterType()
		{
			long result;
			InvokeHelper(0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CharacterType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Alignment()
		{
			long result;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Alignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Add(long Start, long Length, LPCTSTR Text)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Start, Length, Text);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Phonetics properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPicture wrapper class

	class CPicture : public COleDispatchDriver
	{
	public:
		CPicture(){} // Calls COleDispatchDriver default constructor
		CPicture(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPicture(const CPicture& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Picture methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Picture properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPictureFormat wrapper class

	class CPictureFormat : public COleDispatchDriver
	{
	public:
		CPictureFormat(){} // Calls COleDispatchDriver default constructor
		CPictureFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPictureFormat(const CPictureFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PictureFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void IncrementBrightness(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementContrast(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		float get_Brightness()
		{
			float result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Brightness(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ColorType()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ColorType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Contrast()
		{
			float result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Contrast(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropBottom()
		{
			float result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropBottom(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropLeft()
		{
			float result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropLeft(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropRight()
		{
			float result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropRight(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_CropTop()
		{
			float result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_CropTop(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TransparencyColor()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TransparencyColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TransparentBackground()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TransparentBackground(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PictureFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPictures wrapper class

	class CPictures : public COleDispatchDriver
	{
	public:
		CPictures(){} // Calls COleDispatchDriver default constructor
		CPictures(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPictures(const CPictures& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Pictures methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Insert(LPCTSTR Filename, VARIANT& Converter)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xfc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &Converter);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Paste(VARIANT& Link)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Link);
			return result;
		}

		// Pictures properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotAxis wrapper class

	class CPivotAxis : public COleDispatchDriver
	{
	public:
		CPivotAxis(){} // Calls COleDispatchDriver default constructor
		CPivotAxis(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotAxis(const CPivotAxis& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotAxis methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotLines()
		{
			LPDISPATCH result;
			InvokeHelper(0xa7d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// PivotAxis properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotCache wrapper class

	class CPivotCache : public COleDispatchDriver
	{
	public:
		CPivotCache(){} // Calls COleDispatchDriver default constructor
		CPivotCache(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotCache(const CPivotCache& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotCache methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BackgroundQuery()
		{
			BOOL result;
			InvokeHelper(0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundQuery(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Connection()
		{
			VARIANT result;
			InvokeHelper(0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Connection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_EnableRefresh()
		{
			BOOL result;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_MemoryUsed()
		{
			long result;
			InvokeHelper(0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_OptimizeCache()
		{
			BOOL result;
			InvokeHelper(0x594, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_OptimizeCache(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x594, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RecordCount()
		{
			long result;
			InvokeHelper(0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		DATE get_RefreshDate()
		{
			DATE result;
			InvokeHelper(0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
			return result;
		}
		CString get_RefreshName()
		{
			CString result;
			InvokeHelper(0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_RefreshOnFileOpen()
		{
			BOOL result;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RefreshOnFileOpen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Sql()
		{
			VARIANT result;
			InvokeHelper(0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Sql(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_SavePassword()
		{
			BOOL result;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SavePassword(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_SourceData()
		{
			VARIANT result;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_SourceData(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_CommandText()
		{
			VARIANT result;
			InvokeHelper(0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CommandText(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_CommandType()
		{
			long result;
			InvokeHelper(0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CommandType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_QueryType()
		{
			long result;
			InvokeHelper(0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_MaintainConnection()
		{
			BOOL result;
			InvokeHelper(0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MaintainConnection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RefreshPeriod()
		{
			long result;
			InvokeHelper(0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RefreshPeriod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Recordset()
		{
			LPDISPATCH result;
			InvokeHelper(0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_Recordset(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}
		void ResetTimer()
		{
			InvokeHelper(0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_LocalConnection()
		{
			VARIANT result;
			InvokeHelper(0x72b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_LocalConnection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x72b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH CreatePivotTable(VARIANT& TableDestination, VARIANT& TableName, VARIANT& ReadData, VARIANT& DefaultVersion)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x72c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &TableDestination, &TableName, &ReadData, &DefaultVersion);
			return result;
		}
		BOOL get_UseLocalConnection()
		{
			BOOL result;
			InvokeHelper(0x72d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseLocalConnection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x72d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ADOConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0x81a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_IsConnected()
		{
			BOOL result;
			InvokeHelper(0x81b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void MakeConnection()
		{
			InvokeHelper(0x81c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_OLAP()
		{
			BOOL result;
			InvokeHelper(0x81d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_SourceType()
		{
			long result;
			InvokeHelper(0x2ad, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_MissingItemsLimit()
		{
			long result;
			InvokeHelper(0x81e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MissingItemsLimit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x81e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceConnectionFile()
		{
			CString result;
			InvokeHelper(0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceConnectionFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceDataFile()
		{
			CString result;
			InvokeHelper(0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_RobustConnect()
		{
			long result;
			InvokeHelper(0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RobustConnect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SaveAsODC(LPCTSTR ODCFileName, VARIANT& Description, VARIANT& Keywords)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x822, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ODCFileName, &Description, &Keywords);
		}
		LPDISPATCH get_WorkbookConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Version()
		{
			long result;
			InvokeHelper(0x188, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_UpgradeOnRefresh()
		{
			BOOL result;
			InvokeHelper(0x9f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UpgradeOnRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PivotCache properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotCaches wrapper class

	class CPivotCaches : public COleDispatchDriver
	{
	public:
		CPivotCaches(){} // Calls COleDispatchDriver default constructor
		CPivotCaches(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotCaches(const CPivotCaches& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotCaches methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(long SourceType, VARIANT& SourceData)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SourceType, &SourceData);
			return result;
		}
		LPDISPATCH Create(long SourceType, VARIANT& SourceData, VARIANT& Version)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x768, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SourceType, &SourceData, &Version);
			return result;
		}

		// PivotCaches properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotCell wrapper class

	class CPivotCell : public COleDispatchDriver
	{
	public:
		CPivotCell(){} // Calls COleDispatchDriver default constructor
		CPivotCell(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotCell(const CPivotCell& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotCell methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_PivotCellType()
		{
			long result;
			InvokeHelper(0x88d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataField()
		{
			LPDISPATCH result;
			InvokeHelper(0x82b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotField()
		{
			LPDISPATCH result;
			InvokeHelper(0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotItem()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RowItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x88e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ColumnItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x88f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Dummy18()
		{
			CString result;
			InvokeHelper(0x8f7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_CustomSubtotalFunction()
		{
			long result;
			InvokeHelper(0x891, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotRowLine()
		{
			LPDISPATCH result;
			InvokeHelper(0xa71, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotColumnLine()
		{
			LPDISPATCH result;
			InvokeHelper(0xa72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// PivotCell properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotField wrapper class

	class CPivotField : public COleDispatchDriver
	{
	public:
		CPivotField(){} // Calls COleDispatchDriver default constructor
		CPivotField(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotField(const CPivotField& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotField methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Calculation()
		{
			long result;
			InvokeHelper(0x13c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Calculation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x13c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ChildField()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ChildItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT get_CurrentPage()
		{
			VARIANT result;
			InvokeHelper(0x2e2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CurrentPage(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_DataRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DataType()
		{
			long result;
			InvokeHelper(0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__Default(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Function()
		{
			long result;
			InvokeHelper(0x383, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Function(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x383, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_GroupLevel()
		{
			VARIANT result;
			InvokeHelper(0x2d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HiddenItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_LabelRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NumberFormat()
		{
			CString result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowAllItems()
		{
			BOOL result;
			InvokeHelper(0x1c4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowAllItems(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x1c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ParentField()
		{
			LPDISPATCH result;
			InvokeHelper(0x2dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ParentItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT PivotItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2e1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT get_Position()
		{
			VARIANT result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Position(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_SourceName()
		{
			CString result;
			InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Subtotals(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Subtotals(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		VARIANT get_BaseField()
		{
			VARIANT result;
			InvokeHelper(0x2de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_BaseField(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_BaseItem()
		{
			VARIANT result;
			InvokeHelper(0x2df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_BaseItem(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TotalLevels()
		{
			VARIANT result;
			InvokeHelper(0x2d4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Value(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VisibleItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH CalculatedItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x5e3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_DragToColumn()
		{
			BOOL result;
			InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToHide()
		{
			BOOL result;
			InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToHide(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToPage()
		{
			BOOL result;
			InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToPage(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToRow()
		{
			BOOL result;
			InvokeHelper(0x5e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToRow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DragToData()
		{
			BOOL result;
			InvokeHelper(0x734, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DragToData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x734, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsCalculated()
		{
			BOOL result;
			InvokeHelper(0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_MemoryUsed()
		{
			long result;
			InvokeHelper(0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_ServerBased()
		{
			BOOL result;
			InvokeHelper(0x5e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ServerBased(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _AutoSort(long Order, LPCTSTR Field)
		{
			static BYTE parms[] = VTS_I4 VTS_BSTR ;
			InvokeHelper(0xa13, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Order, Field);
		}
		void AutoShow(long Type, long Range, long Count, LPCTSTR Field)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_BSTR ;
			InvokeHelper(0x5eb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, Range, Count, Field);
		}
		long get_AutoSortOrder()
		{
			long result;
			InvokeHelper(0x5ec, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_AutoSortField()
		{
			CString result;
			InvokeHelper(0x5ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_AutoShowType()
		{
			long result;
			InvokeHelper(0x5ee, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_AutoShowRange()
		{
			long result;
			InvokeHelper(0x5ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_AutoShowCount()
		{
			long result;
			InvokeHelper(0x5f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_AutoShowField()
		{
			CString result;
			InvokeHelper(0x5f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_LayoutBlankLine()
		{
			BOOL result;
			InvokeHelper(0x735, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LayoutBlankLine(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x735, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LayoutSubtotalLocation()
		{
			long result;
			InvokeHelper(0x736, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LayoutSubtotalLocation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x736, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_LayoutPageBreak()
		{
			BOOL result;
			InvokeHelper(0x737, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LayoutPageBreak(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x737, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LayoutForm()
		{
			long result;
			InvokeHelper(0x738, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LayoutForm(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x738, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SubtotalName()
		{
			CString result;
			InvokeHelper(0x739, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SubtotalName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x739, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DrilledDown()
		{
			BOOL result;
			InvokeHelper(0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DrilledDown(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_CubeField()
		{
			LPDISPATCH result;
			InvokeHelper(0x73b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_CurrentPageName()
		{
			CString result;
			InvokeHelper(0x73c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CurrentPageName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x73c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StandardFormula()
		{
			CString result;
			InvokeHelper(0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StandardFormula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HiddenItemsList()
		{
			VARIANT result;
			InvokeHelper(0x85b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HiddenItemsList(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x85b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_DatabaseSort()
		{
			BOOL result;
			InvokeHelper(0x85c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DatabaseSort(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x85c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsMemberProperty()
		{
			BOOL result;
			InvokeHelper(0x85d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PropertyParentField()
		{
			LPDISPATCH result;
			InvokeHelper(0x85e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_PropertyOrder()
		{
			long result;
			InvokeHelper(0x85f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PropertyOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableItemSelection()
		{
			BOOL result;
			InvokeHelper(0x860, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableItemSelection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x860, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_CurrentPageList()
		{
			VARIANT result;
			InvokeHelper(0x861, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CurrentPageList(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x861, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void AddPageItem(LPCTSTR Item, VARIANT& ClearList)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x862, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Item, &ClearList);
		}
		BOOL get_Hidden()
		{
			BOOL result;
			InvokeHelper(0x10c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Hidden(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void DrillTo(LPCTSTR Field)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa14, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Field);
		}
		BOOL get_UseMemberPropertyAsCaption()
		{
			BOOL result;
			InvokeHelper(0xa15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseMemberPropertyAsCaption(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_MemberPropertyCaption()
		{
			CString result;
			InvokeHelper(0xa16, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_MemberPropertyCaption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayAsTooltip()
		{
			BOOL result;
			InvokeHelper(0xa17, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayAsTooltip(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayInReport()
		{
			BOOL result;
			InvokeHelper(0xa18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayInReport(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayAsCaption()
		{
			BOOL result;
			InvokeHelper(0xa19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_LayoutCompactRow()
		{
			BOOL result;
			InvokeHelper(0xa1a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LayoutCompactRow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeNewItemsInFilter()
		{
			BOOL result;
			InvokeHelper(0xa1b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeNewItemsInFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VisibleItemsList()
		{
			VARIANT result;
			InvokeHelper(0xa1c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VisibleItemsList(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_PivotFilters()
		{
			LPDISPATCH result;
			InvokeHelper(0xa1d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AutoSortPivotLine()
		{
			LPDISPATCH result;
			InvokeHelper(0xa1e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_AutoSortCustomSubtotal()
		{
			long result;
			InvokeHelper(0xa1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowingInAxis()
		{
			BOOL result;
			InvokeHelper(0xa20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_EnableMultiplePageItems()
		{
			BOOL result;
			InvokeHelper(0x888, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableMultiplePageItems(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x888, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AllItemsVisible()
		{
			BOOL result;
			InvokeHelper(0xa21, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void ClearManualFilter()
		{
			InvokeHelper(0xa22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ClearAllFilters()
		{
			InvokeHelper(0xa01, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ClearValueFilters()
		{
			InvokeHelper(0xa23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ClearLabelFilters()
		{
			InvokeHelper(0xa24, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void AutoSort(long Order, LPCTSTR Field, VARIANT& PivotLine, VARIANT& CustomSubtotal)
		{
			static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5ea, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Order, Field, &PivotLine, &CustomSubtotal);
		}
		CString get_SourceCaption()
		{
			CString result;
			InvokeHelper(0xa27, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowDetail()
		{
			BOOL result;
			InvokeHelper(0x249, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowDetail(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PivotField properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotFields wrapper class

	class CPivotFields : public COleDispatchDriver
	{
	public:
		CPivotFields(){} // Calls COleDispatchDriver default constructor
		CPivotFields(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotFields(const CPivotFields& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotFields methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// PivotFields properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotFilter wrapper class

	class CPivotFilter : public COleDispatchDriver
	{
	public:
		CPivotFilter(){} // Calls COleDispatchDriver default constructor
		CPivotFilter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotFilter(const CPivotFilter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotFilter methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Order()
		{
			long result;
			InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Order(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FilterType()
		{
			long result;
			InvokeHelper(0xa7e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Description()
		{
			CString result;
			InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Active()
		{
			BOOL result;
			InvokeHelper(0x908, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotField()
		{
			LPDISPATCH result;
			InvokeHelper(0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataField()
		{
			LPDISPATCH result;
			InvokeHelper(0x82b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataCubeField()
		{
			LPDISPATCH result;
			InvokeHelper(0xa7f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value1()
		{
			VARIANT result;
			InvokeHelper(0xa80, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value2()
		{
			VARIANT result;
			InvokeHelper(0x56c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MemberPropertyField()
		{
			LPDISPATCH result;
			InvokeHelper(0xa81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_IsMemberPropertyFilter()
		{
			BOOL result;
			InvokeHelper(0xa82, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// PivotFilter properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotFilters wrapper class

	class CPivotFilters : public COleDispatchDriver
	{
	public:
		CPivotFilters(){} // Calls COleDispatchDriver default constructor
		CPivotFilters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotFilters(const CPivotFilters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotFilters methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(long Type, VARIANT& DataField, VARIANT& Value1, VARIANT& Value2, VARIANT& Order, VARIANT& Name, VARIANT& Description, VARIANT& MemberPropertyField)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, &DataField, &Value1, &Value2, &Order, &Name, &Description, &MemberPropertyField);
			return result;
		}

		// PivotFilters properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotFormula wrapper class

	class CPivotFormula : public COleDispatchDriver
	{
	public:
		CPivotFormula(){} // Calls COleDispatchDriver default constructor
		CPivotFormula(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotFormula(const CPivotFormula& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotFormula methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__Default(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Value(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Index(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StandardFormula()
		{
			CString result;
			InvokeHelper(0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StandardFormula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PivotFormula properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotFormulas wrapper class

	class CPivotFormulas : public COleDispatchDriver
	{
	public:
		CPivotFormulas(){} // Calls COleDispatchDriver default constructor
		CPivotFormulas(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotFormulas(const CPivotFormulas& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotFormulas methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Add(LPCTSTR Formula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Formula);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Formula, VARIANT& UseStandardFormula)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Formula, &UseStandardFormula);
			return result;
		}

		// PivotFormulas properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotItem wrapper class

	class CPivotItem : public COleDispatchDriver
	{
	public:
		CPivotItem(){} // Calls COleDispatchDriver default constructor
		CPivotItem(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotItem(const CPivotItem& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotItem methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ChildItems(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_DataRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__Default(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_LabelRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ParentItem()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ParentShowDetail()
		{
			BOOL result;
			InvokeHelper(0x2e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowDetail()
		{
			BOOL result;
			InvokeHelper(0x249, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowDetail(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_SourceName()
		{
			VARIANT result;
			InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Value(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_IsCalculated()
		{
			BOOL result;
			InvokeHelper(0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_RecordCount()
		{
			long result;
			InvokeHelper(0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DrilledDown()
		{
			BOOL result;
			InvokeHelper(0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DrilledDown(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_StandardFormula()
		{
			CString result;
			InvokeHelper(0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StandardFormula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceNameStandard()
		{
			CString result;
			InvokeHelper(0x864, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void DrillTo(LPCTSTR Field)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa14, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Field);
		}

		// PivotItem properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotItemList wrapper class

	class CPivotItemList : public COleDispatchDriver
	{
	public:
		CPivotItemList(){} // Calls COleDispatchDriver default constructor
		CPivotItemList(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotItemList(const CPivotItemList& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotItemList methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Field)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Field);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// PivotItemList properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotItems wrapper class

	class CPivotItems : public COleDispatchDriver
	{
	public:
		CPivotItems(){} // Calls COleDispatchDriver default constructor
		CPivotItems(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotItems(const CPivotItems& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotItems methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Add(LPCTSTR Name)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// PivotItems properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotLayout wrapper class

	class CPivotLayout : public COleDispatchDriver
	{
	public:
		CPivotLayout(){} // Calls COleDispatchDriver default constructor
		CPivotLayout(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotLayout(const CPivotLayout& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotLayout methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ColumnFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_DataFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_PageFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_RowFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_HiddenFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_VisibleFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_PivotFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_CubeFields()
		{
			LPDISPATCH result;
			InvokeHelper(0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotCache()
		{
			LPDISPATCH result;
			InvokeHelper(0x5d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_InnerDetail()
		{
			CString result;
			InvokeHelper(0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_InnerDetail(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void AddFields(VARIANT& RowFields, VARIANT& ColumnFields, VARIANT& PageFields, VARIANT& AppendField)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2c4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &RowFields, &ColumnFields, &PageFields, &AppendField);
		}

		// PivotLayout properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotLine wrapper class

	class CPivotLine : public COleDispatchDriver
	{
	public:
		CPivotLine(){} // Calls COleDispatchDriver default constructor
		CPivotLine(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotLine(const CPivotLine& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotLine methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_LineType()
		{
			long result;
			InvokeHelper(0xa7b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotLineCells()
		{
			LPDISPATCH result;
			InvokeHelper(0xa7c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// PivotLine properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotLineCells wrapper class

	class CPivotLineCells : public COleDispatchDriver
	{
	public:
		CPivotLineCells(){} // Calls COleDispatchDriver default constructor
		CPivotLineCells(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotLineCells(const CPivotLineCells& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotLineCells methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// PivotLineCells properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotLines wrapper class

	class CPivotLines : public COleDispatchDriver
	{
	public:
		CPivotLines(){} // Calls COleDispatchDriver default constructor
		CPivotLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotLines(const CPivotLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotLines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// PivotLines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotTable wrapper class

	class CPivotTable : public COleDispatchDriver
	{
	public:
		CPivotTable(){} // Calls COleDispatchDriver default constructor
		CPivotTable(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotTable(const CPivotTable& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotTable methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT AddFields(VARIANT& RowFields, VARIANT& ColumnFields, VARIANT& PageFields, VARIANT& AddToTable)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2c4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &RowFields, &ColumnFields, &PageFields, &AddToTable);
			return result;
		}
		LPDISPATCH get_ColumnFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_ColumnGrand()
		{
			BOOL result;
			InvokeHelper(0x2b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ColumnGrand(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ColumnRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2be, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ShowPages(VARIANT& PageField)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &PageField);
			return result;
		}
		LPDISPATCH get_DataBodyRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2c1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_DataLabelRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2c0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__Default(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasAutoFormat()
		{
			BOOL result;
			InvokeHelper(0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasAutoFormat(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_HiddenFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		CString get_InnerDetail()
		{
			CString result;
			InvokeHelper(0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_InnerDetail(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PageFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_PageRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2bf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PageRangeCells()
		{
			LPDISPATCH result;
			InvokeHelper(0x5ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH PivotFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ce, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		DATE get_RefreshDate()
		{
			DATE result;
			InvokeHelper(0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
			return result;
		}
		CString get_RefreshName()
		{
			CString result;
			InvokeHelper(0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL RefreshTable()
		{
			BOOL result;
			InvokeHelper(0x2cd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RowFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_RowGrand()
		{
			BOOL result;
			InvokeHelper(0x2b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RowGrand(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_RowRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x2bd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_SaveData()
		{
			BOOL result;
			InvokeHelper(0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_SourceData()
		{
			VARIANT result;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_SourceData(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_TableRange1()
		{
			LPDISPATCH result;
			InvokeHelper(0x2bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TableRange2()
		{
			LPDISPATCH result;
			InvokeHelper(0x2bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Value(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_VisibleFields(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_CacheIndex()
		{
			long result;
			InvokeHelper(0x5cb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CacheIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH CalculatedFields()
		{
			LPDISPATCH result;
			InvokeHelper(0x5cc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayErrorString()
		{
			BOOL result;
			InvokeHelper(0x5cd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayErrorString(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayNullString()
		{
			BOOL result;
			InvokeHelper(0x5ce, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayNullString(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableDrilldown()
		{
			BOOL result;
			InvokeHelper(0x5cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableDrilldown(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableFieldDialog()
		{
			BOOL result;
			InvokeHelper(0x5d0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableFieldDialog(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableWizard()
		{
			BOOL result;
			InvokeHelper(0x5d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableWizard(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ErrorString()
		{
			CString result;
			InvokeHelper(0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ErrorString(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double GetData(LPCTSTR Name)
		{
			double result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5d3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Name);
			return result;
		}
		void ListFormulas()
		{
			InvokeHelper(0x5d4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ManualUpdate()
		{
			BOOL result;
			InvokeHelper(0x5d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ManualUpdate(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MergeLabels()
		{
			BOOL result;
			InvokeHelper(0x5d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MergeLabels(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NullString()
		{
			CString result;
			InvokeHelper(0x5d7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NullString(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH PivotCache()
		{
			LPDISPATCH result;
			InvokeHelper(0x5d8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotFormulas()
		{
			LPDISPATCH result;
			InvokeHelper(0x5d9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PivotTableWizard(VARIANT& SourceType, VARIANT& SourceData, VARIANT& TableDestination, VARIANT& TableName, VARIANT& RowGrand, VARIANT& ColumnGrand, VARIANT& SaveData, VARIANT& HasAutoFormat, VARIANT& AutoPage, VARIANT& Reserved, VARIANT& BackgroundQuery, VARIANT& OptimizeCache, VARIANT& PageFieldOrder, VARIANT& PageFieldWrapCount, VARIANT& ReadData, VARIANT& Connection)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2ac, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage, &Reserved, &BackgroundQuery, &OptimizeCache, &PageFieldOrder, &PageFieldWrapCount, &ReadData, &Connection);
		}
		BOOL get_SubtotalHiddenPageItems()
		{
			BOOL result;
			InvokeHelper(0x5da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SubtotalHiddenPageItems(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PageFieldOrder()
		{
			long result;
			InvokeHelper(0x595, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PageFieldOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x595, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_PageFieldStyle()
		{
			CString result;
			InvokeHelper(0x5db, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PageFieldStyle(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PageFieldWrapCount()
		{
			long result;
			InvokeHelper(0x596, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PageFieldWrapCount(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x596, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PreserveFormatting()
		{
			BOOL result;
			InvokeHelper(0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PreserveFormatting(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _PivotSelect(LPCTSTR Name, long Mode)
		{
			static BYTE parms[] = VTS_BSTR VTS_I4 ;
			InvokeHelper(0x827, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, Mode);
		}
		CString get_PivotSelection()
		{
			CString result;
			InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PivotSelection(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SelectionMode()
		{
			long result;
			InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SelectionMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TableStyle()
		{
			CString result;
			InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TableStyle(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Tag()
		{
			CString result;
			InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Tag(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Update()
		{
			InvokeHelper(0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_VacatedStyle()
		{
			CString result;
			InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_VacatedStyle(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Format(long Format)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x74, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Format);
		}
		BOOL get_PrintTitles()
		{
			BOOL result;
			InvokeHelper(0x72e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintTitles(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x72e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_CubeFields()
		{
			LPDISPATCH result;
			InvokeHelper(0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_GrandTotalName()
		{
			CString result;
			InvokeHelper(0x730, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_GrandTotalName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x730, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SmallGrid()
		{
			BOOL result;
			InvokeHelper(0x731, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SmallGrid(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x731, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RepeatItemsOnEachPrintedPage()
		{
			BOOL result;
			InvokeHelper(0x732, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RepeatItemsOnEachPrintedPage(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x732, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TotalsAnnotation()
		{
			BOOL result;
			InvokeHelper(0x733, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TotalsAnnotation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x733, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void PivotSelect(LPCTSTR Name, long Mode, VARIANT& UseStandardName)
		{
			static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x5dd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, Mode, &UseStandardName);
		}
		CString get_PivotSelectionStandard()
		{
			CString result;
			InvokeHelper(0x829, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PivotSelectionStandard(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x829, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH GetPivotData(VARIANT& DataField, VARIANT& Field1, VARIANT& Item1, VARIANT& Field2, VARIANT& Item2, VARIANT& Field3, VARIANT& Item3, VARIANT& Field4, VARIANT& Item4, VARIANT& Field5, VARIANT& Item5, VARIANT& Field6, VARIANT& Item6, VARIANT& Field7, VARIANT& Item7, VARIANT& Field8, VARIANT& Item8, VARIANT& Field9, VARIANT& Item9, VARIANT& Field10, VARIANT& Item10, VARIANT& Field11, VARIANT& Item11, VARIANT& Field12, VARIANT& Item12, VARIANT& Field13, VARIANT& Item13, VARIANT& Field14, VARIANT& Item14)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x82a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &DataField, &Field1, &Item1, &Field2, &Item2, &Field3, &Item3, &Field4, &Item4, &Field5, &Item5, &Field6, &Item6, &Field7, &Item7, &Field8, &Item8, &Field9, &Item9, &Field10, &Item10, &Field11, &Item11, &Field12, &Item12, &Field13, &Item13, &Field14, &Item14);
			return result;
		}
		LPDISPATCH get_DataPivotField()
		{
			LPDISPATCH result;
			InvokeHelper(0x848, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_EnableDataValueEditing()
		{
			BOOL result;
			InvokeHelper(0x849, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableDataValueEditing(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x849, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH AddDataField(LPDISPATCH Field, VARIANT& Caption, VARIANT& Function)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x84a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Field, &Caption, &Function);
			return result;
		}
		CString get_MDX()
		{
			CString result;
			InvokeHelper(0x84b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_ViewCalculatedMembers()
		{
			BOOL result;
			InvokeHelper(0x84c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ViewCalculatedMembers(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x84c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_CalculatedMembers()
		{
			LPDISPATCH result;
			InvokeHelper(0x84d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayImmediateItems()
		{
			BOOL result;
			InvokeHelper(0x84e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayImmediateItems(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x84e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Dummy15(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x84f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		BOOL get_EnableFieldList()
		{
			BOOL result;
			InvokeHelper(0x850, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableFieldList(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x850, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_VisualTotals()
		{
			BOOL result;
			InvokeHelper(0x851, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_VisualTotals(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x851, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowPageMultipleItemLabel()
		{
			BOOL result;
			InvokeHelper(0x852, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowPageMultipleItemLabel(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x852, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Version()
		{
			long result;
			InvokeHelper(0x188, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString CreateCubeFile(LPCTSTR File, VARIANT& Measures, VARIANT& Levels, VARIANT& Members, VARIANT& Properties)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x853, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, File, &Measures, &Levels, &Members, &Properties);
			return result;
		}
		BOOL get_DisplayEmptyRow()
		{
			BOOL result;
			InvokeHelper(0x858, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayEmptyRow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x858, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayEmptyColumn()
		{
			BOOL result;
			InvokeHelper(0x859, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayEmptyColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x859, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowCellBackgroundFromOLAP()
		{
			BOOL result;
			InvokeHelper(0x85a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowCellBackgroundFromOLAP(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x85a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PivotColumnAxis()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotRowAxis()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowDrillIndicators()
		{
			BOOL result;
			InvokeHelper(0x9f4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowDrillIndicators(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PrintDrillIndicators()
		{
			BOOL result;
			InvokeHelper(0x9f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintDrillIndicators(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayMemberPropertyTooltips()
		{
			BOOL result;
			InvokeHelper(0x9f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayMemberPropertyTooltips(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayContextTooltips()
		{
			BOOL result;
			InvokeHelper(0x9f7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayContextTooltips(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ClearTable()
		{
			InvokeHelper(0x9f8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_CompactRowIndent()
		{
			long result;
			InvokeHelper(0x9f9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CompactRowIndent(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LayoutRowDefault()
		{
			long result;
			InvokeHelper(0x9fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LayoutRowDefault(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayFieldCaptions()
		{
			BOOL result;
			InvokeHelper(0x9fb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFieldCaptions(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void RowAxisLayout(long RowLayout)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9fc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, RowLayout);
		}
		void SubtotalLocation(long Location)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9fe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Location);
		}
		LPDISPATCH get_ActiveFilters()
		{
			LPDISPATCH result;
			InvokeHelper(0x9ff, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_InGridDropZones()
		{
			BOOL result;
			InvokeHelper(0xa00, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InGridDropZones(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa00, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ClearAllFilters()
		{
			InvokeHelper(0xa01, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_TableStyle2()
		{
			VARIANT result;
			InvokeHelper(0xa02, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TableStyle2(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa02, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_ShowTableStyleLastColumn()
		{
			BOOL result;
			InvokeHelper(0xa03, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleLastColumn(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa03, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleRowStripes()
		{
			BOOL result;
			InvokeHelper(0xa04, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleRowStripes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa04, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleColumnStripes()
		{
			BOOL result;
			InvokeHelper(0xa05, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleColumnStripes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa05, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleRowHeaders()
		{
			BOOL result;
			InvokeHelper(0xa06, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleRowHeaders(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa06, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowTableStyleColumnHeaders()
		{
			BOOL result;
			InvokeHelper(0xa07, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowTableStyleColumnHeaders(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa07, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ConvertToFormulas(BOOL ConvertFilters)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa08, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ConvertFilters);
		}
		BOOL get_AllowMultipleFilters()
		{
			BOOL result;
			InvokeHelper(0xa0a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AllowMultipleFilters(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa0a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_CompactLayoutRowHeader()
		{
			CString result;
			InvokeHelper(0xa0b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CompactLayoutRowHeader(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa0b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_CompactLayoutColumnHeader()
		{
			CString result;
			InvokeHelper(0xa0c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_CompactLayoutColumnHeader(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xa0c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_FieldListSortAscending()
		{
			BOOL result;
			InvokeHelper(0xa0d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FieldListSortAscending(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa0d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SortUsingCustomLists()
		{
			BOOL result;
			InvokeHelper(0xa0e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SortUsingCustomLists(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa0e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ChangeConnection(LPDISPATCH conn)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa0f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, conn);
		}
		void ChangePivotCache(VARIANT& PivotCache)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &PivotCache);
		}
		CString get_Location()
		{
			CString result;
			InvokeHelper(0x575, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Location(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x575, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PivotTable properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPivotTables wrapper class

	class CPivotTables : public COleDispatchDriver
	{
	public:
		CPivotTables(){} // Calls COleDispatchDriver default constructor
		CPivotTables(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPivotTables(const CPivotTables& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PivotTables methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPDISPATCH PivotCache, VARIANT& TableDestination, VARIANT& TableName, VARIANT& ReadData, VARIANT& DefaultVersion)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, PivotCache, &TableDestination, &TableName, &ReadData, &DefaultVersion);
			return result;
		}

		// PivotTables properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPlotArea wrapper class

	class CPlotArea : public COleDispatchDriver
	{
	public:
		CPlotArea(){} // Calls COleDispatchDriver default constructor
		CPlotArea(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPlotArea(const CPlotArea& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PlotArea methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get__InsideLeft()
		{
			double result;
			InvokeHelper(0xa5e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get__InsideTop()
		{
			double result;
			InvokeHelper(0xa5f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get__InsideWidth()
		{
			double result;
			InvokeHelper(0xa60, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get__InsideHeight()
		{
			double result;
			InvokeHelper(0xa61, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_InsideLeft()
		{
			double result;
			InvokeHelper(0x683, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_InsideLeft(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x683, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_InsideTop()
		{
			double result;
			InvokeHelper(0x684, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_InsideTop(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x684, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_InsideWidth()
		{
			double result;
			InvokeHelper(0x685, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_InsideWidth(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x685, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_InsideHeight()
		{
			double result;
			InvokeHelper(0x686, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_InsideHeight(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x686, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// PlotArea properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPoint0 wrapper class

	class CPoint0 : public COleDispatchDriver
	{
	public:
		CPoint0(){} // Calls COleDispatchDriver default constructor
		CPoint0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPoint0(const CPoint0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Point methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT _ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Type, &LegendKey, &AutoText, &HasLeaderLines);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataLabel()
		{
			LPDISPATCH result;
			InvokeHelper(0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Explosion()
		{
			long result;
			InvokeHelper(0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Explosion(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasDataLabel()
		{
			BOOL result;
			InvokeHelper(0x4d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasDataLabel(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_InvertIfNegative()
		{
			BOOL result;
			InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InvertIfNegative(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColor()
		{
			long result;
			InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColorIndex()
		{
			long result;
			InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColor()
		{
			long result;
			InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColorIndex()
		{
			long result;
			InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerSize()
		{
			long result;
			InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerStyle()
		{
			long result;
			InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Paste()
		{
			VARIANT result;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_PictureType()
		{
			long result;
			InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PictureUnit()
		{
			long result;
			InvokeHelper(0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_ApplyPictToSides()
		{
			BOOL result;
			InvokeHelper(0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToSides(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ApplyPictToFront()
		{
			BOOL result;
			InvokeHelper(0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToFront(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ApplyPictToEnd()
		{
			BOOL result;
			InvokeHelper(0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToEnd(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SecondaryPlot()
		{
			BOOL result;
			InvokeHelper(0x67e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SecondaryPlot(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines, VARIANT& ShowSeriesName, VARIANT& ShowCategoryName, VARIANT& ShowValue, VARIANT& ShowPercentage, VARIANT& ShowBubbleSize, VARIANT& Separator)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x782, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Type, &LegendKey, &AutoText, &HasLeaderLines, &ShowSeriesName, &ShowCategoryName, &ShowValue, &ShowPercentage, &ShowBubbleSize, &Separator);
			return result;
		}
		BOOL get_Has3DEffect()
		{
			BOOL result;
			InvokeHelper(0x681, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Has3DEffect(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x681, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_PictureUnit2()
		{
			double result;
			InvokeHelper(0xa59, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit2(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Point properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPoints wrapper class

	class CPoints : public COleDispatchDriver
	{
	public:
		CPoints(){} // Calls COleDispatchDriver default constructor
		CPoints(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPoints(const CPoints& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Points methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}

		// Points properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CProtection wrapper class

	class CProtection : public COleDispatchDriver
	{
	public:
		CProtection(){} // Calls COleDispatchDriver default constructor
		CProtection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CProtection(const CProtection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Protection methods
	public:
		BOOL get_AllowFormattingCells()
		{
			BOOL result;
			InvokeHelper(0x7f0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowFormattingColumns()
		{
			BOOL result;
			InvokeHelper(0x7f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowFormattingRows()
		{
			BOOL result;
			InvokeHelper(0x7f2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowInsertingColumns()
		{
			BOOL result;
			InvokeHelper(0x7f3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowInsertingRows()
		{
			BOOL result;
			InvokeHelper(0x7f4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowInsertingHyperlinks()
		{
			BOOL result;
			InvokeHelper(0x7f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowDeletingColumns()
		{
			BOOL result;
			InvokeHelper(0x7f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowDeletingRows()
		{
			BOOL result;
			InvokeHelper(0x7f7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowSorting()
		{
			BOOL result;
			InvokeHelper(0x7f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowFiltering()
		{
			BOOL result;
			InvokeHelper(0x7f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowUsingPivotTables()
		{
			BOOL result;
			InvokeHelper(0x7fa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_AllowEditRanges()
		{
			LPDISPATCH result;
			InvokeHelper(0x8bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Protection properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPublishObject wrapper class

	class CPublishObject : public COleDispatchDriver
	{
	public:
		CPublishObject(){} // Calls COleDispatchDriver default constructor
		CPublishObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPublishObject(const CPublishObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PublishObject methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Publish(VARIANT& Create)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x767, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Create);
		}
		CString get_DivID()
		{
			CString result;
			InvokeHelper(0x766, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Sheet()
		{
			CString result;
			InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_SourceType()
		{
			long result;
			InvokeHelper(0x2ad, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Source()
		{
			CString result;
			InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_HtmlType()
		{
			long result;
			InvokeHelper(0x765, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HtmlType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x765, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Title()
		{
			CString result;
			InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Title(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Filename()
		{
			CString result;
			InvokeHelper(0x587, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Filename(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x587, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoRepublish()
		{
			BOOL result;
			InvokeHelper(0x882, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoRepublish(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x882, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// PublishObject properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CPublishObjects wrapper class

	class CPublishObjects : public COleDispatchDriver
	{
	public:
		CPublishObjects(){} // Calls COleDispatchDriver default constructor
		CPublishObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CPublishObjects(const CPublishObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// PublishObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(long SourceType, LPCTSTR Filename, VARIANT& Sheet, VARIANT& Source, VARIANT& HtmlType, VARIANT& DivID, VARIANT& Title)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SourceType, Filename, &Sheet, &Source, &HtmlType, &DivID, &Title);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Publish()
		{
			InvokeHelper(0x767, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// PublishObjects properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CQueryTable wrapper class

	class CQueryTable : public COleDispatchDriver
	{
	public:
		CQueryTable(){} // Calls COleDispatchDriver default constructor
		CQueryTable(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CQueryTable(const CQueryTable& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _QueryTable methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_FieldNames()
		{
			BOOL result;
			InvokeHelper(0x630, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FieldNames(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x630, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RowNumbers()
		{
			BOOL result;
			InvokeHelper(0x631, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RowNumbers(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x631, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_FillAdjacentFormulas()
		{
			BOOL result;
			InvokeHelper(0x632, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FillAdjacentFormulas(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x632, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasAutoFormat()
		{
			BOOL result;
			InvokeHelper(0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasAutoFormat(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RefreshOnFileOpen()
		{
			BOOL result;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RefreshOnFileOpen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Refreshing()
		{
			BOOL result;
			InvokeHelper(0x633, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_FetchedRowOverflow()
		{
			BOOL result;
			InvokeHelper(0x634, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_BackgroundQuery()
		{
			BOOL result;
			InvokeHelper(0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundQuery(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void CancelRefresh()
		{
			InvokeHelper(0x635, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_RefreshStyle()
		{
			long result;
			InvokeHelper(0x636, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RefreshStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x636, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableRefresh()
		{
			BOOL result;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SavePassword()
		{
			BOOL result;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SavePassword(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Destination()
		{
			LPDISPATCH result;
			InvokeHelper(0x2a9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Connection()
		{
			VARIANT result;
			InvokeHelper(0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Connection(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Sql()
		{
			VARIANT result;
			InvokeHelper(0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Sql(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_PostText()
		{
			CString result;
			InvokeHelper(0x637, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_PostText(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x637, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ResultRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x638, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL Refresh(VARIANT& BackgroundQuery)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x589, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BackgroundQuery);
			return result;
		}
		LPDISPATCH get_Parameters()
		{
			LPDISPATCH result;
			InvokeHelper(0x639, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Recordset()
		{
			LPDISPATCH result;
			InvokeHelper(0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_Recordset(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SaveData()
		{
			BOOL result;
			InvokeHelper(0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TablesOnlyFromHTML()
		{
			BOOL result;
			InvokeHelper(0x63a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TablesOnlyFromHTML(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x63a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableEditing()
		{
			BOOL result;
			InvokeHelper(0x63b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableEditing(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x63b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextFilePlatform()
		{
			long result;
			InvokeHelper(0x73f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextFilePlatform(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x73f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextFileStartRow()
		{
			long result;
			InvokeHelper(0x740, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextFileStartRow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x740, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextFileParseType()
		{
			long result;
			InvokeHelper(0x741, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextFileParseType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x741, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_TextFileTextQualifier()
		{
			long result;
			InvokeHelper(0x742, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextFileTextQualifier(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x742, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileConsecutiveDelimiter()
		{
			BOOL result;
			InvokeHelper(0x743, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileConsecutiveDelimiter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x743, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileTabDelimiter()
		{
			BOOL result;
			InvokeHelper(0x744, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileTabDelimiter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x744, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileSemicolonDelimiter()
		{
			BOOL result;
			InvokeHelper(0x745, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileSemicolonDelimiter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x745, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileCommaDelimiter()
		{
			BOOL result;
			InvokeHelper(0x746, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileCommaDelimiter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x746, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileSpaceDelimiter()
		{
			BOOL result;
			InvokeHelper(0x747, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileSpaceDelimiter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x747, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TextFileOtherDelimiter()
		{
			CString result;
			InvokeHelper(0x748, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TextFileOtherDelimiter(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x748, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_TextFileColumnDataTypes()
		{
			VARIANT result;
			InvokeHelper(0x749, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TextFileColumnDataTypes(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x749, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_TextFileFixedColumnWidths()
		{
			VARIANT result;
			InvokeHelper(0x74a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TextFileFixedColumnWidths(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x74a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PreserveColumnInfo()
		{
			BOOL result;
			InvokeHelper(0x74b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PreserveColumnInfo(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x74b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PreserveFormatting()
		{
			BOOL result;
			InvokeHelper(0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PreserveFormatting(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AdjustColumnWidth()
		{
			BOOL result;
			InvokeHelper(0x74c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AdjustColumnWidth(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x74c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_CommandText()
		{
			VARIANT result;
			InvokeHelper(0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CommandText(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_CommandType()
		{
			long result;
			InvokeHelper(0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CommandType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFilePromptOnRefresh()
		{
			BOOL result;
			InvokeHelper(0x74d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFilePromptOnRefresh(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x74d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_QueryType()
		{
			long result;
			InvokeHelper(0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_MaintainConnection()
		{
			BOOL result;
			InvokeHelper(0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MaintainConnection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TextFileDecimalSeparator()
		{
			CString result;
			InvokeHelper(0x74e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TextFileDecimalSeparator(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x74e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TextFileThousandsSeparator()
		{
			CString result;
			InvokeHelper(0x74f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TextFileThousandsSeparator(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x74f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RefreshPeriod()
		{
			long result;
			InvokeHelper(0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RefreshPeriod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ResetTimer()
		{
			InvokeHelper(0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_WebSelectionType()
		{
			long result;
			InvokeHelper(0x750, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WebSelectionType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x750, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_WebFormatting()
		{
			long result;
			InvokeHelper(0x751, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WebFormatting(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x751, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_WebTables()
		{
			CString result;
			InvokeHelper(0x752, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_WebTables(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x752, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WebPreFormattedTextToColumns()
		{
			BOOL result;
			InvokeHelper(0x753, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WebPreFormattedTextToColumns(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x753, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WebSingleBlockTextImport()
		{
			BOOL result;
			InvokeHelper(0x754, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WebSingleBlockTextImport(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x754, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WebDisableDateRecognition()
		{
			BOOL result;
			InvokeHelper(0x755, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WebDisableDateRecognition(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x755, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WebConsecutiveDelimitersAsOne()
		{
			BOOL result;
			InvokeHelper(0x756, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WebConsecutiveDelimitersAsOne(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x756, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WebDisableRedirections()
		{
			BOOL result;
			InvokeHelper(0x872, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WebDisableRedirections(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x872, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_EditWebPage()
		{
			VARIANT result;
			InvokeHelper(0x873, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_EditWebPage(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x873, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_SourceConnectionFile()
		{
			CString result;
			InvokeHelper(0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceConnectionFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_SourceDataFile()
		{
			CString result;
			InvokeHelper(0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_SourceDataFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x820, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RobustConnect()
		{
			long result;
			InvokeHelper(0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RobustConnect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_TextFileTrailingMinusNumbers()
		{
			BOOL result;
			InvokeHelper(0x874, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TextFileTrailingMinusNumbers(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x874, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SaveAsODC(LPCTSTR ODCFileName, VARIANT& Description, VARIANT& Keywords)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x822, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ODCFileName, &Description, &Keywords);
		}
		LPDISPATCH get_ListObject()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_TextFileVisualLayout()
		{
			long result;
			InvokeHelper(0x8c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TextFileVisualLayout(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_WorkbookConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sort()
		{
			LPDISPATCH result;
			InvokeHelper(0x370, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// _QueryTable properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CQueryTables wrapper class

	class CQueryTables : public COleDispatchDriver
	{
	public:
		CQueryTables(){} // Calls COleDispatchDriver default constructor
		CQueryTables(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CQueryTables(const CQueryTables& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// QueryTables methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Connection, LPDISPATCH Destination, VARIANT& Sql)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_DISPATCH VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Connection, Destination, &Sql);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// QueryTables properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRange wrapper class

	class CRange : public COleDispatchDriver
	{
	public:
		CRange(){} // Calls COleDispatchDriver default constructor
		CRange(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRange(const CRange& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Range methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Activate()
		{
			VARIANT result;
			InvokeHelper(0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_AddIndent()
		{
			VARIANT result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Address(VARIANT& RowAbsolute, VARIANT& ColumnAbsolute, long ReferenceStyle, VARIANT& External, VARIANT& RelativeTo)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
			return result;
		}
		CString get_AddressLocal(VARIANT& RowAbsolute, VARIANT& ColumnAbsolute, long ReferenceStyle, VARIANT& External, VARIANT& RelativeTo)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1b5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
			return result;
		}
		VARIANT AdvancedFilter(long Action, VARIANT& CriteriaRange, VARIANT& CopyToRange, VARIANT& Unique)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x36c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Action, &CriteriaRange, &CopyToRange, &Unique);
			return result;
		}
		VARIANT ApplyNames(VARIANT& Names, VARIANT& IgnoreRelativeAbsolute, VARIANT& UseRowColumnNames, VARIANT& OmitColumn, VARIANT& OmitRow, long Order, VARIANT& AppendLast)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x1b9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Names, &IgnoreRelativeAbsolute, &UseRowColumnNames, &OmitColumn, &OmitRow, Order, &AppendLast);
			return result;
		}
		VARIANT ApplyOutlineStyles()
		{
			VARIANT result;
			InvokeHelper(0x1c0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Areas()
		{
			LPDISPATCH result;
			InvokeHelper(0x238, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString AutoComplete(LPCTSTR String)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4a1, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, String);
			return result;
		}
		VARIANT AutoFill(LPDISPATCH Destination, long Type)
		{
			VARIANT result;
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x1c1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Destination, Type);
			return result;
		}
		VARIANT AutoFilter(VARIANT& Field, VARIANT& Criteria1, long Operator, VARIANT& Criteria2, VARIANT& VisibleDropDown)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x319, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Field, &Criteria1, Operator, &Criteria2, &VisibleDropDown);
			return result;
		}
		VARIANT AutoFit()
		{
			VARIANT result;
			InvokeHelper(0xed, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT AutoFormat(long Format, VARIANT& Number, VARIANT& Font, VARIANT& Alignment, VARIANT& Border, VARIANT& Pattern, VARIANT& Width)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x72, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Format, &Number, &Font, &Alignment, &Border, &Pattern, &Width);
			return result;
		}
		VARIANT AutoOutline()
		{
			VARIANT result;
			InvokeHelper(0x40c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT BorderAround(VARIANT& LineStyle, long Weight, long ColorIndex, VARIANT& Color)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x42b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &LineStyle, Weight, ColorIndex, &Color);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Calculate()
		{
			VARIANT result;
			InvokeHelper(0x117, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Cells()
		{
			LPDISPATCH result;
			InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		VARIANT Clear()
		{
			VARIANT result;
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearContents()
		{
			VARIANT result;
			InvokeHelper(0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearNotes()
		{
			VARIANT result;
			InvokeHelper(0xef, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearOutline()
		{
			VARIANT result;
			InvokeHelper(0x40d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Column()
		{
			long result;
			InvokeHelper(0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH ColumnDifferences(VARIANT& Comparison)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1fe, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Comparison);
			return result;
		}
		LPDISPATCH get_Columns()
		{
			LPDISPATCH result;
			InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ColumnWidth()
		{
			VARIANT result;
			InvokeHelper(0xf2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ColumnWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xf2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT Consolidate(VARIANT& Sources, VARIANT& Function, VARIANT& TopRow, VARIANT& LeftColumn, VARIANT& CreateLinks)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1e2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Sources, &Function, &TopRow, &LeftColumn, &CreateLinks);
			return result;
		}
		VARIANT Copy(VARIANT& Destination)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Destination);
			return result;
		}
		long CopyFromRecordset(LPUNKNOWN Data, VARIANT& MaxRows, VARIANT& MaxColumns)
		{
			long result;
			static BYTE parms[] = VTS_UNKNOWN VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x480, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Data, &MaxRows, &MaxColumns);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT CreateNames(VARIANT& Top, VARIANT& Left, VARIANT& Bottom, VARIANT& Right)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1c9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Top, &Left, &Bottom, &Right);
			return result;
		}
		VARIANT CreatePublisher(VARIANT& Edition, long Appearance, VARIANT& ContainsPICT, VARIANT& ContainsBIFF, VARIANT& ContainsRTF, VARIANT& ContainsVALU)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1ca, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Edition, Appearance, &ContainsPICT, &ContainsBIFF, &ContainsRTF, &ContainsVALU);
			return result;
		}
		LPDISPATCH get_CurrentArray()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CurrentRegion()
		{
			LPDISPATCH result;
			InvokeHelper(0xf3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Cut(VARIANT& Destination)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Destination);
			return result;
		}
		VARIANT DataSeries(VARIANT& Rowcol, long Type, long Date, VARIANT& Step, VARIANT& Stop, VARIANT& Trend)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1d0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Rowcol, Type, Date, &Step, &Stop, &Trend);
			return result;
		}
		VARIANT get__Default(VARIANT& RowIndex, VARIANT& ColumnIndex)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &RowIndex, &ColumnIndex);
			return result;
		}
		void put__Default(VARIANT& RowIndex, VARIANT& ColumnIndex, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &RowIndex, &ColumnIndex, &newValue);
		}
		VARIANT Delete(VARIANT& Shift)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Shift);
			return result;
		}
		LPDISPATCH get_Dependents()
		{
			LPDISPATCH result;
			InvokeHelper(0x21f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT _DialogBox()
		{
			VARIANT result;
			InvokeHelper(0xf5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DirectDependents()
		{
			LPDISPATCH result;
			InvokeHelper(0x221, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DirectPrecedents()
		{
			LPDISPATCH result;
			InvokeHelper(0x222, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT EditionOptions(long Type, long Option, VARIANT& Name, VARIANT& Reference, long Appearance, long ChartSize, VARIANT& Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x46b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Type, Option, &Name, &Reference, Appearance, ChartSize, &Format);
			return result;
		}
		LPDISPATCH get_End(long Direction)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1f4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Direction);
			return result;
		}
		LPDISPATCH get_EntireColumn()
		{
			LPDISPATCH result;
			InvokeHelper(0xf6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_EntireRow()
		{
			LPDISPATCH result;
			InvokeHelper(0xf7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT FillDown()
		{
			VARIANT result;
			InvokeHelper(0xf8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT FillLeft()
		{
			VARIANT result;
			InvokeHelper(0xf9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT FillRight()
		{
			VARIANT result;
			InvokeHelper(0xfa, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT FillUp()
		{
			VARIANT result;
			InvokeHelper(0xfb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Find(VARIANT& What, VARIANT& After, VARIANT& LookIn, VARIANT& LookAt, VARIANT& SearchOrder, long SearchDirection, VARIANT& MatchCase, VARIANT& MatchByte, VARIANT& SearchFormat)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x18e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &What, &After, &LookIn, &LookAt, &SearchOrder, SearchDirection, &MatchCase, &MatchByte, &SearchFormat);
			return result;
		}
		LPDISPATCH FindNext(VARIANT& After)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x18f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &After);
			return result;
		}
		LPDISPATCH FindPrevious(VARIANT& After)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x190, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &After);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Formula()
		{
			VARIANT result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Formula(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FormulaArray()
		{
			VARIANT result;
			InvokeHelper(0x24a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FormulaArray(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x24a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_FormulaLabel()
		{
			long result;
			InvokeHelper(0x564, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FormulaLabel(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x564, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_FormulaHidden()
		{
			VARIANT result;
			InvokeHelper(0x106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FormulaHidden(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FormulaLocal()
		{
			VARIANT result;
			InvokeHelper(0x107, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FormulaLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FormulaR1C1()
		{
			VARIANT result;
			InvokeHelper(0x108, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FormulaR1C1(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_FormulaR1C1Local()
		{
			VARIANT result;
			InvokeHelper(0x109, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_FormulaR1C1Local(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT FunctionWizard()
		{
			VARIANT result;
			InvokeHelper(0x23b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL GoalSeek(VARIANT& Goal, LPDISPATCH ChangingCell)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_DISPATCH ;
			InvokeHelper(0x1d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Goal, ChangingCell);
			return result;
		}
		VARIANT Group(VARIANT& Start, VARIANT& End, VARIANT& By, VARIANT& Periods)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Start, &End, &By, &Periods);
			return result;
		}
		VARIANT get_HasArray()
		{
			VARIANT result;
			InvokeHelper(0x10a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_HasFormula()
		{
			VARIANT result;
			InvokeHelper(0x10b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Height()
		{
			VARIANT result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Hidden()
		{
			VARIANT result;
			InvokeHelper(0x10c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Hidden(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_IndentLevel()
		{
			VARIANT result;
			InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_IndentLevel(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void InsertIndent(long InsertAmount)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x565, DISPATCH_METHOD, VT_EMPTY, NULL, parms, InsertAmount);
		}
		VARIANT Insert(VARIANT& Shift, VARIANT& CopyOrigin)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Shift, &CopyOrigin);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Item(VARIANT& RowIndex, VARIANT& ColumnIndex)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &RowIndex, &ColumnIndex);
			return result;
		}
		void put_Item(VARIANT& RowIndex, VARIANT& ColumnIndex, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &RowIndex, &ColumnIndex, &newValue);
		}
		VARIANT Justify()
		{
			VARIANT result;
			InvokeHelper(0x1ef, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Left()
		{
			VARIANT result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_ListHeaderRows()
		{
			long result;
			InvokeHelper(0x4a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT ListNames()
		{
			VARIANT result;
			InvokeHelper(0xfd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_LocationInTable()
		{
			long result;
			InvokeHelper(0x2b3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Locked()
		{
			VARIANT result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Locked(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void Merge(VARIANT& Across)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x234, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Across);
		}
		void UnMerge()
		{
			InvokeHelper(0x568, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_MergeArea()
		{
			LPDISPATCH result;
			InvokeHelper(0x569, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_MergeCells()
		{
			VARIANT result;
			InvokeHelper(0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_MergeCells(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Name()
		{
			VARIANT result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Name(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT NavigateArrow(VARIANT& TowardPrecedent, VARIANT& ArrowNumber, VARIANT& LinkNumber)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x408, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &TowardPrecedent, &ArrowNumber, &LinkNumber);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString NoteText(VARIANT& Text, VARIANT& Start, VARIANT& Length)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x467, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Text, &Start, &Length);
			return result;
		}
		VARIANT get_NumberFormat()
		{
			VARIANT result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_NumberFormatLocal()
		{
			VARIANT result;
			InvokeHelper(0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Offset(VARIANT& RowOffset, VARIANT& ColumnOffset)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xfe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &RowOffset, &ColumnOffset);
			return result;
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_OutlineLevel()
		{
			VARIANT result;
			InvokeHelper(0x10f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_OutlineLevel(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x10f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_PageBreak()
		{
			long result;
			InvokeHelper(0xff, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PageBreak(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Parse(VARIANT& ParseLine, VARIANT& Destination)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1dd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &ParseLine, &Destination);
			return result;
		}
		VARIANT _PasteSpecial(long Paste, long Operation, VARIANT& SkipBlanks, VARIANT& Transpose)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Paste, Operation, &SkipBlanks, &Transpose);
			return result;
		}
		LPDISPATCH get_PivotField()
		{
			LPDISPATCH result;
			InvokeHelper(0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotItem()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_PivotTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Precedents()
		{
			LPDISPATCH result;
			InvokeHelper(0x220, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_PrefixCharacter()
		{
			VARIANT result;
			InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
			return result;
		}
		VARIANT PrintPreview(VARIANT& EnableChanges)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &EnableChanges);
			return result;
		}
		LPDISPATCH get_QueryTable()
		{
			LPDISPATCH result;
			InvokeHelper(0x56a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Cell1, VARIANT& Cell2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Cell1, &Cell2);
			return result;
		}
		VARIANT RemoveSubtotal()
		{
			VARIANT result;
			InvokeHelper(0x373, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL Replace(VARIANT& What, VARIANT& Replacement, VARIANT& LookAt, VARIANT& SearchOrder, VARIANT& MatchCase, VARIANT& MatchByte, VARIANT& SearchFormat, VARIANT& ReplaceFormat)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &What, &Replacement, &LookAt, &SearchOrder, &MatchCase, &MatchByte, &SearchFormat, &ReplaceFormat);
			return result;
		}
		LPDISPATCH get_Resize(VARIANT& RowSize, VARIANT& ColumnSize)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x100, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &RowSize, &ColumnSize);
			return result;
		}
		long get_Row()
		{
			long result;
			InvokeHelper(0x101, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH RowDifferences(VARIANT& Comparison)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Comparison);
			return result;
		}
		VARIANT get_RowHeight()
		{
			VARIANT result;
			InvokeHelper(0x110, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_RowHeight(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Rows()
		{
			LPDISPATCH result;
			InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Run(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Show()
		{
			VARIANT result;
			InvokeHelper(0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ShowDependents(VARIANT& Remove)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x36d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Remove);
			return result;
		}
		VARIANT get_ShowDetail()
		{
			VARIANT result;
			InvokeHelper(0x249, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ShowDetail(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT ShowErrors()
		{
			VARIANT result;
			InvokeHelper(0x36e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ShowPrecedents(VARIANT& Remove)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x36f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Remove);
			return result;
		}
		VARIANT get_ShrinkToFit()
		{
			VARIANT result;
			InvokeHelper(0xd1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_ShrinkToFit(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT Sort(VARIANT& Key1, long Order1, VARIANT& Key2, VARIANT& Type, long Order2, VARIANT& Key3, long Order3, long Header, VARIANT& OrderCustom, VARIANT& MatchCase, long Orientation, long SortMethod, long DataOption1, long DataOption2, long DataOption3)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x370, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Key1, Order1, &Key2, &Type, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3);
			return result;
		}
		VARIANT SortSpecial(long SortMethod, VARIANT& Key1, long Order1, VARIANT& Type, VARIANT& Key2, long Order2, VARIANT& Key3, long Order3, long Header, VARIANT& OrderCustom, VARIANT& MatchCase, long Orientation, long DataOption1, long DataOption2, long DataOption3)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x371, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, SortMethod, &Key1, Order1, &Type, &Key2, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation, DataOption1, DataOption2, DataOption3);
			return result;
		}
		LPDISPATCH get_SoundNote()
		{
			LPDISPATCH result;
			InvokeHelper(0x394, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH SpecialCells(long Type, VARIANT& Value)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x19a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, &Value);
			return result;
		}
		VARIANT get_Style()
		{
			VARIANT result;
			InvokeHelper(0x104, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Style(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x104, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT SubscribeTo(LPCTSTR Edition, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR VTS_I4 ;
			InvokeHelper(0x1e1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Edition, Format);
			return result;
		}
		VARIANT Subtotal(long GroupBy, long Function, VARIANT& TotalList, VARIANT& Replace, VARIANT& PageBreaks, long SummaryBelowData)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
			InvokeHelper(0x372, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, GroupBy, Function, &TotalList, &Replace, &PageBreaks, SummaryBelowData);
			return result;
		}
		VARIANT get_Summary()
		{
			VARIANT result;
			InvokeHelper(0x111, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Table(VARIANT& RowInput, VARIANT& ColumnInput)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &RowInput, &ColumnInput);
			return result;
		}
		VARIANT get_Text()
		{
			VARIANT result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT TextToColumns(VARIANT& Destination, long DataType, long TextQualifier, VARIANT& ConsecutiveDelimiter, VARIANT& Tab, VARIANT& Semicolon, VARIANT& Comma, VARIANT& Space, VARIANT& Other, VARIANT& OtherChar, VARIANT& FieldInfo, VARIANT& DecimalSeparator, VARIANT& ThousandsSeparator, VARIANT& TrailingMinusNumbers)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x410, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Destination, DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &DecimalSeparator, &ThousandsSeparator, &TrailingMinusNumbers);
			return result;
		}
		VARIANT get_Top()
		{
			VARIANT result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Ungroup()
		{
			VARIANT result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_UseStandardHeight()
		{
			VARIANT result;
			InvokeHelper(0x112, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_UseStandardHeight(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_UseStandardWidth()
		{
			VARIANT result;
			InvokeHelper(0x113, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_UseStandardWidth(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get_Validation()
		{
			LPDISPATCH result;
			InvokeHelper(0x56b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Value(VARIANT& RangeValueDataType)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &RangeValueDataType);
			return result;
		}
		void put_Value(VARIANT& RangeValueDataType, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &RangeValueDataType, &newValue);
		}
		VARIANT get_Value2()
		{
			VARIANT result;
			InvokeHelper(0x56c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Value2(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x56c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Width()
		{
			VARIANT result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Worksheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x15c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_WrapText()
		{
			VARIANT result;
			InvokeHelper(0x114, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_WrapText(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH AddComment(VARIANT& Text)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x56d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Text);
			return result;
		}
		LPDISPATCH get_Comment()
		{
			LPDISPATCH result;
			InvokeHelper(0x38e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ClearComments()
		{
			InvokeHelper(0x56e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Phonetic()
		{
			LPDISPATCH result;
			InvokeHelper(0x56f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_FormatConditions()
		{
			LPDISPATCH result;
			InvokeHelper(0x570, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Hyperlinks()
		{
			LPDISPATCH result;
			InvokeHelper(0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Phonetics()
		{
			LPDISPATCH result;
			InvokeHelper(0x713, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SetPhonetic()
		{
			InvokeHelper(0x714, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ID()
		{
			CString result;
			InvokeHelper(0x715, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ID(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x715, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
			return result;
		}
		LPDISPATCH get_PivotCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x7dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Dirty()
		{
			InvokeHelper(0x7de, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Errors()
		{
			LPDISPATCH result;
			InvokeHelper(0x7df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SmartTags()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Speak(VARIANT& SpeakDirection, VARIANT& SpeakFormulas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7e1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SpeakDirection, &SpeakFormulas);
		}
		VARIANT PasteSpecial(long Paste, long Operation, VARIANT& SkipBlanks, VARIANT& Transpose)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x788, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Paste, Operation, &SkipBlanks, &Transpose);
			return result;
		}
		BOOL get_AllowEdit()
		{
			BOOL result;
			InvokeHelper(0x7e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ListObject()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_XPath()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ServerActions()
		{
			LPDISPATCH result;
			InvokeHelper(0x9bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void RemoveDuplicates(VARIANT& Columns, long Header)
		{
			static BYTE parms[] = VTS_VARIANT VTS_I4 ;
			InvokeHelper(0x9bc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Columns, Header);
		}
		VARIANT PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
			return result;
		}
		CString get_MDX()
		{
			CString result;
			InvokeHelper(0x84b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void ExportAsFixedFormat(long Type, VARIANT& Filename, VARIANT& Quality, VARIANT& IncludeDocProperties, VARIANT& IgnorePrintAreas, VARIANT& From, VARIANT& To, VARIANT& OpenAfterPublish, VARIANT& FixedFormatExtClassPtr)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Filename, &Quality, &IncludeDocProperties, &IgnorePrintAreas, &From, &To, &OpenAfterPublish, &FixedFormatExtClassPtr);
		}
		VARIANT get_CountLarge()
		{
			VARIANT result;
			InvokeHelper(0x9c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CalculateRowMajorOrder()
		{
			VARIANT result;
			InvokeHelper(0x93c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// Range properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRanges wrapper class

	class CRanges : public COleDispatchDriver
	{
	public:
		CRanges(){} // Calls COleDispatchDriver default constructor
		CRanges(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRanges(const CRanges& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Ranges methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// Ranges properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRecentFile wrapper class

	class CRecentFile : public COleDispatchDriver
	{
	public:
		CRecentFile(){} // Calls COleDispatchDriver default constructor
		CRecentFile(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRecentFile(const CRecentFile& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RecentFile methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Path()
		{
			CString result;
			InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Open()
		{
			LPDISPATCH result;
			InvokeHelper(0x783, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// RecentFile properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRecentFiles wrapper class

	class CRecentFiles : public COleDispatchDriver
	{
	public:
		CRecentFiles(){} // Calls COleDispatchDriver default constructor
		CRecentFiles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRecentFiles(const CRecentFiles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RecentFiles methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Maximum()
		{
			long result;
			InvokeHelper(0x58f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Maximum(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x58f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// RecentFiles properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRectangle wrapper class

	class CRectangle : public COleDispatchDriver
	{
	public:
		CRectangle(){} // Calls COleDispatchDriver default constructor
		CRectangle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRectangle(const CRectangle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Rectangle methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Rectangle properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRectangles wrapper class

	class CRectangles : public COleDispatchDriver
	{
	public:
		CRectangles(){} // Calls COleDispatchDriver default constructor
		CRectangles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRectangles(const CRectangles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Rectangles methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Rectangles properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRectangularGradient wrapper class

	class CRectangularGradient : public COleDispatchDriver
	{
	public:
		CRectangularGradient(){} // Calls COleDispatchDriver default constructor
		CRectangularGradient(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRectangularGradient(const CRectangularGradient& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RectangularGradient methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ColorStops()
		{
			LPDISPATCH result;
			InvokeHelper(0xac9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_RectangleTop()
		{
			double result;
			InvokeHelper(0xaca, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_RectangleTop(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xaca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_RectangleBottom()
		{
			double result;
			InvokeHelper(0xacb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_RectangleBottom(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xacb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_RectangleLeft()
		{
			double result;
			InvokeHelper(0xacc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_RectangleLeft(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xacc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_RectangleRight()
		{
			double result;
			InvokeHelper(0xacd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_RectangleRight(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xacd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// RectangularGradient properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRefreshEvents wrapper class

	class CRefreshEvents : public COleDispatchDriver
	{
	public:
		CRefreshEvents(){} // Calls COleDispatchDriver default constructor
		CRefreshEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRefreshEvents(const CRefreshEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RefreshEvents methods
	public:
		void BeforeRefresh(BOOL * Cancel)
		{
			static BYTE parms[] = VTS_PBOOL ;
			InvokeHelper(0x63c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Cancel);
		}
		void AfterRefresh(BOOL Success)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x63d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Success);
		}

		// RefreshEvents properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CResearch wrapper class

	class CResearch : public COleDispatchDriver
	{
	public:
		CResearch(){} // Calls COleDispatchDriver default constructor
		CResearch(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CResearch(const CResearch& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Research methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Query(LPCTSTR ServiceID, VARIANT& QueryString, VARIANT& QueryLanguage, VARIANT& UseSelection, VARIANT& LaunchQuery)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xabf, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, ServiceID, &QueryString, &QueryLanguage, &UseSelection, &LaunchQuery);
			return result;
		}
		BOOL IsResearchService(LPCTSTR ServiceID)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xac5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ServiceID);
			return result;
		}
		VARIANT SetLanguagePair(long LanguageFrom, long LanguageTo)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xac6, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, LanguageFrom, LanguageTo);
			return result;
		}

		// Research properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRoutingSlip wrapper class

	class CRoutingSlip : public COleDispatchDriver
	{
	public:
		CRoutingSlip(){} // Calls COleDispatchDriver default constructor
		CRoutingSlip(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRoutingSlip(const CRoutingSlip& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RoutingSlip methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Delivery()
		{
			long result;
			InvokeHelper(0x3bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Delivery(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Message()
		{
			VARIANT result;
			InvokeHelper(0x3ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Message(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Recipients(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Recipients(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		VARIANT Reset()
		{
			VARIANT result;
			InvokeHelper(0x22b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_ReturnWhenDone()
		{
			BOOL result;
			InvokeHelper(0x3bc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ReturnWhenDone(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Status()
		{
			long result;
			InvokeHelper(0x3be, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Subject()
		{
			VARIANT result;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Subject(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_TrackStatus()
		{
			BOOL result;
			InvokeHelper(0x3bd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TrackStatus(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// RoutingSlip properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRTD wrapper class

	class CRTD : public COleDispatchDriver
	{
	public:
		CRTD(){} // Calls COleDispatchDriver default constructor
		CRTD(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRTD(const CRTD& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// RTD methods
	public:
		long get_ThrottleInterval()
		{
			long result;
			InvokeHelper(0x8c0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThrottleInterval(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void RefreshData()
		{
			InvokeHelper(0x8c1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RestartServers()
		{
			InvokeHelper(0x8c2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// RTD properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRtdServer wrapper class

	class CRtdServer : public COleDispatchDriver
	{
	public:
		CRtdServer(){} // Calls COleDispatchDriver default constructor
		CRtdServer(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRtdServer(const CRtdServer& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IRtdServer methods
	public:
		long ServerStart(LPDISPATCH CallbackObject)
		{
			long result;
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms, CallbackObject);
			return result;
		}
		VARIANT ConnectData(long TopicID, SAFEARRAY * * Strings, BOOL * GetNewValues)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_UNKNOWN VTS_PBOOL ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, TopicID, Strings, GetNewValues);
			return result;
		}
		SAFEARRAY * RefreshData(long * TopicCount)
		{
			static BYTE parms[] = VTS_PI4 ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TopicCount);
		}
		void DisconnectData(long TopicID)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TopicID);
		}
		long Heartbeat()
		{
			long result;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
			return result;
		}
		void ServerTerminate()
		{
			InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// IRtdServer properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CRTDUpdateEvent wrapper class

	class CRTDUpdateEvent : public COleDispatchDriver
	{
	public:
		CRTDUpdateEvent(){} // Calls COleDispatchDriver default constructor
		CRTDUpdateEvent(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CRTDUpdateEvent(const CRTDUpdateEvent& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// IRTDUpdateEvent methods
	public:
		void UpdateNotify()
		{
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_HeartbeatInterval()
		{
			long result;
			InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HeartbeatInterval(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Disconnect()
		{
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// IRTDUpdateEvent properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CScenario wrapper class

	class CScenario : public COleDispatchDriver
	{
	public:
		CScenario(){} // Calls COleDispatchDriver default constructor
		CScenario(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CScenario(const CScenario& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Scenario methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ChangeScenario(VARIANT& ChangingCells, VARIANT& Values)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x390, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &ChangingCells, &Values);
			return result;
		}
		LPDISPATCH get_ChangingCells()
		{
			LPDISPATCH result;
			InvokeHelper(0x38f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Comment()
		{
			CString result;
			InvokeHelper(0x38e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Comment(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x38e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_Hidden()
		{
			BOOL result;
			InvokeHelper(0x10c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Hidden(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Show()
		{
			VARIANT result;
			InvokeHelper(0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Values(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}

		// Scenario properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CScenarios wrapper class

	class CScenarios : public COleDispatchDriver
	{
	public:
		CScenarios(){} // Calls COleDispatchDriver default constructor
		CScenarios(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CScenarios(const CScenarios& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Scenarios methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, VARIANT& ChangingCells, VARIANT& Values, VARIANT& Comment, VARIANT& Locked, VARIANT& Hidden)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &ChangingCells, &Values, &Comment, &Locked, &Hidden);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT CreateSummary(long ReportType, VARIANT& ResultCells)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x391, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, ReportType, &ResultCells);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT Merge(VARIANT& Source)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Source);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Scenarios properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CScrollBar0 wrapper class

	class CScrollBar0 : public COleDispatchDriver
	{
	public:
		CScrollBar0(){} // Calls COleDispatchDriver default constructor
		CScrollBar0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CScrollBar0(const CScrollBar0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ScrollBar methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LargeChange()
		{
			long result;
			InvokeHelper(0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LargeChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ScrollBar properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CScrollBars wrapper class

	class CScrollBars : public COleDispatchDriver
	{
	public:
		CScrollBars(){} // Calls COleDispatchDriver default constructor
		CScrollBars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CScrollBars(const CScrollBars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ScrollBars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_LargeChange()
		{
			long result;
			InvokeHelper(0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LargeChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// ScrollBars properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSeries wrapper class

	class CSeries : public COleDispatchDriver
	{
	public:
		CSeries(){} // Calls COleDispatchDriver default constructor
		CSeries(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSeries(const CSeries& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Series methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT _ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Type, &LegendKey, &AutoText, &HasLeaderLines);
			return result;
		}
		long get_AxisGroup()
		{
			long result;
			InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AxisGroup(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH DataLabels(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ErrorBar(long Direction, long Include, long Type, VARIANT& Amount, VARIANT& MinusValues)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x98, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Direction, Include, Type, &Amount, &MinusValues);
			return result;
		}
		LPDISPATCH get_ErrorBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Explosion()
		{
			long result;
			InvokeHelper(0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Explosion(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FormulaLocal()
		{
			CString result;
			InvokeHelper(0x107, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_FormulaLocal(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FormulaR1C1()
		{
			CString result;
			InvokeHelper(0x108, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_FormulaR1C1(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FormulaR1C1Local()
		{
			CString result;
			InvokeHelper(0x109, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_FormulaR1C1Local(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasDataLabels()
		{
			BOOL result;
			InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasDataLabels(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasErrorBars()
		{
			BOOL result;
			InvokeHelper(0xa0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasErrorBars(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_InvertIfNegative()
		{
			BOOL result;
			InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InvertIfNegative(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColor()
		{
			long result;
			InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerBackgroundColorIndex()
		{
			long result;
			InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerBackgroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColor()
		{
			long result;
			InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerForegroundColorIndex()
		{
			long result;
			InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerForegroundColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerSize()
		{
			long result;
			InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_MarkerStyle()
		{
			long result;
			InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_MarkerStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Paste()
		{
			VARIANT result;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_PictureType()
		{
			long result;
			InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PictureUnit()
		{
			long result;
			InvokeHelper(0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PlotOrder()
		{
			long result;
			InvokeHelper(0xe4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PlotOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Points(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x46, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_Smooth()
		{
			BOOL result;
			InvokeHelper(0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Smooth(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Trendlines(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ChartType()
		{
			long result;
			InvokeHelper(0x578, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ChartType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x578, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ApplyCustomType(long ChartType)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x579, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ChartType);
		}
		VARIANT get_Values()
		{
			VARIANT result;
			InvokeHelper(0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Values(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_XValues()
		{
			VARIANT result;
			InvokeHelper(0x457, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_XValues(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x457, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_BubbleSizes()
		{
			VARIANT result;
			InvokeHelper(0x680, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_BubbleSizes(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x680, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_BarShape()
		{
			long result;
			InvokeHelper(0x57b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BarShape(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x57b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ApplyPictToSides()
		{
			BOOL result;
			InvokeHelper(0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToSides(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ApplyPictToFront()
		{
			BOOL result;
			InvokeHelper(0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToFront(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ApplyPictToEnd()
		{
			BOOL result;
			InvokeHelper(0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ApplyPictToEnd(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Has3DEffect()
		{
			BOOL result;
			InvokeHelper(0x681, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Has3DEffect(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x681, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasLeaderLines()
		{
			BOOL result;
			InvokeHelper(0x572, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasLeaderLines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x572, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_LeaderLines()
		{
			LPDISPATCH result;
			InvokeHelper(0x682, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ApplyDataLabels(long Type, VARIANT& LegendKey, VARIANT& AutoText, VARIANT& HasLeaderLines, VARIANT& ShowSeriesName, VARIANT& ShowCategoryName, VARIANT& ShowValue, VARIANT& ShowPercentage, VARIANT& ShowBubbleSize, VARIANT& Separator)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x782, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Type, &LegendKey, &AutoText, &HasLeaderLines, &ShowSeriesName, &ShowCategoryName, &ShowValue, &ShowPercentage, &ShowBubbleSize, &Separator);
			return result;
		}
		double get_PictureUnit2()
		{
			double result;
			InvokeHelper(0xa59, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit2(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Series properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSeriesCollection wrapper class

	class CSeriesCollection : public COleDispatchDriver
	{
	public:
		CSeriesCollection(){} // Calls COleDispatchDriver default constructor
		CSeriesCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSeriesCollection(const CSeriesCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SeriesCollection methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Source, long Rowcol, VARIANT& SeriesLabels, VARIANT& CategoryLabels, VARIANT& Replace)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, Rowcol, &SeriesLabels, &CategoryLabels, &Replace);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT Extend(VARIANT& Source, VARIANT& Rowcol, VARIANT& CategoryLabels)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xe3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Source, &Rowcol, &CategoryLabels);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		VARIANT Paste(long Rowcol, VARIANT& SeriesLabels, VARIANT& CategoryLabels, VARIANT& Replace, VARIANT& NewSeries)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Rowcol, &SeriesLabels, &CategoryLabels, &Replace, &NewSeries);
			return result;
		}
		LPDISPATCH NewSeries()
		{
			LPDISPATCH result;
			InvokeHelper(0x45d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// SeriesCollection properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSeriesLines wrapper class

	class CSeriesLines : public COleDispatchDriver
	{
	public:
		CSeriesLines(){} // Calls COleDispatchDriver default constructor
		CSeriesLines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSeriesLines(const CSeriesLines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SeriesLines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// SeriesLines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CServerViewableItems wrapper class

	class CServerViewableItems : public COleDispatchDriver
	{
	public:
		CServerViewableItems(){} // Calls COleDispatchDriver default constructor
		CServerViewableItems(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CServerViewableItems(const CServerViewableItems& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ServerViewableItems methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Obj)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Obj);
			return result;
		}
		void Delete(VARIANT& Index)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Index);
		}
		void DeleteAll()
		{
			InvokeHelper(0x8bf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// ServerViewableItems properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShadowFormat wrapper class

	class CShadowFormat : public COleDispatchDriver
	{
	public:
		CShadowFormat(){} // Calls COleDispatchDriver default constructor
		CShadowFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShadowFormat(const CShadowFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ShadowFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void IncrementOffsetX(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementOffsetY(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		LPDISPATCH get_ForeColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void put_ForeColor(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Obscured()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Obscured(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_OffsetX()
		{
			float result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_OffsetX(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_OffsetY()
		{
			float result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_OffsetY(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Transparency()
		{
			float result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Transparency(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Style()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Style(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Blur()
		{
			float result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Blur(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Size()
		{
			float result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Size(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RotateWithShape()
		{
			long result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RotateWithShape(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ShadowFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShape wrapper class

	class CShape : public COleDispatchDriver
	{
	public:
		CShape(){} // Calls COleDispatchDriver default constructor
		CShape(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShape(const CShape& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Shape methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Apply()
		{
			InvokeHelper(0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Flip(long FlipCmd)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FlipCmd);
		}
		void IncrementLeft(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementRotation(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x690, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementTop(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x691, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void PickUp()
		{
			InvokeHelper(0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RerouteConnections()
		{
			InvokeHelper(0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ScaleHeight(float Factor, long RelativeToOriginalSize, VARIANT& Scale)
		{
			static BYTE parms[] = VTS_R4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x694, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Factor, RelativeToOriginalSize, &Scale);
		}
		void ScaleWidth(float Factor, long RelativeToOriginalSize, VARIANT& Scale)
		{
			static BYTE parms[] = VTS_R4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x698, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Factor, RelativeToOriginalSize, &Scale);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void SetShapesDefaultProperties()
		{
			InvokeHelper(0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Ungroup()
		{
			LPDISPATCH result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ZOrder(long ZOrderCmd)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ZOrderCmd);
		}
		LPDISPATCH get_Adjustments()
		{
			LPDISPATCH result;
			InvokeHelper(0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextFrame()
		{
			LPDISPATCH result;
			InvokeHelper(0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_AutoShapeType()
		{
			long result;
			InvokeHelper(0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoShapeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Callout()
		{
			LPDISPATCH result;
			InvokeHelper(0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ConnectionSiteCount()
		{
			long result;
			InvokeHelper(0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Connector()
		{
			long result;
			InvokeHelper(0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ConnectorFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_GroupItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Height()
		{
			float result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Height(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HorizontalFlip()
		{
			long result;
			InvokeHelper(0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_Left()
		{
			float result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Left(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Line()
		{
			LPDISPATCH result;
			InvokeHelper(0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_LockAspectRatio()
		{
			long result;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LockAspectRatio(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Nodes()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Rotation()
		{
			float result;
			InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Rotation(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PictureFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shadow()
		{
			LPDISPATCH result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextEffect()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ThreeD()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Top()
		{
			float result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Top(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_VerticalFlip()
		{
			long result;
			InvokeHelper(0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Vertices()
		{
			VARIANT result;
			InvokeHelper(0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Width()
		{
			float result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Width(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrderPosition()
		{
			long result;
			InvokeHelper(0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Hyperlink()
		{
			LPDISPATCH result;
			InvokeHelper(0x6aa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_BlackWhiteMode()
		{
			long result;
			InvokeHelper(0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BlackWhiteMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_DrawingObject()
		{
			LPDISPATCH result;
			InvokeHelper(0x6ac, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Placement()
		{
			long result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Placement(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Copy()
		{
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Cut()
		{
			InvokeHelper(0x235, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CopyPicture(VARIANT& Appearance, VARIANT& Format)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Appearance, &Format);
		}
		LPDISPATCH get_ControlFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x6ad, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_LinkFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x6ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_OLEFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x6af, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_FormControlType()
		{
			long result;
			InvokeHelper(0x6b0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_AlternativeText()
		{
			CString result;
			InvokeHelper(0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_AlternativeText(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Script()
		{
			LPDISPATCH result;
			InvokeHelper(0x764, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DiagramNode()
		{
			LPDISPATCH result;
			InvokeHelper(0x875, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasDiagramNode()
		{
			long result;
			InvokeHelper(0x876, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Diagram()
		{
			LPDISPATCH result;
			InvokeHelper(0x877, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasDiagram()
		{
			long result;
			InvokeHelper(0x878, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Child()
		{
			long result;
			InvokeHelper(0x879, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ParentGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x87a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CanvasItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x87b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ID()
		{
			long result;
			InvokeHelper(0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void CanvasCropLeft(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropTop(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropRight(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropBottom(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		LPDISPATCH get_Chart()
		{
			LPDISPATCH result;
			InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasChart()
		{
			long result;
			InvokeHelper(0xa62, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextFrame2()
		{
			LPDISPATCH result;
			InvokeHelper(0xa63, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ShapeStyle()
		{
			long result;
			InvokeHelper(0xa64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ShapeStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BackgroundStyle()
		{
			long result;
			InvokeHelper(0xa65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SoftEdge()
		{
			LPDISPATCH result;
			InvokeHelper(0xa66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Glow()
		{
			LPDISPATCH result;
			InvokeHelper(0xa67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Reflection()
		{
			LPDISPATCH result;
			InvokeHelper(0xa68, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Shape properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShapeNode wrapper class

	class CShapeNode : public COleDispatchDriver
	{
	public:
		CShapeNode(){} // Calls COleDispatchDriver default constructor
		CShapeNode(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShapeNode(const CShapeNode& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ShapeNode methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_EditingType()
		{
			long result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Points()
		{
			VARIANT result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_SegmentType()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}

		// ShapeNode properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShapeNodes wrapper class

	class CShapeNodes : public COleDispatchDriver
	{
	public:
		CShapeNodes(){} // Calls COleDispatchDriver default constructor
		CShapeNodes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShapeNodes(const CShapeNodes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ShapeNodes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Delete(long Index)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index);
		}
		void Insert(long Index, long SegmentType, long EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
		}
		void SetEditingType(long Index, long EditingType)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, EditingType);
		}
		void SetPosition(long Index, float X1, float Y1)
		{
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 ;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, X1, Y1);
		}
		void SetSegmentType(long Index, long SegmentType)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index, SegmentType);
		}

		// ShapeNodes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShapeRange wrapper class

	class CShapeRange : public COleDispatchDriver
	{
	public:
		CShapeRange(){} // Calls COleDispatchDriver default constructor
		CShapeRange(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShapeRange(const CShapeRange& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ShapeRange methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Align(long AlignCmd, long RelativeTo)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x6cc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, AlignCmd, RelativeTo);
		}
		void Apply()
		{
			InvokeHelper(0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Distribute(long DistributeCmd, long RelativeTo)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x6ce, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DistributeCmd, RelativeTo);
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Flip(long FlipCmd)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FlipCmd);
		}
		void IncrementLeft(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementRotation(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x690, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementTop(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x691, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PickUp()
		{
			InvokeHelper(0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RerouteConnections()
		{
			InvokeHelper(0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Regroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x6d0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ScaleHeight(float Factor, long RelativeToOriginalSize, VARIANT& Scale)
		{
			static BYTE parms[] = VTS_R4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x694, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Factor, RelativeToOriginalSize, &Scale);
		}
		void ScaleWidth(float Factor, long RelativeToOriginalSize, VARIANT& Scale)
		{
			static BYTE parms[] = VTS_R4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x698, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Factor, RelativeToOriginalSize, &Scale);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void SetShapesDefaultProperties()
		{
			InvokeHelper(0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Ungroup()
		{
			LPDISPATCH result;
			InvokeHelper(0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ZOrder(long ZOrderCmd)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ZOrderCmd);
		}
		LPDISPATCH get_Adjustments()
		{
			LPDISPATCH result;
			InvokeHelper(0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextFrame()
		{
			LPDISPATCH result;
			InvokeHelper(0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_AutoShapeType()
		{
			long result;
			InvokeHelper(0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoShapeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Callout()
		{
			LPDISPATCH result;
			InvokeHelper(0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ConnectionSiteCount()
		{
			long result;
			InvokeHelper(0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Connector()
		{
			long result;
			InvokeHelper(0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ConnectorFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_GroupItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Height()
		{
			float result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Height(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HorizontalFlip()
		{
			long result;
			InvokeHelper(0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_Left()
		{
			float result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Left(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Line()
		{
			LPDISPATCH result;
			InvokeHelper(0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_LockAspectRatio()
		{
			long result;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_LockAspectRatio(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Nodes()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Rotation()
		{
			float result;
			InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Rotation(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PictureFormat()
		{
			LPDISPATCH result;
			InvokeHelper(0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Shadow()
		{
			LPDISPATCH result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextEffect()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ThreeD()
		{
			LPDISPATCH result;
			InvokeHelper(0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_Top()
		{
			float result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Top(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_VerticalFlip()
		{
			long result;
			InvokeHelper(0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Vertices()
		{
			VARIANT result;
			InvokeHelper(0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Width()
		{
			float result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Width(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrderPosition()
		{
			long result;
			InvokeHelper(0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_BlackWhiteMode()
		{
			long result;
			InvokeHelper(0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BlackWhiteMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_AlternativeText()
		{
			CString result;
			InvokeHelper(0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_AlternativeText(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_DiagramNode()
		{
			LPDISPATCH result;
			InvokeHelper(0x875, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasDiagramNode()
		{
			long result;
			InvokeHelper(0x876, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Diagram()
		{
			LPDISPATCH result;
			InvokeHelper(0x877, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasDiagram()
		{
			long result;
			InvokeHelper(0x878, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Child()
		{
			long result;
			InvokeHelper(0x879, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ParentGroup()
		{
			LPDISPATCH result;
			InvokeHelper(0x87a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CanvasItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x87b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ID()
		{
			long result;
			InvokeHelper(0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void CanvasCropLeft(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropTop(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropRight(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void CanvasCropBottom(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x87f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		LPDISPATCH get_Chart()
		{
			LPDISPATCH result;
			InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasChart()
		{
			long result;
			InvokeHelper(0xa62, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextFrame2()
		{
			LPDISPATCH result;
			InvokeHelper(0xa63, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ShapeStyle()
		{
			long result;
			InvokeHelper(0xa64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ShapeStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BackgroundStyle()
		{
			long result;
			InvokeHelper(0xa65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BackgroundStyle(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SoftEdge()
		{
			LPDISPATCH result;
			InvokeHelper(0xa66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Glow()
		{
			LPDISPATCH result;
			InvokeHelper(0xa67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Reflection()
		{
			LPDISPATCH result;
			InvokeHelper(0xa68, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// ShapeRange properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CShapes wrapper class

	class CShapes : public COleDispatchDriver
	{
	public:
		CShapes(){} // Calls COleDispatchDriver default constructor
		CShapes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CShapes(const CShapes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Shapes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH AddCallout(long Type, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddConnector(long Type, float BeginX, float BeginY, float EndX, float EndY)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, BeginX, BeginY, EndX, EndY);
			return result;
		}
		LPDISPATCH AddCurve(VARIANT& SafeArrayOfPoints)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6b7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &SafeArrayOfPoints);
			return result;
		}
		LPDISPATCH AddLabel(long Orientation, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6b9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Orientation, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddLine(float BeginX, float BeginY, float EndX, float EndY)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6ba, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, BeginX, BeginY, EndX, EndY);
			return result;
		}
		LPDISPATCH AddPicture(LPCTSTR Filename, long LinkToFile, long SaveWithDocument, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6bb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddPolyline(VARIANT& SafeArrayOfPoints)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x6be, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &SafeArrayOfPoints);
			return result;
		}
		LPDISPATCH AddShape(long Type, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddTextEffect(long PresetTextEffect, LPCTSTR Text, LPCTSTR FontName, float FontSize, long FontBold, long FontItalic, float Left, float Top)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BSTR VTS_R4 VTS_I4 VTS_I4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6c0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top);
			return result;
		}
		LPDISPATCH AddTextbox(long Orientation, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6c6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Orientation, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH BuildFreeform(long EditingType, float X1, float Y1)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x6c7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, EditingType, X1, Y1);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void SelectAll()
		{
			InvokeHelper(0x6c9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH AddFormControl(long Type, long Left, long Top, long Width, long Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
			InvokeHelper(0x6ca, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddOLEObject(VARIANT& ClassType, VARIANT& Filename, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel, VARIANT& Left, VARIANT& Top, VARIANT& Width, VARIANT& Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6cb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
			return result;
		}
		LPDISPATCH AddDiagram(long Type, float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x880, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddCanvas(float Left, float Top, float Width, float Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R4 VTS_R4 VTS_R4 VTS_R4 ;
			InvokeHelper(0x881, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		LPDISPATCH AddChart(VARIANT& XlChartType, VARIANT& Left, VARIANT& Top, VARIANT& Width, VARIANT& Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xa69, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &XlChartType, &Left, &Top, &Width, &Height);
			return result;
		}

		// Shapes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSheets wrapper class

	class CSheets : public COleDispatchDriver
	{
	public:
		CSheets(){} // Calls COleDispatchDriver default constructor
		CSheets(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSheets(const CSheets& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Sheets methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Before, VARIANT& After, VARIANT& Count, VARIANT& Type)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Before, &After, &Count, &Type);
			return result;
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void FillAcrossSheets(LPDISPATCH Range, long Type)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x1d5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range, Type);
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Visible()
		{
			VARIANT result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Visible(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName, VARIANT& IgnorePrintAreas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName, &IgnorePrintAreas);
		}

		// Sheets properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSheetViews wrapper class

	class CSheetViews : public COleDispatchDriver
	{
	public:
		CSheetViews(){} // Calls COleDispatchDriver default constructor
		CSheetViews(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSheetViews(const CSheetViews& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SheetViews methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// SheetViews properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard


	class CSmartTag : public COleDispatchDriver
	{
	public:
		CSmartTag(){} // Calls COleDispatchDriver default constructor
		CSmartTag(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTag(const CSmartTag& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTag methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_DownloadURL()
		{
			CString result;
			InvokeHelper(0x8a4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_XML()
		{
			CString result;
			InvokeHelper(0x8a5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Range()
		{
			LPDISPATCH result;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_SmartTagActions()
		{
			LPDISPATCH result;
			InvokeHelper(0x8a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Properties()
		{
			LPDISPATCH result;
			InvokeHelper(0x857, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// SmartTag properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTagAction wrapper class

	class CSmartTagAction : public COleDispatchDriver
	{
	public:
		CSmartTagAction(){} // Calls COleDispatchDriver default constructor
		CSmartTagAction(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTagAction(const CSmartTagAction& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTagAction methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Execute()
		{
			InvokeHelper(0x8a3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_PresentInPane()
		{
			BOOL result;
			InvokeHelper(0x8f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ExpandHelp()
		{
			BOOL result;
			InvokeHelper(0x8fa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ExpandHelp(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_CheckboxState()
		{
			BOOL result;
			InvokeHelper(0x8fb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CheckboxState(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_TextboxText()
		{
			CString result;
			InvokeHelper(0x8fc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_TextboxText(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ListSelection()
		{
			long result;
			InvokeHelper(0x8fd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ListSelection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RadioGroupSelection()
		{
			long result;
			InvokeHelper(0x8fe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RadioGroupSelection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ActiveXControl()
		{
			LPDISPATCH result;
			InvokeHelper(0x8ff, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// SmartTagAction properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTagActions wrapper class

	class CSmartTagActions : public COleDispatchDriver
	{
	public:
		CSmartTagActions(){} // Calls COleDispatchDriver default constructor
		CSmartTagActions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTagActions(const CSmartTagActions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTagActions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// SmartTagActions properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTagOptions wrapper class

	class CSmartTagOptions : public COleDispatchDriver
	{
	public:
		CSmartTagOptions(){} // Calls COleDispatchDriver default constructor
		CSmartTagOptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTagOptions(const CSmartTagOptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTagOptions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DisplaySmartTags()
		{
			long result;
			InvokeHelper(0x8aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DisplaySmartTags(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EmbedSmartTags()
		{
			BOOL result;
			InvokeHelper(0x8ab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EmbedSmartTags(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// SmartTagOptions properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTagRecognizer wrapper class

	class CSmartTagRecognizer : public COleDispatchDriver
	{
	public:
		CSmartTagRecognizer(){} // Calls COleDispatchDriver default constructor
		CSmartTagRecognizer(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTagRecognizer(const CSmartTagRecognizer& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTagRecognizer methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_progID()
		{
			CString result;
			InvokeHelper(0x8a8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_FullName()
		{
			CString result;
			InvokeHelper(0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// SmartTagRecognizer properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTagRecognizers wrapper class

	class CSmartTagRecognizers : public COleDispatchDriver
	{
	public:
		CSmartTagRecognizers(){} // Calls COleDispatchDriver default constructor
		CSmartTagRecognizers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTagRecognizers(const CSmartTagRecognizers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTagRecognizers methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		BOOL get_Recognize()
		{
			BOOL result;
			InvokeHelper(0x8a9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Recognize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// SmartTagRecognizers properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSmartTags wrapper class

	class CSmartTags : public COleDispatchDriver
	{
	public:
		CSmartTags(){} // Calls COleDispatchDriver default constructor
		CSmartTags(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSmartTags(const CSmartTags& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SmartTags methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR SmartTagType)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, SmartTagType);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// SmartTags properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSort wrapper class

	class CSort : public COleDispatchDriver
	{
	public:
		CSort(){} // Calls COleDispatchDriver default constructor
		CSort(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSort(const CSort& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Sort methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Rng()
		{
			LPDISPATCH result;
			InvokeHelper(0xabc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Header()
		{
			long result;
			InvokeHelper(0x37f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Header(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x37f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MatchCase()
		{
			BOOL result;
			InvokeHelper(0x1aa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MatchCase(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x1aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SortMethod()
		{
			long result;
			InvokeHelper(0x381, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SortMethod(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x381, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SortFields()
		{
			LPDISPATCH result;
			InvokeHelper(0xabd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SetRange(LPDISPATCH Rng)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xabe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Rng);
		}
		void Apply()
		{
			InvokeHelper(0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Sort properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSortField wrapper class

	class CSortField : public COleDispatchDriver
	{
	public:
		CSortField(){} // Calls COleDispatchDriver default constructor
		CSortField(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSortField(const CSortField& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SortField methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_SortOn()
		{
			long result;
			InvokeHelper(0xab5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SortOn(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xab5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_SortOnValue()
		{
			LPDISPATCH result;
			InvokeHelper(0xab6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Key()
		{
			LPDISPATCH result;
			InvokeHelper(0x9b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Order()
		{
			long result;
			InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Order(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_CustomOrder()
		{
			VARIANT result;
			InvokeHelper(0xab7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_CustomOrder(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xab7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_DataOption()
		{
			long result;
			InvokeHelper(0xab8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DataOption(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xab8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyKey(LPDISPATCH Key)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xab9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Key);
		}
		void SetIcon(LPDISPATCH Icon)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xaba, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Icon);
		}

		// SortField properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSortFields wrapper class

	class CSortFields : public COleDispatchDriver
	{
	public:
		CSortFields(){} // Calls COleDispatchDriver default constructor
		CSortFields(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSortFields(const CSortFields& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SortFields methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPDISPATCH Key, VARIANT& SortOn, VARIANT& Order, VARIANT& CustomOrder, VARIANT& DataOption)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Key, &SortOn, &Order, &CustomOrder, &DataOption);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Clear()
		{
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// SortFields properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSoundNote wrapper class

	class CSoundNote : public COleDispatchDriver
	{
	public:
		CSoundNote(){} // Calls COleDispatchDriver default constructor
		CSoundNote(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSoundNote(const CSoundNote& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SoundNote methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Import(LPCTSTR Filename)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x395, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Filename);
			return result;
		}
		VARIANT Play()
		{
			VARIANT result;
			InvokeHelper(0x396, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Record()
		{
			VARIANT result;
			InvokeHelper(0x397, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// SoundNote properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSpeech wrapper class

	class CSpeech : public COleDispatchDriver
	{
	public:
		CSpeech(){} // Calls COleDispatchDriver default constructor
		CSpeech(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSpeech(const CSpeech& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Speech methods
	public:
		void Speak(LPCTSTR Text, VARIANT& SpeakAsync, VARIANT& SpeakXML, VARIANT& Purge)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7e1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Text, &SpeakAsync, &SpeakXML, &Purge);
		}
		long get_Direction()
		{
			long result;
			InvokeHelper(0xa8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Direction(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SpeakCellOnEnter()
		{
			BOOL result;
			InvokeHelper(0x8bb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SpeakCellOnEnter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Speech properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSpellingOptions wrapper class

	class CSpellingOptions : public COleDispatchDriver
	{
	public:
		CSpellingOptions(){} // Calls COleDispatchDriver default constructor
		CSpellingOptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSpellingOptions(const CSpellingOptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// SpellingOptions methods
	public:
		long get_DictLang()
		{
			long result;
			InvokeHelper(0x8ac, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DictLang(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_UserDict()
		{
			CString result;
			InvokeHelper(0x8ad, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_UserDict(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IgnoreCaps()
		{
			BOOL result;
			InvokeHelper(0x8ae, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IgnoreCaps(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SuggestMainOnly()
		{
			BOOL result;
			InvokeHelper(0x8af, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SuggestMainOnly(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8af, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IgnoreMixedDigits()
		{
			BOOL result;
			InvokeHelper(0x8b0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IgnoreMixedDigits(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IgnoreFileNames()
		{
			BOOL result;
			InvokeHelper(0x8b1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IgnoreFileNames(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_GermanPostReform()
		{
			BOOL result;
			InvokeHelper(0x8b2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_GermanPostReform(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_KoreanCombineAux()
		{
			BOOL result;
			InvokeHelper(0x8b3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_KoreanCombineAux(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_KoreanUseAutoChangeList()
		{
			BOOL result;
			InvokeHelper(0x8b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_KoreanUseAutoChangeList(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_KoreanProcessCompound()
		{
			BOOL result;
			InvokeHelper(0x8b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_KoreanProcessCompound(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HebrewModes()
		{
			long result;
			InvokeHelper(0x8b6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HebrewModes(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ArabicModes()
		{
			long result;
			InvokeHelper(0x8b7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ArabicModes(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// SpellingOptions properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSpinner wrapper class

	class CSpinner : public COleDispatchDriver
	{
	public:
		CSpinner(){} // Calls COleDispatchDriver default constructor
		CSpinner(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSpinner(const CSpinner& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Spinner methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Spinner properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CSpinners wrapper class

	class CSpinners : public COleDispatchDriver
	{
	public:
		CSpinners(){} // Calls COleDispatchDriver default constructor
		CSpinners(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CSpinners(const CSpinners& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Spinners methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get__Default()
		{
			long result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__Default(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Display3DShading()
		{
			BOOL result;
			InvokeHelper(0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Display3DShading(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LinkedCell()
		{
			CString result;
			InvokeHelper(0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LinkedCell(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Max()
		{
			long result;
			InvokeHelper(0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Max(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Min()
		{
			long result;
			InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Min(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SmallChange()
		{
			long result;
			InvokeHelper(0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SmallChange(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Value()
		{
			long result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Value(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Spinners properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CStyle wrapper class

	class CStyle : public COleDispatchDriver
	{
	public:
		CStyle(){} // Calls COleDispatchDriver default constructor
		CStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CStyle(const CStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Style methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_BuiltIn()
		{
			BOOL result;
			InvokeHelper(0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_FormulaHidden()
		{
			BOOL result;
			InvokeHelper(0x106, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FormulaHidden(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HorizontalAlignment()
		{
			long result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeAlignment()
		{
			BOOL result;
			InvokeHelper(0x19d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeAlignment(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x19d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeBorder()
		{
			BOOL result;
			InvokeHelper(0x19e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeBorder(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x19e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeFont()
		{
			BOOL result;
			InvokeHelper(0x19f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeFont(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x19f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeNumber()
		{
			BOOL result;
			InvokeHelper(0x1a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeNumber(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x1a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludePatterns()
		{
			BOOL result;
			InvokeHelper(0x1a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludePatterns(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x1a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IncludeProtection()
		{
			BOOL result;
			InvokeHelper(0x1a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IncludeProtection(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x1a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_IndentLevel()
		{
			long result;
			InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_IndentLevel(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_MergeCells()
		{
			VARIANT result;
			InvokeHelper(0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_MergeCells(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_NameLocal()
		{
			CString result;
			InvokeHelper(0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_NumberFormat()
		{
			CString result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_NumberFormatLocal()
		{
			CString result;
			InvokeHelper(0x449, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLocal(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShrinkToFit()
		{
			BOOL result;
			InvokeHelper(0xd1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShrinkToFit(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_VerticalAlignment()
		{
			long result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_WrapText()
		{
			BOOL result;
			InvokeHelper(0x114, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_WrapText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Style properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CStyles wrapper class

	class CStyles : public COleDispatchDriver
	{
	public:
		CStyles(){} // Calls COleDispatchDriver default constructor
		CStyles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CStyles(const CStyles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Styles methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, VARIANT& BasedOn)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &BasedOn);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		VARIANT Merge(VARIANT& Workbook)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Workbook);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// Styles properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTab wrapper class

	class CTab : public COleDispatchDriver
	{
	public:
		CTab(){} // Calls COleDispatchDriver default constructor
		CTab(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTab(const CTab& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Tab methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Color()
		{
			VARIANT result;
			InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Color(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ColorIndex()
		{
			long result;
			InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ThemeColor()
		{
			long result;
			InvokeHelper(0x93d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ThemeColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x93d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_TintAndShade()
		{
			VARIANT result;
			InvokeHelper(0x93e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_TintAndShade(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x93e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// Tab properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTableStyle wrapper class

	class CTableStyle : public COleDispatchDriver
	{
	public:
		CTableStyle(){} // Calls COleDispatchDriver default constructor
		CTableStyle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTableStyle(const CTableStyle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TableStyle methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_NameLocal()
		{
			CString result;
			InvokeHelper(0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_BuiltIn()
		{
			BOOL result;
			InvokeHelper(0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TableStyleElements()
		{
			LPDISPATCH result;
			InvokeHelper(0xab1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowAsAvailableTableStyle()
		{
			BOOL result;
			InvokeHelper(0xab2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowAsAvailableTableStyle(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xab2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowAsAvailablePivotTableStyle()
		{
			BOOL result;
			InvokeHelper(0xab3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowAsAvailablePivotTableStyle(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xab3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Duplicate(VARIANT& NewTableStyleName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &NewTableStyleName);
			return result;
		}

		// TableStyle properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTableStyleElement wrapper class

	class CTableStyleElement : public COleDispatchDriver
	{
	public:
		CTableStyleElement(){} // Calls COleDispatchDriver default constructor
		CTableStyleElement(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTableStyleElement(const CTableStyleElement& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TableStyleElement methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_HasFormat()
		{
			BOOL result;
			InvokeHelper(0xaaf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_StripeSize()
		{
			long result;
			InvokeHelper(0xab0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_StripeSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xab0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Clear()
		{
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// TableStyleElement properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTableStyleElements wrapper class

	class CTableStyleElements : public COleDispatchDriver
	{
	public:
		CTableStyleElements(){} // Calls COleDispatchDriver default constructor
		CTableStyleElements(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTableStyleElements(const CTableStyleElements& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TableStyleElements methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// TableStyleElements properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTableStyles wrapper class

	class CTableStyles : public COleDispatchDriver
	{
	public:
		CTableStyles(){} // Calls COleDispatchDriver default constructor
		CTableStyles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTableStyles(const CTableStyles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TableStyles methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR TableStyleName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, TableStyleName);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// TableStyles properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTextBox wrapper class

	class CTextBox : public COleDispatchDriver
	{
	public:
		CTextBox(){} // Calls COleDispatchDriver default constructor
		CTextBox(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTextBox(const CTextBox& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TextBox methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_BottomRightCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_TopLeftCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// TextBox properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTextBoxes wrapper class

	class CTextBoxes : public COleDispatchDriver
	{
	public:
		CTextBoxes(){} // Calls COleDispatchDriver default constructor
		CTextBoxes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTextBoxes(const CTextBoxes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TextBoxes methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _Dummy3()
		{
			InvokeHelper(0x10003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT BringToFront()
		{
			VARIANT result;
			InvokeHelper(0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Copy()
		{
			VARIANT result;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT CopyPicture(long Appearance, long Format)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Appearance, Format);
			return result;
		}
		VARIANT Cut()
		{
			VARIANT result;
			InvokeHelper(0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Duplicate()
		{
			LPDISPATCH result;
			InvokeHelper(0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy12()
		{
			InvokeHelper(0x1000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Locked()
		{
			BOOL result;
			InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Locked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy15()
		{
			InvokeHelper(0x1000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Placement()
		{
			VARIANT result;
			InvokeHelper(0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Placement(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_PrintObject()
		{
			BOOL result;
			InvokeHelper(0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrintObject(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select(VARIANT& Replace)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Replace);
			return result;
		}
		VARIANT SendToBack()
		{
			VARIANT result;
			InvokeHelper(0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void _Dummy22()
		{
			InvokeHelper(0x10016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ZOrder()
		{
			long result;
			InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ShapeRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AddIndent()
		{
			BOOL result;
			InvokeHelper(0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AddIndent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Caption()
		{
			CString result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Caption(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		VARIANT CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Formula()
		{
			CString result;
			InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Formula(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_HorizontalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_LockedText()
		{
			BOOL result;
			InvokeHelper(0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_LockedText(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Orientation()
		{
			VARIANT result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_VerticalAlignment()
		{
			VARIANT result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_RoundedCorners()
		{
			BOOL result;
			InvokeHelper(0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RoundedCorners(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Shadow()
		{
			BOOL result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Shadow(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Add(double Left, double Top, double Width, double Height)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Left, Top, Width, Height);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Group()
		{
			LPDISPATCH result;
			InvokeHelper(0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// TextBoxes properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTextEffectFormat wrapper class

	class CTextEffectFormat : public COleDispatchDriver
	{
	public:
		CTextEffectFormat(){} // Calls COleDispatchDriver default constructor
		CTextEffectFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTextEffectFormat(const CTextEffectFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TextEffectFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ToggleVerticalText()
		{
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Alignment()
		{
			long result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Alignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FontBold()
		{
			long result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FontBold(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_FontItalic()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_FontItalic(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FontName()
		{
			CString result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_FontName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_FontSize()
		{
			float result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_FontSize(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_KernedPairs()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_KernedPairs(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_NormalizedHeight()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_NormalizedHeight(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetShape()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetShape(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetTextEffect()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetTextEffect(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_RotatedChars()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_RotatedChars(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Text()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Text(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Tracking()
		{
			float result;
			InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Tracking(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// TextEffectFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTextFrame wrapper class

	class CTextFrame : public COleDispatchDriver
	{
	public:
		CTextFrame(){} // Calls COleDispatchDriver default constructor
		CTextFrame(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTextFrame(const CTextFrame& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TextFrame methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_MarginBottom()
		{
			float result;
			InvokeHelper(0x6d1, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginBottom(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginLeft()
		{
			float result;
			InvokeHelper(0x6d2, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginLeft(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginRight()
		{
			float result;
			InvokeHelper(0x6d3, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginRight(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginTop()
		{
			float result;
			InvokeHelper(0x6d4, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginTop(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Characters(VARIANT& Start, VARIANT& Length)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x25b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Start, &Length);
			return result;
		}
		long get_HorizontalAlignment()
		{
			long result;
			InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAlignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_VerticalAlignment()
		{
			long result;
			InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAlignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoSize()
		{
			BOOL result;
			InvokeHelper(0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoMargins()
		{
			BOOL result;
			InvokeHelper(0x6d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoMargins(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x6d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// TextFrame properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTextFrame2 wrapper class

	class CTextFrame2 : public COleDispatchDriver
	{
	public:
		CTextFrame2(){} // Calls COleDispatchDriver default constructor
		CTextFrame2(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTextFrame2(const CTextFrame2& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TextFrame2 methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_MarginBottom()
		{
			float result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginBottom(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginLeft()
		{
			float result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginLeft(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginRight()
		{
			float result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginRight(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_MarginTop()
		{
			float result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_MarginTop(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HorizontalAnchor()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HorizontalAnchor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_VerticalAnchor()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_VerticalAnchor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PathFormat()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PathFormat(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_WarpFormat()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WarpFormat(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_WordArtformat()
		{
			long result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WordArtformat(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_WordWrap()
		{
			long result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WordWrap(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutoSize()
		{
			long result;
			InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ThreeD()
		{
			LPDISPATCH result;
			InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_HasText()
		{
			long result;
			InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TextRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Column()
		{
			LPDISPATCH result;
			InvokeHelper(0x73, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Ruler()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void DeleteText()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// TextFrame2 properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CThreeDFormat wrapper class

	class CThreeDFormat : public COleDispatchDriver
	{
	public:
		CThreeDFormat(){} // Calls COleDispatchDriver default constructor
		CThreeDFormat(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CThreeDFormat(const CThreeDFormat& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ThreeDFormat methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x60020001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void IncrementRotationX(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementRotationY(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void ResetRotation()
		{
			InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetThreeDFormat(long PresetThreeDFormat)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PresetThreeDFormat);
		}
		void SetExtrusionDirection(long PresetExtrusionDirection)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PresetExtrusionDirection);
		}
		float get_Depth()
		{
			float result;
			InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Depth(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ExtrusionColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ExtrusionColorType()
		{
			long result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ExtrusionColorType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Perspective()
		{
			long result;
			InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Perspective(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetExtrusionDirection()
		{
			long result;
			InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_PresetLightingDirection()
		{
			long result;
			InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetLightingDirection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetLightingSoftness()
		{
			long result;
			InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetLightingSoftness(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetMaterial()
		{
			long result;
			InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetMaterial(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetThreeDFormat()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_RotationX()
		{
			float result;
			InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_RotationX(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_RotationY()
		{
			float result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_RotationY(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SetPresetCamera(long PresetCamera)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PresetCamera);
		}
		void IncrementRotationZ(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementRotationHorizontal(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		void IncrementRotationVertical(float Increment)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Increment);
		}
		long get_PresetLighting()
		{
			long result;
			InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PresetLighting(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_Z()
		{
			float result;
			InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_Z(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BevelTopType()
		{
			long result;
			InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BevelTopType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x72, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_BevelTopInset()
		{
			float result;
			InvokeHelper(0x73, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_BevelTopInset(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x73, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_BevelTopDepth()
		{
			float result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_BevelTopDepth(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x74, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_BevelBottomType()
		{
			long result;
			InvokeHelper(0x75, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_BevelBottomType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x75, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_BevelBottomInset()
		{
			float result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_BevelBottomInset(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x76, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_BevelBottomDepth()
		{
			float result;
			InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_BevelBottomDepth(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PresetCamera()
		{
			long result;
			InvokeHelper(0x78, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		float get_RotationZ()
		{
			float result;
			InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_RotationZ(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x79, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_ContourWidth()
		{
			float result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_ContourWidth(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_ContourColor()
		{
			LPDISPATCH result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		float get_FieldOfView()
		{
			float result;
			InvokeHelper(0x7c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_FieldOfView(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ProjectText()
		{
			long result;
			InvokeHelper(0x7d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ProjectText(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		float get_LightAngle()
		{
			float result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
			return result;
		}
		void put_LightAngle(float newValue)
		{
			static BYTE parms[] = VTS_R4 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ThreeDFormat properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTickLabels wrapper class

	class CTickLabels : public COleDispatchDriver
	{
	public:
		CTickLabels(){} // Calls COleDispatchDriver default constructor
		CTickLabels(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTickLabels(const CTickLabels& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TickLabels methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_NumberFormat()
		{
			CString result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_NumberFormatLinked()
		{
			BOOL result;
			InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLinked(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_NumberFormatLocal()
		{
			VARIANT result;
			InvokeHelper(0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormatLocal(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Orientation()
		{
			long result;
			InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Orientation(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_ReadingOrder()
		{
			long result;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ReadingOrder(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_AutoScaleFont()
		{
			VARIANT result;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_AutoScaleFont(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Depth()
		{
			long result;
			InvokeHelper(0x762, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_Offset()
		{
			long result;
			InvokeHelper(0xfe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Offset(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xfe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Alignment()
		{
			long result;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Alignment(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_MultiLevel()
		{
			BOOL result;
			InvokeHelper(0xa5d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_MultiLevel(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// TickLabels properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CToolbar wrapper class

	class CToolbar : public COleDispatchDriver
	{
	public:
		CToolbar(){} // Calls COleDispatchDriver default constructor
		CToolbar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CToolbar(const CToolbar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Toolbar methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BuiltIn()
		{
			BOOL result;
			InvokeHelper(0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Height()
		{
			long result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Height(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Left()
		{
			long result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Left(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_Position()
		{
			long result;
			InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Position(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Protection()
		{
			long result;
			InvokeHelper(0xb0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Protection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Reset()
		{
			InvokeHelper(0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_ToolbarButtons()
		{
			LPDISPATCH result;
			InvokeHelper(0x3c4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Top()
		{
			long result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Top(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Width()
		{
			long result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Width(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Toolbar properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CToolbarButton wrapper class

	class CToolbarButton : public COleDispatchDriver
	{
	public:
		CToolbarButton(){} // Calls COleDispatchDriver default constructor
		CToolbarButton(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CToolbarButton(const CToolbarButton& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ToolbarButton methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_BuiltIn()
		{
			BOOL result;
			InvokeHelper(0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_BuiltInFace()
		{
			BOOL result;
			InvokeHelper(0x22a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_BuiltInFace(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Copy(LPDISPATCH Toolbar, long Before)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Toolbar, Before);
		}
		void CopyFace()
		{
			InvokeHelper(0x3c6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Edit()
		{
			InvokeHelper(0x232, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Enabled()
		{
			BOOL result;
			InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Enabled(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_HelpContextID()
		{
			long result;
			InvokeHelper(0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_HelpContextID(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_HelpFile()
		{
			CString result;
			InvokeHelper(0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_HelpFile(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ID()
		{
			long result;
			InvokeHelper(0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_IsGap()
		{
			BOOL result;
			InvokeHelper(0x231, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void Move(LPDISPATCH Toolbar, long Before)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Toolbar, Before);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnAction()
		{
			CString result;
			InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnAction(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void PasteFace()
		{
			InvokeHelper(0x3c7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Pushed()
		{
			BOOL result;
			InvokeHelper(0x230, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Pushed(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Reset()
		{
			InvokeHelper(0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_StatusBar()
		{
			CString result;
			InvokeHelper(0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_StatusBar(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Width()
		{
			long result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Width(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// ToolbarButton properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CToolbarButtons wrapper class

	class CToolbarButtons : public COleDispatchDriver
	{
	public:
		CToolbarButtons(){} // Calls COleDispatchDriver default constructor
		CToolbarButtons(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CToolbarButtons(const CToolbarButtons& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// ToolbarButtons methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Button, VARIANT& Before, VARIANT& OnAction, VARIANT& Pushed, VARIANT& Enabled, VARIANT& StatusBar, VARIANT& HelpFile, VARIANT& HelpContextID)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Button, &Before, &OnAction, &Pushed, &Enabled, &StatusBar, &HelpFile, &HelpContextID);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}

		// ToolbarButtons properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CToolbars wrapper class

	class CToolbars : public COleDispatchDriver
	{
	public:
		CToolbars(){} // Calls COleDispatchDriver default constructor
		CToolbars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CToolbars(const CToolbars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Toolbars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Name)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Name);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// Toolbars properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTop10 wrapper class

	class CTop10 : public COleDispatchDriver
	{
	public:
		CTop10(){} // Calls COleDispatchDriver default constructor
		CTop10(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTop10(const CTop10& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Top10 methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_StopIfTrue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_TopBottom()
		{
			long result;
			InvokeHelper(0xaa8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TopBottom(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Rank()
		{
			long result;
			InvokeHelper(0x50a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Rank(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x50a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_Percent()
		{
			BOOL result;
			InvokeHelper(0xaa9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Percent(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xaa9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_NumberFormat()
		{
			VARIANT result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CalcFor()
		{
			long result;
			InvokeHelper(0xaaa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_CalcFor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Top10 properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTreeviewControl wrapper class

	class CTreeviewControl : public COleDispatchDriver
	{
	public:
		CTreeviewControl(){} // Calls COleDispatchDriver default constructor
		CTreeviewControl(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTreeviewControl(const CTreeviewControl& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// TreeviewControl methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Hidden()
		{
			VARIANT result;
			InvokeHelper(0x10c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Hidden(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_Drilled()
		{
			VARIANT result;
			InvokeHelper(0x77d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Drilled(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x77d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}

		// TreeviewControl properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTrendline wrapper class

	class CTrendline : public COleDispatchDriver
	{
	public:
		CTrendline(){} // Calls COleDispatchDriver default constructor
		CTrendline(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTrendline(const CTrendline& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Trendline methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Backward()
		{
			long result;
			InvokeHelper(0xb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Backward(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataLabel()
		{
			LPDISPATCH result;
			InvokeHelper(0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayEquation()
		{
			BOOL result;
			InvokeHelper(0xbe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayEquation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayRSquared()
		{
			BOOL result;
			InvokeHelper(0xbd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRSquared(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Forward()
		{
			long result;
			InvokeHelper(0xbf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Forward(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_Intercept()
		{
			double result;
			InvokeHelper(0xba, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Intercept(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_InterceptIsAuto()
		{
			BOOL result;
			InvokeHelper(0xbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InterceptIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_NameIsAuto()
		{
			BOOL result;
			InvokeHelper(0xbc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_NameIsAuto(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Order()
		{
			long result;
			InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Order(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Period()
		{
			long result;
			InvokeHelper(0xb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Period(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xb8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Backward2()
		{
			double result;
			InvokeHelper(0xa5a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Backward2(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa5a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Forward2()
		{
			double result;
			InvokeHelper(0xa5b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Forward2(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0xa5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Trendline properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CTrendlines wrapper class

	class CTrendlines : public COleDispatchDriver
	{
	public:
		CTrendlines(){} // Calls COleDispatchDriver default constructor
		CTrendlines(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CTrendlines(const CTrendlines& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Trendlines methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(long Type, VARIANT& Order, VARIANT& Period, VARIANT& Forward, VARIANT& Backward, VARIANT& Intercept, VARIANT& DisplayEquation, VARIANT& DisplayRSquared, VARIANT& Name)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, &Order, &Period, &Forward, &Backward, &Intercept, &DisplayEquation, &DisplayRSquared, &Name);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN _NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// Trendlines properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CUniqueValues wrapper class

	class CUniqueValues : public COleDispatchDriver
	{
	public:
		CUniqueValues(){} // Calls COleDispatchDriver default constructor
		CUniqueValues(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CUniqueValues(const CUniqueValues& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// UniqueValues methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Priority()
		{
			long result;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Priority(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x3d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_StopIfTrue()
		{
			BOOL result;
			InvokeHelper(0xa41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_StopIfTrue(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0xa41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AppliesTo()
		{
			LPDISPATCH result;
			InvokeHelper(0xa42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DupeUnique()
		{
			long result;
			InvokeHelper(0xaad, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DupeUnique(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Borders()
		{
			LPDISPATCH result;
			InvokeHelper(0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Font()
		{
			LPDISPATCH result;
			InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_NumberFormat()
		{
			VARIANT result;
			InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_NumberFormat(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void SetFirstPriority()
		{
			InvokeHelper(0xa45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SetLastPriority()
		{
			InvokeHelper(0xa46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ModifyAppliesToRange(LPDISPATCH Range)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xa43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range);
		}
		BOOL get_PTCondition()
		{
			BOOL result;
			InvokeHelper(0xa47, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_ScopeType()
		{
			long result;
			InvokeHelper(0xa37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScopeType(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// UniqueValues properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CUpBars wrapper class

	class CUpBars : public COleDispatchDriver
	{
	public:
		CUpBars(){} // Calls COleDispatchDriver default constructor
		CUpBars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CUpBars(const CUpBars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// UpBars methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Delete()
		{
			VARIANT result;
			InvokeHelper(0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// UpBars properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CUsedObjects wrapper class

	class CUsedObjects : public COleDispatchDriver
	{
	public:
		CUsedObjects(){} // Calls COleDispatchDriver default constructor
		CUsedObjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CUsedObjects(const CUsedObjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// UsedObjects methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}

		// UsedObjects properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CUserAccess wrapper class

	class CUserAccess : public COleDispatchDriver
	{
	public:
		CUserAccess(){} // Calls COleDispatchDriver default constructor
		CUserAccess(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CUserAccess(const CUserAccess& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// UserAccess methods
	public:
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_AllowEdit()
		{
			BOOL result;
			InvokeHelper(0x7e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AllowEdit(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// UserAccess properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CUserAccessList wrapper class

	class CUserAccessList : public COleDispatchDriver
	{
	public:
		CUserAccessList(){} // Calls COleDispatchDriver default constructor
		CUserAccessList(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CUserAccessList(const CUserAccessList& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// UserAccessList methods
	public:
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Name, BOOL AllowEdit)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_BOOL ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, AllowEdit);
			return result;
		}
		void DeleteAll()
		{
			InvokeHelper(0x8bf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// UserAccessList properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CValidation wrapper class

	class CValidation : public COleDispatchDriver
	{
	public:
		CValidation(){} // Calls COleDispatchDriver default constructor
		CValidation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CValidation(const CValidation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Validation methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Add(long Type, VARIANT& AlertStyle, VARIANT& Operator, VARIANT& Formula1, VARIANT& Formula2)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &AlertStyle, &Operator, &Formula1, &Formula2);
		}
		long get_AlertStyle()
		{
			long result;
			InvokeHelper(0x645, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_IgnoreBlank()
		{
			BOOL result;
			InvokeHelper(0x646, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IgnoreBlank(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x646, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_IMEMode()
		{
			long result;
			InvokeHelper(0x647, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_IMEMode(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x647, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_InCellDropdown()
		{
			BOOL result;
			InvokeHelper(0x648, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InCellDropdown(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x648, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_ErrorMessage()
		{
			CString result;
			InvokeHelper(0x649, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ErrorMessage(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x649, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_ErrorTitle()
		{
			CString result;
			InvokeHelper(0x64a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ErrorTitle(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x64a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_InputMessage()
		{
			CString result;
			InvokeHelper(0x64b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_InputMessage(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x64b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_InputTitle()
		{
			CString result;
			InvokeHelper(0x64c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_InputTitle(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x64c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Formula1()
		{
			CString result;
			InvokeHelper(0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Formula2()
		{
			CString result;
			InvokeHelper(0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void Modify(VARIANT& Type, VARIANT& AlertStyle, VARIANT& Operator, VARIANT& Formula1, VARIANT& Formula2)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Type, &AlertStyle, &Operator, &Formula1, &Formula2);
		}
		long get_Operator()
		{
			long result;
			InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowError()
		{
			BOOL result;
			InvokeHelper(0x64d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowError(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x64d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ShowInput()
		{
			BOOL result;
			InvokeHelper(0x64e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowInput(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x64e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		BOOL get_Value()
		{
			BOOL result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// Validation properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CVPageBreak wrapper class

	class CVPageBreak : public COleDispatchDriver
	{
	public:
		CVPageBreak(){} // Calls COleDispatchDriver default constructor
		CVPageBreak(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CVPageBreak(const CVPageBreak& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// VPageBreak methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void DragOff(long Direction, long RegionIndex)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Direction, RegionIndex);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Type(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Extent()
		{
			long result;
			InvokeHelper(0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Location()
		{
			LPDISPATCH result;
			InvokeHelper(0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void putref_Location(LPDISPATCH newValue)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
		}

		// VPageBreak properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CVPageBreaks wrapper class

	class CVPageBreaks : public COleDispatchDriver
	{
	public:
		CVPageBreaks(){} // Calls COleDispatchDriver default constructor
		CVPageBreaks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CVPageBreaks(const CVPageBreaks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// VPageBreaks methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPDISPATCH get__Default(long Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPDISPATCH Before)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Before);
			return result;
		}

		// VPageBreaks properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWalls wrapper class

	class CWalls : public COleDispatchDriver
	{
	public:
		CWalls(){} // Calls COleDispatchDriver default constructor
		CWalls(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWalls(const CWalls& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Walls methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		VARIANT Select()
		{
			VARIANT result;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Border()
		{
			LPDISPATCH result;
			InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT ClearFormats()
		{
			VARIANT result;
			InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Interior()
		{
			LPDISPATCH result;
			InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Fill()
		{
			LPDISPATCH result;
			InvokeHelper(0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_PictureType()
		{
			VARIANT result;
			InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PictureType(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		void Paste()
		{
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_PictureUnit()
		{
			VARIANT result;
			InvokeHelper(0xa2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_PictureUnit(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_Thickness()
		{
			long result;
			InvokeHelper(0xa5c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Thickness(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0xa5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Format()
		{
			LPDISPATCH result;
			InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// Walls properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWatch wrapper class

	class CWatch : public COleDispatchDriver
	{
	public:
		CWatch(){} // Calls COleDispatchDriver default constructor
		CWatch(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWatch(const CWatch& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Watch methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		VARIANT get_Source()
		{
			VARIANT result;
			InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}

		// Watch properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWatches wrapper class

	class CWatches : public COleDispatchDriver
	{
	public:
		CWatches(){} // Calls COleDispatchDriver default constructor
		CWatches(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWatches(const CWatches& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Watches methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Source)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Watches properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWebOptions wrapper class

	class CWebOptions : public COleDispatchDriver
	{
	public:
		CWebOptions(){} // Calls COleDispatchDriver default constructor
		CWebOptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWebOptions(const CWebOptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// WebOptions methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_RelyOnCSS()
		{
			BOOL result;
			InvokeHelper(0x76b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RelyOnCSS(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_OrganizeInFolder()
		{
			BOOL result;
			InvokeHelper(0x76e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_OrganizeInFolder(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x76e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UseLongFileNames()
		{
			BOOL result;
			InvokeHelper(0x770, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UseLongFileNames(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x770, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DownloadComponents()
		{
			BOOL result;
			InvokeHelper(0x772, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DownloadComponents(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x772, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RelyOnVML()
		{
			BOOL result;
			InvokeHelper(0x773, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RelyOnVML(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x773, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AllowPNG()
		{
			BOOL result;
			InvokeHelper(0x774, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AllowPNG(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x774, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ScreenSize()
		{
			long result;
			InvokeHelper(0x775, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScreenSize(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x775, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_PixelsPerInch()
		{
			long result;
			InvokeHelper(0x776, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_PixelsPerInch(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x776, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_LocationOfComponents()
		{
			CString result;
			InvokeHelper(0x777, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_LocationOfComponents(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x777, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Encoding()
		{
			long result;
			InvokeHelper(0x71e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Encoding(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x71e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FolderSuffix()
		{
			CString result;
			InvokeHelper(0x77a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void UseDefaultFolderSuffix()
		{
			InvokeHelper(0x77b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_TargetBrowser()
		{
			long result;
			InvokeHelper(0x883, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_TargetBrowser(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x883, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// WebOptions properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWindow0 wrapper class

	class CWindow0 : public COleDispatchDriver
	{
	public:
		CWindow0(){} // Calls COleDispatchDriver default constructor
		CWindow0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWindow0(const CWindow0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Window methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Activate()
		{
			VARIANT result;
			InvokeHelper(0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ActivateNext()
		{
			VARIANT result;
			InvokeHelper(0x45b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT ActivatePrevious()
		{
			VARIANT result;
			InvokeHelper(0x45c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveCell()
		{
			LPDISPATCH result;
			InvokeHelper(0x131, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveChart()
		{
			LPDISPATCH result;
			InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActivePane()
		{
			LPDISPATCH result;
			InvokeHelper(0x282, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveSheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Caption()
		{
			VARIANT result;
			InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Caption(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL Close(VARIANT& SaveChanges, VARIANT& Filename, VARIANT& RouteWorkbook)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x115, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SaveChanges, &Filename, &RouteWorkbook);
			return result;
		}
		BOOL get_DisplayFormulas()
		{
			BOOL result;
			InvokeHelper(0x284, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFormulas(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayGridlines()
		{
			BOOL result;
			InvokeHelper(0x285, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayGridlines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x285, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayHeadings()
		{
			BOOL result;
			InvokeHelper(0x286, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayHeadings(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayHorizontalScrollBar()
		{
			BOOL result;
			InvokeHelper(0x399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayHorizontalScrollBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayOutline()
		{
			BOOL result;
			InvokeHelper(0x287, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayOutline(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get__DisplayRightToLeft()
		{
			BOOL result;
			InvokeHelper(0x288, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put__DisplayRightToLeft(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayVerticalScrollBar()
		{
			BOOL result;
			InvokeHelper(0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayVerticalScrollBar(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayWorkbookTabs()
		{
			BOOL result;
			InvokeHelper(0x39b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayWorkbookTabs(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x39b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayZeros()
		{
			BOOL result;
			InvokeHelper(0x289, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayZeros(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x289, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableResize()
		{
			BOOL result;
			InvokeHelper(0x4a8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableResize(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_FreezePanes()
		{
			BOOL result;
			InvokeHelper(0x28a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_FreezePanes(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x28a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_GridlineColor()
		{
			long result;
			InvokeHelper(0x28b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_GridlineColor(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_GridlineColorIndex()
		{
			long result;
			InvokeHelper(0x28c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_GridlineColorIndex(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Height()
		{
			double result;
			InvokeHelper(0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Height(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT LargeScroll(VARIANT& Down, VARIANT& Up, VARIANT& ToRight, VARIANT& ToLeft)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Down, &Up, &ToRight, &ToLeft);
			return result;
		}
		double get_Left()
		{
			double result;
			InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Left(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH NewWindow()
		{
			LPDISPATCH result;
			InvokeHelper(0x118, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnWindow()
		{
			CString result;
			InvokeHelper(0x26f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnWindow(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Panes()
		{
			LPDISPATCH result;
			InvokeHelper(0x28d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
			return result;
		}
		VARIANT PrintPreview(VARIANT& EnableChanges)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &EnableChanges);
			return result;
		}
		LPDISPATCH get_RangeSelection()
		{
			LPDISPATCH result;
			InvokeHelper(0x4a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ScrollColumn()
		{
			long result;
			InvokeHelper(0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScrollColumn(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ScrollRow()
		{
			long result;
			InvokeHelper(0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ScrollRow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT ScrollWorkbookTabs(VARIANT& Sheets, VARIANT& Position)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x296, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Sheets, &Position);
			return result;
		}
		LPDISPATCH get_SelectedSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x290, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Selection()
		{
			LPDISPATCH result;
			InvokeHelper(0x93, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT SmallScroll(VARIANT& Down, VARIANT& Up, VARIANT& ToRight, VARIANT& ToLeft)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Down, &Up, &ToRight, &ToLeft);
			return result;
		}
		BOOL get_Split()
		{
			BOOL result;
			InvokeHelper(0x291, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Split(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x291, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SplitColumn()
		{
			long result;
			InvokeHelper(0x292, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SplitColumn(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x292, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_SplitHorizontal()
		{
			double result;
			InvokeHelper(0x293, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_SplitHorizontal(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x293, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_SplitRow()
		{
			long result;
			InvokeHelper(0x294, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_SplitRow(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x294, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_SplitVertical()
		{
			double result;
			InvokeHelper(0x295, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_SplitVertical(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x295, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_TabRatio()
		{
			double result;
			InvokeHelper(0x2a1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_TabRatio(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x2a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		double get_Top()
		{
			double result;
			InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Top(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		double get_UsableHeight()
		{
			double result;
			InvokeHelper(0x185, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_UsableWidth()
		{
			double result;
			InvokeHelper(0x186, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		BOOL get_Visible()
		{
			BOOL result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Visible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_VisibleRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		double get_Width()
		{
			double result;
			InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_Width(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_WindowNumber()
		{
			long result;
			InvokeHelper(0x45f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		long get_WindowState()
		{
			long result;
			InvokeHelper(0x18c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_WindowState(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x18c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Zoom()
		{
			VARIANT result;
			InvokeHelper(0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Zoom(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		long get_View()
		{
			long result;
			InvokeHelper(0x4aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_View(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x4aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayRightToLeft()
		{
			BOOL result;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRightToLeft(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long PointsToScreenPixelsX(long Points)
		{
			long result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f0, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Points);
			return result;
		}
		long PointsToScreenPixelsY(long Points)
		{
			long result;
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x6f1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Points);
			return result;
		}
		LPDISPATCH RangeFromPoint(long x, long y)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_I4 VTS_I4 ;
			InvokeHelper(0x6f2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, x, y);
			return result;
		}
		void ScrollIntoView(long Left, long Top, long Width, long Height, VARIANT& Start)
		{
			static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Left, Top, Width, Height, &Start);
		}
		LPDISPATCH get_SheetViews()
		{
			LPDISPATCH result;
			InvokeHelper(0x940, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveSheetView()
		{
			LPDISPATCH result;
			InvokeHelper(0x941, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
			return result;
		}
		BOOL get_DisplayRuler()
		{
			BOOL result;
			InvokeHelper(0x942, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRuler(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x942, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoFilterDateGrouping()
		{
			BOOL result;
			InvokeHelper(0x943, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoFilterDateGrouping(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x943, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayWhitespace()
		{
			BOOL result;
			InvokeHelper(0x944, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayWhitespace(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x944, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// Window properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWindows wrapper class

	class CWindows : public COleDispatchDriver
	{
	public:
		CWindows(){} // Calls COleDispatchDriver default constructor
		CWindows(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWindows(const CWindows& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Windows methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT Arrange(long ArrangeStyle, VARIANT& ActiveWorkbook, VARIANT& SyncHorizontal, VARIANT& SyncVertical)
		{
			VARIANT result;
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, ArrangeStyle, &ActiveWorkbook, &SyncHorizontal, &SyncVertical);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL CompareSideBySideWith(VARIANT& WindowName)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x8c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &WindowName);
			return result;
		}
		BOOL BreakSideBySide()
		{
			BOOL result;
			InvokeHelper(0x8c8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_SyncScrollingSideBySide()
		{
			BOOL result;
			InvokeHelper(0x8c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SyncScrollingSideBySide(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ResetPositionsSideBySide()
		{
			InvokeHelper(0x8ca, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// Windows properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorkbook wrapper class

	class CWorkbook : public COleDispatchDriver
	{
	public:
		CWorkbook(){} // Calls COleDispatchDriver default constructor
		CWorkbook(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorkbook(const CWorkbook& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _Workbook methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_AcceptLabelsInFormulas()
		{
			BOOL result;
			InvokeHelper(0x5a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AcceptLabelsInFormulas(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_ActiveChart()
		{
			LPDISPATCH result;
			InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ActiveSheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Author()
		{
			CString result;
			InvokeHelper(0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Author(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x23e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_AutoUpdateFrequency()
		{
			long result;
			InvokeHelper(0x5a2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_AutoUpdateFrequency(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AutoUpdateSaveChanges()
		{
			BOOL result;
			InvokeHelper(0x5a3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoUpdateSaveChanges(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ChangeHistoryDuration()
		{
			long result;
			InvokeHelper(0x5a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ChangeHistoryDuration(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_BuiltinDocumentProperties()
		{
			LPDISPATCH result;
			InvokeHelper(0x498, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ChangeFileAccess(long Mode, VARIANT& WritePassword, VARIANT& Notify)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3dd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Mode, &WritePassword, &Notify);
		}
		void ChangeLink(LPCTSTR Name, LPCTSTR NewName, long Type)
		{
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_I4 ;
			InvokeHelper(0x322, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, NewName, Type);
		}
		LPDISPATCH get_Charts()
		{
			LPDISPATCH result;
			InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Close(VARIANT& SaveChanges, VARIANT& Filename, VARIANT& RouteWorkbook)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x115, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SaveChanges, &Filename, &RouteWorkbook);
		}
		CString get_CodeName()
		{
			CString result;
			InvokeHelper(0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__CodeName()
		{
			CString result;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__CodeName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_Colors(VARIANT& Index)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, &Index);
			return result;
		}
		void put_Colors(VARIANT& Index, VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &Index, &newValue);
		}
		LPDISPATCH get_CommandBars()
		{
			LPDISPATCH result;
			InvokeHelper(0x59f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Comments()
		{
			CString result;
			InvokeHelper(0x23f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Comments(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x23f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_ConflictResolution()
		{
			long result;
			InvokeHelper(0x497, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_ConflictResolution(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x497, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Container()
		{
			LPDISPATCH result;
			InvokeHelper(0x4a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_CreateBackup()
		{
			BOOL result;
			InvokeHelper(0x11f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CustomDocumentProperties()
		{
			LPDISPATCH result;
			InvokeHelper(0x499, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Date1904()
		{
			BOOL result;
			InvokeHelper(0x193, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Date1904(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x193, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void DeleteNumberFormat(LPCTSTR NumberFormat)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x18d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, NumberFormat);
		}
		LPDISPATCH get_DialogSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x2fc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_DisplayDrawingObjects()
		{
			long result;
			InvokeHelper(0x194, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_DisplayDrawingObjects(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x194, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL ExclusiveAccess()
		{
			BOOL result;
			InvokeHelper(0x490, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		long get_FileFormat()
		{
			long result;
			InvokeHelper(0x120, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void ForwardMailer()
		{
			InvokeHelper(0x3cd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_FullName()
		{
			CString result;
			InvokeHelper(0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_HasMailer()
		{
			BOOL result;
			InvokeHelper(0x3d0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasMailer(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasPassword()
		{
			BOOL result;
			InvokeHelper(0x122, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_HasRoutingSlip()
		{
			BOOL result;
			InvokeHelper(0x3b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HasRoutingSlip(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x3b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsAddin()
		{
			BOOL result;
			InvokeHelper(0x5a5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_IsAddin(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Keywords()
		{
			CString result;
			InvokeHelper(0x241, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Keywords(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x241, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT LinkInfo(LPCTSTR Name, long LinkInfo, VARIANT& Type, VARIANT& EditionRef)
		{
			VARIANT result;
			static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x327, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Name, LinkInfo, &Type, &EditionRef);
			return result;
		}
		VARIANT LinkSources(VARIANT& Type)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x328, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Type);
			return result;
		}
		LPDISPATCH get_Mailer()
		{
			LPDISPATCH result;
			InvokeHelper(0x3d3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void MergeWorkbook(VARIANT& Filename)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5a6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename);
		}
		LPDISPATCH get_Modules()
		{
			LPDISPATCH result;
			InvokeHelper(0x246, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_MultiUserEditing()
		{
			BOOL result;
			InvokeHelper(0x491, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Names()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH NewWindow()
		{
			LPDISPATCH result;
			InvokeHelper(0x118, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnSave()
		{
			CString result;
			InvokeHelper(0x49a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSave(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x49a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void OpenLinks(LPCTSTR Name, VARIANT& ReadOnly, VARIANT& Type)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x323, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, &ReadOnly, &Type);
		}
		CString get_Path()
		{
			CString result;
			InvokeHelper(0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		BOOL get_PersonalViewListSettings()
		{
			BOOL result;
			InvokeHelper(0x5a7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PersonalViewListSettings(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PersonalViewPrintSettings()
		{
			BOOL result;
			InvokeHelper(0x5a8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PersonalViewPrintSettings(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH PivotCaches()
		{
			LPDISPATCH result;
			InvokeHelper(0x5a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Post(VARIANT& DestName)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x48e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &DestName);
		}
		BOOL get_PrecisionAsDisplayed()
		{
			BOOL result;
			InvokeHelper(0x195, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PrecisionAsDisplayed(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x195, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void _Protect(VARIANT& Password, VARIANT& Structure, VARIANT& Windows)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &Structure, &Windows);
		}
		void _ProtectSharing(VARIANT& Filename, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& SharingPassword)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5aa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &SharingPassword);
		}
		BOOL get_ProtectStructure()
		{
			BOOL result;
			InvokeHelper(0x24c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectWindows()
		{
			BOOL result;
			InvokeHelper(0x127, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ReadOnly()
		{
			BOOL result;
			InvokeHelper(0x128, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get__ReadOnlyRecommended()
		{
			BOOL result;
			InvokeHelper(0x129, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void RefreshAll()
		{
			InvokeHelper(0x5ac, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Reply()
		{
			InvokeHelper(0x3d1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ReplyAll()
		{
			InvokeHelper(0x3d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void RemoveUser(long Index)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x5ad, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index);
		}
		long get_RevisionNumber()
		{
			long result;
			InvokeHelper(0x494, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Route()
		{
			InvokeHelper(0x3b2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Routed()
		{
			BOOL result;
			InvokeHelper(0x3b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RoutingSlip()
		{
			LPDISPATCH result;
			InvokeHelper(0x3b5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void RunAutoMacros(long Which)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x27a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Which);
		}
		void Save()
		{
			InvokeHelper(0x11b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void _SaveAs(VARIANT& Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, long AccessMode, VARIANT& ConflictResolution, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, AccessMode, &ConflictResolution, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void SaveCopyAs(VARIANT& Filename)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename);
		}
		BOOL get_Saved()
		{
			BOOL result;
			InvokeHelper(0x12a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Saved(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x12a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SaveLinkValues()
		{
			BOOL result;
			InvokeHelper(0x196, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveLinkValues(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x196, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SendMail(VARIANT& Recipients, VARIANT& Subject, VARIANT& ReturnReceipt)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x3b3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Recipients, &Subject, &ReturnReceipt);
		}
		void SendMailer(VARIANT& FileFormat, long Priority)
		{
			static BYTE parms[] = VTS_VARIANT VTS_I4 ;
			InvokeHelper(0x3d4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &FileFormat, Priority);
		}
		void SetLinkOnData(LPCTSTR Name, VARIANT& Procedure)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x329, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, &Procedure);
		}
		LPDISPATCH get_Sheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowConflictHistory()
		{
			BOOL result;
			InvokeHelper(0x493, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowConflictHistory(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x493, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Styles()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ed, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Subject()
		{
			CString result;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Subject(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Title()
		{
			CString result;
			InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Title(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		void UnprotectSharing(VARIANT& SharingPassword)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x5af, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SharingPassword);
		}
		void UpdateFromFile()
		{
			InvokeHelper(0x3e3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void UpdateLink(VARIANT& Name, VARIANT& Type)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x324, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name, &Type);
		}
		BOOL get_UpdateRemoteReferences()
		{
			BOOL result;
			InvokeHelper(0x19b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UpdateRemoteReferences(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x19b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_UserControl()
		{
			BOOL result;
			InvokeHelper(0x4ba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_UserControl(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x4ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT get_UserStatus()
		{
			VARIANT result;
			InvokeHelper(0x495, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CustomViews()
		{
			LPDISPATCH result;
			InvokeHelper(0x5b0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Windows()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Worksheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_WriteReserved()
		{
			BOOL result;
			InvokeHelper(0x12b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		CString get_WriteReservedBy()
		{
			CString result;
			InvokeHelper(0x12c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4IntlMacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x245, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Excel4MacroSheets()
		{
			LPDISPATCH result;
			InvokeHelper(0x243, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_TemplateRemoveExtData()
		{
			BOOL result;
			InvokeHelper(0x5b1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TemplateRemoveExtData(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void HighlightChangesOptions(VARIANT& When, VARIANT& Who, VARIANT& Where)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5b2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &When, &Who, &Where);
		}
		BOOL get_HighlightChangesOnScreen()
		{
			BOOL result;
			InvokeHelper(0x5b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_HighlightChangesOnScreen(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_KeepChangeHistory()
		{
			BOOL result;
			InvokeHelper(0x5b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_KeepChangeHistory(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ListChangesOnNewSheet()
		{
			BOOL result;
			InvokeHelper(0x5b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ListChangesOnNewSheet(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x5b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void PurgeChangeHistoryNow(long Days, VARIANT& SharingPassword)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT ;
			InvokeHelper(0x5b8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Days, &SharingPassword);
		}
		void AcceptAllChanges(VARIANT& When, VARIANT& Who, VARIANT& Where)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5ba, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &When, &Who, &Where);
		}
		void RejectAllChanges(VARIANT& When, VARIANT& Who, VARIANT& Where)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5bb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &When, &Who, &Where);
		}
		void PivotTableWizard(VARIANT& SourceType, VARIANT& SourceData, VARIANT& TableDestination, VARIANT& TableName, VARIANT& RowGrand, VARIANT& ColumnGrand, VARIANT& SaveData, VARIANT& HasAutoFormat, VARIANT& AutoPage, VARIANT& Reserved, VARIANT& BackgroundQuery, VARIANT& OptimizeCache, VARIANT& PageFieldOrder, VARIANT& PageFieldWrapCount, VARIANT& ReadData, VARIANT& Connection)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2ac, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage, &Reserved, &BackgroundQuery, &OptimizeCache, &PageFieldOrder, &PageFieldWrapCount, &ReadData, &Connection);
		}
		void ResetColors()
		{
			InvokeHelper(0x5bc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_VBProject()
		{
			LPDISPATCH result;
			InvokeHelper(0x5bd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void FollowHyperlink(LPCTSTR Address, VARIANT& SubAddress, VARIANT& NewWindow, VARIANT& AddHistory, VARIANT& ExtraInfo, VARIANT& Method, VARIANT& HeaderInfo)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x5be, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Address, &SubAddress, &NewWindow, &AddHistory, &ExtraInfo, &Method, &HeaderInfo);
		}
		void AddToFavorites()
		{
			InvokeHelper(0x5c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_IsInplace()
		{
			BOOL result;
			InvokeHelper(0x6e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void WebPagePreview()
		{
			InvokeHelper(0x71a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_PublishObjects()
		{
			LPDISPATCH result;
			InvokeHelper(0x71b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_WebOptions()
		{
			LPDISPATCH result;
			InvokeHelper(0x71c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ReloadAs(long Encoding)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x71d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Encoding);
		}
		LPDISPATCH get_HTMLProject()
		{
			LPDISPATCH result;
			InvokeHelper(0x71f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_EnvelopeVisible()
		{
			BOOL result;
			InvokeHelper(0x720, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnvelopeVisible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x720, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_CalculationVersion()
		{
			long result;
			InvokeHelper(0x70e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Dummy17(long calcid)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x7fc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, calcid);
		}
		void sblt(LPCTSTR s)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x722, DISPATCH_METHOD, VT_EMPTY, NULL, parms, s);
		}
		BOOL get_VBASigned()
		{
			BOOL result;
			InvokeHelper(0x724, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowPivotTableFieldList()
		{
			BOOL result;
			InvokeHelper(0x7fe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowPivotTableFieldList(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_UpdateLinks()
		{
			long result;
			InvokeHelper(0x360, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_UpdateLinks(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x360, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void BreakLink(LPCTSTR Name, long Type)
		{
			static BYTE parms[] = VTS_BSTR VTS_I4 ;
			InvokeHelper(0x7ff, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, Type);
		}
		void Dummy16()
		{
			InvokeHelper(0x800, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void SaveAs(VARIANT& Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, long AccessMode, VARIANT& ConflictResolution, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout, VARIANT& Local)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x785, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, AccessMode, &ConflictResolution, &AddToMru, &TextCodepage, &TextVisualLayout, &Local);
		}
		BOOL get_EnableAutoRecover()
		{
			BOOL result;
			InvokeHelper(0x801, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableAutoRecover(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x801, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_RemovePersonalInformation()
		{
			BOOL result;
			InvokeHelper(0x802, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_RemovePersonalInformation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x802, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_FullNameURLEncoded()
		{
			CString result;
			InvokeHelper(0x787, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void CheckIn(VARIANT& SaveChanges, VARIANT& Comments, VARIANT& MakePublic)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x803, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SaveChanges, &Comments, &MakePublic);
		}
		BOOL CanCheckIn()
		{
			BOOL result;
			InvokeHelper(0x805, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void SendForReview(VARIANT& Recipients, VARIANT& Subject, VARIANT& ShowMessage, VARIANT& IncludeAttachment)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x806, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Recipients, &Subject, &ShowMessage, &IncludeAttachment);
		}
		void ReplyWithChanges(VARIANT& ShowMessage)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x809, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &ShowMessage);
		}
		void EndReview()
		{
			InvokeHelper(0x80a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_Password()
		{
			CString result;
			InvokeHelper(0x1ad, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Password(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x1ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_WritePassword()
		{
			CString result;
			InvokeHelper(0x468, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_WritePassword(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x468, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_PasswordEncryptionProvider()
		{
			CString result;
			InvokeHelper(0x80b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_PasswordEncryptionAlgorithm()
		{
			CString result;
			InvokeHelper(0x80c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long get_PasswordEncryptionKeyLength()
		{
			long result;
			InvokeHelper(0x80d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void SetPasswordEncryptionOptions(VARIANT& PasswordEncryptionProvider, VARIANT& PasswordEncryptionAlgorithm, VARIANT& PasswordEncryptionKeyLength, VARIANT& PasswordEncryptionFileProperties)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x80e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &PasswordEncryptionProvider, &PasswordEncryptionAlgorithm, &PasswordEncryptionKeyLength, &PasswordEncryptionFileProperties);
		}
		BOOL get_PasswordEncryptionFileProperties()
		{
			BOOL result;
			InvokeHelper(0x80f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ReadOnlyRecommended()
		{
			BOOL result;
			InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ReadOnlyRecommended(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void Protect(VARIANT& Password, VARIANT& Structure, VARIANT& Windows)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &Structure, &Windows);
		}
		LPDISPATCH get_SmartTagOptions()
		{
			LPDISPATCH result;
			InvokeHelper(0x810, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void RecheckSmartTags()
		{
			InvokeHelper(0x811, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Permission()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SharedWorkspace()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sync()
		{
			LPDISPATCH result;
			InvokeHelper(0x8da, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SendFaxOverInternet(VARIANT& Recipients, VARIANT& Subject, VARIANT& ShowMessage)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8db, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Recipients, &Subject, &ShowMessage);
		}
		LPDISPATCH get_XmlNamespaces()
		{
			LPDISPATCH result;
			InvokeHelper(0x8dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_XmlMaps()
		{
			LPDISPATCH result;
			InvokeHelper(0x8dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long XmlImport(LPCTSTR Url, LPDISPATCH * ImportMap, VARIANT& Overwrite, VARIANT& Destination)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_PDISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8de, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Url, ImportMap, &Overwrite, &Destination);
			return result;
		}
		LPDISPATCH get_SmartDocument()
		{
			LPDISPATCH result;
			InvokeHelper(0x8e1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DocumentLibraryVersions()
		{
			LPDISPATCH result;
			InvokeHelper(0x8e2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_InactiveListBorderVisible()
		{
			BOOL result;
			InvokeHelper(0x8e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_InactiveListBorderVisible(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayInkComments()
		{
			BOOL result;
			InvokeHelper(0x8e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayInkComments(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x8e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long XmlImportXml(LPCTSTR Data, LPDISPATCH * ImportMap, VARIANT& Overwrite, VARIANT& Destination)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_PDISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8e5, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Data, ImportMap, &Overwrite, &Destination);
			return result;
		}
		void SaveAsXMLData(LPCTSTR Filename, LPDISPATCH Map)
		{
			static BYTE parms[] = VTS_BSTR VTS_DISPATCH ;
			InvokeHelper(0x8e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, Map);
		}
		void ToggleFormsDesign()
		{
			InvokeHelper(0x8e7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_ContentTypeProperties()
		{
			LPDISPATCH result;
			InvokeHelper(0x9d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Connections()
		{
			LPDISPATCH result;
			InvokeHelper(0x9d1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void RemoveDocumentInformation(long RemoveDocInfoType)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x9d2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, RemoveDocInfoType);
		}
		LPDISPATCH get_Signatures()
		{
			LPDISPATCH result;
			InvokeHelper(0x9d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void CheckInWithVersion(VARIANT& SaveChanges, VARIANT& Comments, VARIANT& MakePublic, VARIANT& VersionType)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9d5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SaveChanges, &Comments, &MakePublic, &VersionType);
		}
		LPDISPATCH get_ServerPolicy()
		{
			LPDISPATCH result;
			InvokeHelper(0x9d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void LockServerFile()
		{
			InvokeHelper(0x9d8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_DocumentInspectors()
		{
			LPDISPATCH result;
			InvokeHelper(0x9d9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH GetWorkflowTasks()
		{
			LPDISPATCH result;
			InvokeHelper(0x9da, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH GetWorkflowTemplates()
		{
			LPDISPATCH result;
			InvokeHelper(0x9db, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName, VARIANT& IgnorePrintAreas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName, &IgnorePrintAreas);
		}
		LPDISPATCH get_ServerViewableItems()
		{
			LPDISPATCH result;
			InvokeHelper(0x9dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_TableStyles()
		{
			LPDISPATCH result;
			InvokeHelper(0x9dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_DefaultTableStyle()
		{
			VARIANT result;
			InvokeHelper(0x9de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_DefaultTableStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		VARIANT get_DefaultPivotTableStyle()
		{
			VARIANT result;
			InvokeHelper(0x9df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_DefaultPivotTableStyle(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x9df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		BOOL get_CheckCompatibility()
		{
			BOOL result;
			InvokeHelper(0x9e0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_CheckCompatibility(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_HasVBProject()
		{
			BOOL result;
			InvokeHelper(0x9e1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_CustomXMLParts()
		{
			LPDISPATCH result;
			InvokeHelper(0x9e2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_Final()
		{
			BOOL result;
			InvokeHelper(0x9e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_Final(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Research()
		{
			LPDISPATCH result;
			InvokeHelper(0x9e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Theme()
		{
			LPDISPATCH result;
			InvokeHelper(0x9e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ApplyTheme(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x9e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		BOOL get_Excel8CompatibilityMode()
		{
			BOOL result;
			InvokeHelper(0x9e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ConnectionsDisabled()
		{
			BOOL result;
			InvokeHelper(0x9e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void EnableConnections()
		{
			InvokeHelper(0x9e9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_ShowPivotChartActiveFields()
		{
			BOOL result;
			InvokeHelper(0x9ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowPivotChartActiveFields(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ExportAsFixedFormat(long Type, VARIANT& Filename, VARIANT& Quality, VARIANT& IncludeDocProperties, VARIANT& IgnorePrintAreas, VARIANT& From, VARIANT& To, VARIANT& OpenAfterPublish, VARIANT& FixedFormatExtClassPtr)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Filename, &Quality, &IncludeDocProperties, &IgnorePrintAreas, &From, &To, &OpenAfterPublish, &FixedFormatExtClassPtr);
		}
		LPDISPATCH get_IconSets()
		{
			LPDISPATCH result;
			InvokeHelper(0x9eb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_EncryptionProvider()
		{
			CString result;
			InvokeHelper(0x9ec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_EncryptionProvider(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x9ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DoNotPromptForConvert()
		{
			BOOL result;
			InvokeHelper(0x9ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DoNotPromptForConvert(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_ForceFullCalculation()
		{
			BOOL result;
			InvokeHelper(0x9ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ForceFullCalculation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void ProtectSharing(VARIANT& Filename, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& SharingPassword, VARIANT& FileFormat)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9ef, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Filename, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &SharingPassword, &FileFormat);
		}

		// _Workbook properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorkbookConnection wrapper class

	class CWorkbookConnection : public COleDispatchDriver
	{
	public:
		CWorkbookConnection(){} // Calls COleDispatchDriver default constructor
		CWorkbookConnection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorkbookConnection(const CWorkbookConnection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// WorkbookConnection methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_Description()
		{
			CString result;
			InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Description(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0xda, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__Default(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_OLEDBConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0xa89, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_ODBCConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0xa8a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Ranges()
		{
			LPDISPATCH result;
			InvokeHelper(0xa8b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Refresh()
		{
			InvokeHelper(0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}

		// WorkbookConnection properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorkbookEvents wrapper class

	class CWorkbookEvents : public COleDispatchDriver
	{
	public:
		CWorkbookEvents(){} // Calls COleDispatchDriver default constructor
		CWorkbookEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorkbookEvents(const CWorkbookEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// WorkbookEvents methods
	public:
		void Open()
		{
			InvokeHelper(0x783, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Deactivate()
		{
			InvokeHelper(0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void BeforeClose(BOOL * Cancel)
		{
			static BYTE parms[] = VTS_PBOOL ;
			InvokeHelper(0x60a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Cancel);
		}
		void BeforeSave(BOOL SaveAsUI, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_BOOL VTS_PBOOL ;
			InvokeHelper(0x60b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SaveAsUI, Cancel);
		}
		void BeforePrint(BOOL * Cancel)
		{
			static BYTE parms[] = VTS_PBOOL ;
			InvokeHelper(0x60d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Cancel);
		}
		void NewSheet(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x60e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void AddinInstall()
		{
			InvokeHelper(0x610, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void AddinUninstall()
		{
			InvokeHelper(0x611, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void WindowResize(LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x612, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wn);
		}
		void WindowActivate(LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x614, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wn);
		}
		void WindowDeactivate(LPDISPATCH Wn)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x615, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Wn);
		}
		void SheetSelectionChange(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x616, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void SheetBeforeDoubleClick(LPDISPATCH Sh, LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x617, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target, Cancel);
		}
		void SheetBeforeRightClick(LPDISPATCH Sh, LPDISPATCH Target, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_PBOOL ;
			InvokeHelper(0x618, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target, Cancel);
		}
		void SheetActivate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x619, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetDeactivate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetCalculate(LPDISPATCH Sh)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh);
		}
		void SheetChange(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void SheetFollowHyperlink(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void SheetPivotTableUpdate(LPDISPATCH Sh, LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
			InvokeHelper(0x86d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Sh, Target);
		}
		void PivotTableCloseConnection(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x86e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}
		void PivotTableOpenConnection(LPDISPATCH Target)
		{
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x86f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Target);
		}
		void Sync(long SyncEventType)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x8da, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SyncEventType);
		}
		void BeforeXmlImport(LPDISPATCH Map, LPCTSTR Url, BOOL IsRefresh, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_BOOL VTS_PBOOL ;
			InvokeHelper(0x8eb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Map, Url, IsRefresh, Cancel);
		}
		void AfterXmlImport(LPDISPATCH Map, BOOL IsRefresh, long Result)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_I4 ;
			InvokeHelper(0x8ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Map, IsRefresh, Result);
		}
		void BeforeXmlExport(LPDISPATCH Map, LPCTSTR Url, BOOL * Cancel)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_PBOOL ;
			InvokeHelper(0x8ef, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Map, Url, Cancel);
		}
		void AfterXmlExport(LPDISPATCH Map, LPCTSTR Url, long Result)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_I4 ;
			InvokeHelper(0x8f0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Map, Url, Result);
		}
		void RowsetComplete(LPCTSTR Description, LPCTSTR Sheet, BOOL Success)
		{
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BOOL ;
			InvokeHelper(0xa32, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Description, Sheet, Success);
		}

		// WorkbookEvents properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorkbooks wrapper class

	class CWorkbooks : public COleDispatchDriver
	{
	public:
		CWorkbooks(){} // Calls COleDispatchDriver default constructor
		CWorkbooks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorkbooks(const CWorkbooks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Workbooks methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Template)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Template);
			return result;
		}
		void Close()
		{
			InvokeHelper(0x115, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH _Open(LPCTSTR Filename, VARIANT& UpdateLinks, VARIANT& ReadOnly, VARIANT& Format, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& Origin, VARIANT& Delimiter, VARIANT& Editable, VARIANT& Notify, VARIANT& Converter, VARIANT& AddToMru)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &UpdateLinks, &ReadOnly, &Format, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &Origin, &Delimiter, &Editable, &Notify, &Converter, &AddToMru);
			return result;
		}
		void __OpenText(LPCTSTR Filename, VARIANT& Origin, VARIANT& StartRow, VARIANT& DataType, long TextQualifier, VARIANT& ConsecutiveDelimiter, VARIANT& Tab, VARIANT& Semicolon, VARIANT& Comma, VARIANT& Space, VARIANT& Other, VARIANT& OtherChar, VARIANT& FieldInfo, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2ab, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &Origin, &StartRow, &DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &TextVisualLayout);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _OpenText(LPCTSTR Filename, VARIANT& Origin, VARIANT& StartRow, VARIANT& DataType, long TextQualifier, VARIANT& ConsecutiveDelimiter, VARIANT& Tab, VARIANT& Semicolon, VARIANT& Comma, VARIANT& Space, VARIANT& Other, VARIANT& OtherChar, VARIANT& FieldInfo, VARIANT& TextVisualLayout, VARIANT& DecimalSeparator, VARIANT& ThousandsSeparator)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &Origin, &StartRow, &DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &TextVisualLayout, &DecimalSeparator, &ThousandsSeparator);
		}
		LPDISPATCH Open(LPCTSTR Filename, VARIANT& UpdateLinks, VARIANT& ReadOnly, VARIANT& Format, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& Origin, VARIANT& Delimiter, VARIANT& Editable, VARIANT& Notify, VARIANT& Converter, VARIANT& AddToMru, VARIANT& Local, VARIANT& CorruptLoad)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x783, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &UpdateLinks, &ReadOnly, &Format, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &Origin, &Delimiter, &Editable, &Notify, &Converter, &AddToMru, &Local, &CorruptLoad);
			return result;
		}
		void OpenText(LPCTSTR Filename, VARIANT& Origin, VARIANT& StartRow, VARIANT& DataType, long TextQualifier, VARIANT& ConsecutiveDelimiter, VARIANT& Tab, VARIANT& Semicolon, VARIANT& Comma, VARIANT& Space, VARIANT& Other, VARIANT& OtherChar, VARIANT& FieldInfo, VARIANT& TextVisualLayout, VARIANT& DecimalSeparator, VARIANT& ThousandsSeparator, VARIANT& TrailingMinusNumbers, VARIANT& Local)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x784, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &Origin, &StartRow, &DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &TextVisualLayout, &DecimalSeparator, &ThousandsSeparator, &TrailingMinusNumbers, &Local);
		}
		LPDISPATCH OpenDatabase(LPCTSTR Filename, VARIANT& CommandText, VARIANT& CommandType, VARIANT& BackgroundQuery, VARIANT& ImportDataAs)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x813, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &CommandText, &CommandType, &BackgroundQuery, &ImportDataAs);
			return result;
		}
		void CheckOut(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x815, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		BOOL CanCheckOut(LPCTSTR Filename)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x816, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Filename);
			return result;
		}
		LPDISPATCH _OpenXML(LPCTSTR Filename, VARIANT& Stylesheets)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x817, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &Stylesheets);
			return result;
		}
		LPDISPATCH OpenXML(LPCTSTR Filename, VARIANT& Stylesheets, VARIANT& LoadOption)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8e8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Filename, &Stylesheets, &LoadOption);
			return result;
		}

		// Workbooks properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorksheet wrapper class

	class CWorksheet : public COleDispatchDriver
	{
	public:
		CWorksheet(){} // Calls COleDispatchDriver default constructor
		CWorksheet(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorksheet(const CWorksheet& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// _Worksheet methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Activate()
		{
			InvokeHelper(0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_CodeName()
		{
			CString result;
			InvokeHelper(0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get__CodeName()
		{
			CString result;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put__CodeName(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Index()
		{
			long result;
			InvokeHelper(0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Next()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_OnDoubleClick()
		{
			CString result;
			InvokeHelper(0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnDoubleClick(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetActivate()
		{
			CString result;
			InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetActivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnSheetDeactivate()
		{
			CString result;
			InvokeHelper(0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnSheetDeactivate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_PageSetup()
		{
			LPDISPATCH result;
			InvokeHelper(0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Previous()
		{
			LPDISPATCH result;
			InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void _Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
		}
		BOOL get_ProtectContents()
		{
			BOOL result;
			InvokeHelper(0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectDrawingObjects()
		{
			BOOL result;
			InvokeHelper(0x125, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectionMode()
		{
			BOOL result;
			InvokeHelper(0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ProtectScenarios()
		{
			BOOL result;
			InvokeHelper(0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void _SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		void Unprotect(VARIANT& Password)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password);
		}
		long get_Visible()
		{
			long result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_Visible(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Shapes()
		{
			LPDISPATCH result;
			InvokeHelper(0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_TransitionExpEval()
		{
			BOOL result;
			InvokeHelper(0x191, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TransitionExpEval(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x191, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Arcs(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2f8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_AutoFilterMode()
		{
			BOOL result;
			InvokeHelper(0x318, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AutoFilterMode(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x318, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		void SetBackgroundPicture(LPCTSTR Filename)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4a4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename);
		}
		LPDISPATCH Buttons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Calculate()
		{
			InvokeHelper(0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_EnableCalculation()
		{
			BOOL result;
			InvokeHelper(0x590, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableCalculation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x590, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Cells()
		{
			LPDISPATCH result;
			InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH ChartObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x424, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH CheckBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x338, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
		}
		LPDISPATCH get_CircularReference()
		{
			LPDISPATCH result;
			InvokeHelper(0x42d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ClearArrows()
		{
			InvokeHelper(0x3ca, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH get_Columns()
		{
			LPDISPATCH result;
			InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_ConsolidationFunction()
		{
			long result;
			InvokeHelper(0x315, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ConsolidationOptions()
		{
			VARIANT result;
			InvokeHelper(0x316, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		VARIANT get_ConsolidationSources()
		{
			VARIANT result;
			InvokeHelper(0x317, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayAutomaticPageBreaks()
		{
			BOOL result;
			InvokeHelper(0x283, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayAutomaticPageBreaks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x283, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH Drawings(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x304, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DrawingObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x58, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH DropDowns(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x344, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_EnableAutoFilter()
		{
			BOOL result;
			InvokeHelper(0x484, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableAutoFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x484, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_EnableSelection()
		{
			long result;
			InvokeHelper(0x591, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put_EnableSelection(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x591, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnableOutlining()
		{
			BOOL result;
			InvokeHelper(0x485, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableOutlining(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x485, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_EnablePivotTable()
		{
			BOOL result;
			InvokeHelper(0x486, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnablePivotTable(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x486, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		VARIANT Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		VARIANT _Evaluate(VARIANT& Name)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Name);
			return result;
		}
		BOOL get_FilterMode()
		{
			BOOL result;
			InvokeHelper(0x320, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void ResetAllPageBreaks()
		{
			InvokeHelper(0x592, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH GroupBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x342, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH GroupObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x459, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Labels(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x349, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH Lines(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH ListBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x340, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Names()
		{
			LPDISPATCH result;
			InvokeHelper(0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH OLEObjects(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x31f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		CString get_OnCalculate()
		{
			CString result;
			InvokeHelper(0x271, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnCalculate(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x271, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnData()
		{
			CString result;
			InvokeHelper(0x275, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnData(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x275, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_OnEntry()
		{
			CString result;
			InvokeHelper(0x273, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_OnEntry(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x273, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH OptionButtons(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Outline()
		{
			LPDISPATCH result;
			InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Ovals(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x321, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Paste(VARIANT& Destination, VARIANT& Link)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Destination, &Link);
		}
		void _PasteSpecial(VARIANT& Format, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel);
		}
		LPDISPATCH Pictures(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x303, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH PivotTables(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x2b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH PivotTableWizard(VARIANT& SourceType, VARIANT& SourceData, VARIANT& TableDestination, VARIANT& TableName, VARIANT& RowGrand, VARIANT& ColumnGrand, VARIANT& SaveData, VARIANT& HasAutoFormat, VARIANT& AutoPage, VARIANT& Reserved, VARIANT& BackgroundQuery, VARIANT& OptimizeCache, VARIANT& PageFieldOrder, VARIANT& PageFieldWrapCount, VARIANT& ReadData, VARIANT& Connection)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x2ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage, &Reserved, &BackgroundQuery, &OptimizeCache, &PageFieldOrder, &PageFieldWrapCount, &ReadData, &Connection);
			return result;
		}
		LPDISPATCH get_Range(VARIANT& Cell1, VARIANT& Cell2)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Cell1, &Cell2);
			return result;
		}
		LPDISPATCH Rectangles(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x306, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Rows()
		{
			LPDISPATCH result;
			InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Scenarios(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x38c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		CString get_ScrollArea()
		{
			CString result;
			InvokeHelper(0x599, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_ScrollArea(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x599, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH ScrollBars(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void ShowAllData()
		{
			InvokeHelper(0x31a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void ShowDataForm()
		{
			InvokeHelper(0x199, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		LPDISPATCH Spinners(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x346, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		double get_StandardHeight()
		{
			double result;
			InvokeHelper(0x197, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		double get_StandardWidth()
		{
			double result;
			InvokeHelper(0x198, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
			return result;
		}
		void put_StandardWidth(double newValue)
		{
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x198, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH TextBoxes(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x309, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		BOOL get_TransitionFormEntry()
		{
			BOOL result;
			InvokeHelper(0x192, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_TransitionFormEntry(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x192, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		long get_Type()
		{
			long result;
			InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_UsedRange()
		{
			LPDISPATCH result;
			InvokeHelper(0x19c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_QueryTables()
		{
			LPDISPATCH result;
			InvokeHelper(0x59a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayPageBreaks()
		{
			BOOL result;
			InvokeHelper(0x59b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayPageBreaks(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x59b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Comments()
		{
			LPDISPATCH result;
			InvokeHelper(0x23f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Hyperlinks()
		{
			LPDISPATCH result;
			InvokeHelper(0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ClearCircles()
		{
			InvokeHelper(0x59c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void CircleInvalid()
		{
			InvokeHelper(0x59d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long get__DisplayRightToLeft()
		{
			long result;
			InvokeHelper(0x288, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void put__DisplayRightToLeft(long newValue)
		{
			static BYTE parms[] = VTS_I4 ;
			InvokeHelper(0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_AutoFilter()
		{
			LPDISPATCH result;
			InvokeHelper(0x319, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayRightToLeft()
		{
			BOOL result;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayRightToLeft(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Scripts()
		{
			LPDISPATCH result;
			InvokeHelper(0x718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void _CheckSpelling(VARIANT& CustomDictionary, VARIANT& IgnoreUppercase, VARIANT& AlwaysSuggest, VARIANT& SpellLang, VARIANT& IgnoreFinalYaa, VARIANT& SpellScript)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x719, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang, &IgnoreFinalYaa, &SpellScript);
		}
		LPDISPATCH get_Tab()
		{
			LPDISPATCH result;
			InvokeHelper(0x411, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_MailEnvelope()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SaveAs(LPCTSTR Filename, VARIANT& FileFormat, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ReadOnlyRecommended, VARIANT& CreateBackup, VARIANT& AddToMru, VARIANT& TextCodepage, VARIANT& TextVisualLayout, VARIANT& Local)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x785, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout, &Local);
		}
		LPDISPATCH get_CustomProperties()
		{
			LPDISPATCH result;
			InvokeHelper(0x7ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_SmartTags()
		{
			LPDISPATCH result;
			InvokeHelper(0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Protection()
		{
			LPDISPATCH result;
			InvokeHelper(0xb0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void PasteSpecial(VARIANT& Format, VARIANT& Link, VARIANT& DisplayAsIcon, VARIANT& IconFileName, VARIANT& IconIndex, VARIANT& IconLabel, VARIANT& NoHTMLFormatting)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x788, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &NoHTMLFormatting);
		}
		void Protect(VARIANT& Password, VARIANT& DrawingObjects, VARIANT& Contents, VARIANT& Scenarios, VARIANT& UserInterfaceOnly, VARIANT& AllowFormattingCells, VARIANT& AllowFormattingColumns, VARIANT& AllowFormattingRows, VARIANT& AllowInsertingColumns, VARIANT& AllowInsertingRows, VARIANT& AllowInsertingHyperlinks, VARIANT& AllowDeletingColumns, VARIANT& AllowDeletingRows, VARIANT& AllowSorting, VARIANT& AllowFiltering, VARIANT& AllowUsingPivotTables)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly, &AllowFormattingCells, &AllowFormattingColumns, &AllowFormattingRows, &AllowInsertingColumns, &AllowInsertingRows, &AllowInsertingHyperlinks, &AllowDeletingColumns, &AllowDeletingRows, &AllowSorting, &AllowFiltering, &AllowUsingPivotTables);
		}
		LPDISPATCH get_ListObjects()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH XmlDataQuery(LPCTSTR XPath, VARIANT& SelectionNamespaces, VARIANT& Map)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8d4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, XPath, &SelectionNamespaces, &Map);
			return result;
		}
		LPDISPATCH XmlMapQuery(LPCTSTR XPath, VARIANT& SelectionNamespaces, VARIANT& Map)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x8d7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, XPath, &SelectionNamespaces, &Map);
			return result;
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName, VARIANT& IgnorePrintAreas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName, &IgnorePrintAreas);
		}
		BOOL get_EnableFormatConditionsCalculation()
		{
			BOOL result;
			InvokeHelper(0x9cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_EnableFormatConditionsCalculation(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x9cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		LPDISPATCH get_Sort()
		{
			LPDISPATCH result;
			InvokeHelper(0x370, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void ExportAsFixedFormat(long Type, VARIANT& Filename, VARIANT& Quality, VARIANT& IncludeDocProperties, VARIANT& IgnorePrintAreas, VARIANT& From, VARIANT& To, VARIANT& OpenAfterPublish, VARIANT& FixedFormatExtClassPtr)
		{
			static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x9bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Type, &Filename, &Quality, &IncludeDocProperties, &IgnorePrintAreas, &From, &To, &OpenAfterPublish, &FixedFormatExtClassPtr);
		}

		// _Worksheet properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorksheetFunction wrapper class

	class CWorksheetFunction : public COleDispatchDriver
	{
	public:
		CWorksheetFunction(){} // Calls COleDispatchDriver default constructor
		CWorksheetFunction(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorksheetFunction(const CWorksheetFunction& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// WorksheetFunction methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT _WSFunction(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Count(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4000, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		BOOL IsNA(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4002, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		BOOL IsError(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4003, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		double Sum(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4004, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Average(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4005, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Min(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4006, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Max(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4007, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Npv(double Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x400b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double StDev(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x400c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		CString Dollar(double Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x400d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, &Arg2);
			return result;
		}
		CString Fixed(double Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			CString result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x400e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double Pi()
		{
			double result;
			InvokeHelper(0x4013, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
			return result;
		}
		double Ln(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4016, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Log10(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4017, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Round(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x401b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		VARIANT Lookup(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x401c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		VARIANT Index(VARIANT& Arg1, double Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x401d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, Arg2, &Arg3, &Arg4);
			return result;
		}
		CString Rept(LPCTSTR Arg1, double Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR VTS_R8 ;
			InvokeHelper(0x401e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		BOOL And(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4024, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		BOOL Or(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4025, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double DCount(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4028, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DSum(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4029, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DAverage(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DMin(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DMax(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DStDev(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double Var(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double DVar(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x402f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		CString Text(VARIANT& Arg1, LPCTSTR Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
			InvokeHelper(0x4030, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		VARIANT LinEst(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4031, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		VARIANT Trend(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4032, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		VARIANT LogEst(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4033, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		VARIANT Growth(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4034, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double Pv(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4038, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double Fv(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4039, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double NPer(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double Pmt(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double Rate(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double MIrr(VARIANT& Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 VTS_R8 ;
			InvokeHelper(0x403d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2, Arg3);
			return result;
		}
		double Irr(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x403e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Match(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4040, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double Weekday(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4046, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Search(LPCTSTR Arg1, LPCTSTR Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x4052, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3);
			return result;
		}
		VARIANT Transpose(VARIANT& Arg1)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4053, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1);
			return result;
		}
		double Atan2(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4061, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Asin(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4062, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Acos(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4063, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		VARIANT Choose(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4064, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		VARIANT HLookup(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4065, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		VARIANT VLookup(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4066, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double Log(double Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x406d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2);
			return result;
		}
		CString Proper(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4072, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString Trim(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4076, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString Replace(LPCTSTR Arg1, double Arg2, double Arg3, LPCTSTR Arg4)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR VTS_R8 VTS_R8 VTS_BSTR ;
			InvokeHelper(0x4077, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		CString Substitute(LPCTSTR Arg1, LPCTSTR Arg2, LPCTSTR Arg3, VARIANT& Arg4)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x4078, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4);
			return result;
		}
		double Find(LPCTSTR Arg1, LPCTSTR Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x407c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3);
			return result;
		}
		BOOL IsErr(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x407e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		BOOL IsText(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x407f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		BOOL IsNumber(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4080, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		double Sln(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x408e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Syd(double Arg1, double Arg2, double Arg3, double Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x408f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double Ddb(double Arg1, double Arg2, double Arg3, double Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x4090, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4, &Arg5);
			return result;
		}
		CString Clean(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x40a2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		double MDeterm(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x40a3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		VARIANT MInverse(VARIANT& Arg1)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x40a4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1);
			return result;
		}
		VARIANT MMult(VARIANT& Arg1, VARIANT& Arg2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40a5, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Ipmt(double Arg1, double Arg2, double Arg3, double Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40a7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
			return result;
		}
		double Ppmt(double Arg1, double Arg2, double Arg3, double Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40a8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
			return result;
		}
		double CountA(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40a9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Product(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40b7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Fact(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40b8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double DProduct(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40bd, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		BOOL IsNonText(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x40be, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		double StDevP(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40c1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double VarP(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40c2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double DStDevP(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40c3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double DVarP(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40c4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		BOOL IsLogical(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x40c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		double DCountA(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40c7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		CString USDollar(double Arg1, double Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x40cc, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double FindB(LPCTSTR Arg1, LPCTSTR Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x40cd, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3);
			return result;
		}
		double SearchB(LPCTSTR Arg1, LPCTSTR Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x40ce, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3);
			return result;
		}
		CString ReplaceB(LPCTSTR Arg1, double Arg2, double Arg3, LPCTSTR Arg4)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR VTS_R8 VTS_R8 VTS_BSTR ;
			InvokeHelper(0x40cf, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double RoundUp(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x40d4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double RoundDown(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x40d5, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Rank(double Arg1, LPDISPATCH Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_DISPATCH VTS_VARIANT ;
			InvokeHelper(0x40d8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3);
			return result;
		}
		double Days360(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40dc, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double Vdb(double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, VARIANT& Arg6, VARIANT& Arg7)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40de, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4, Arg5, &Arg6, &Arg7);
			return result;
		}
		double Median(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40e3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double SumProduct(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40e4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Sinh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40e5, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Cosh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40e6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Tanh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40e7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Asinh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40e8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Acosh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40e9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Atanh(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x40ea, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		VARIANT DGet(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			VARIANT result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40eb, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double Db(double Arg1, double Arg2, double Arg3, double Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x40f7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4, &Arg5);
			return result;
		}
		VARIANT Frequency(VARIANT& Arg1, VARIANT& Arg2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x40fc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double AveDev(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x410d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double BetaDist(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x410e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double GammaLn(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x410f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double BetaInv(double Arg1, double Arg2, double Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4110, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, &Arg4, &Arg5);
			return result;
		}
		double BinomDist(double Arg1, double Arg2, double Arg3, BOOL Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x4111, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double ChiDist(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4112, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double ChiInv(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4113, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Combin(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4114, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Confidence(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4115, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double CritBinom(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4116, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Even(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4117, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double ExponDist(double Arg1, double Arg2, BOOL Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x4118, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double FDist(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4119, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double FInv(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x411a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Fisher(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x411b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double FisherInv(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x411c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Floor(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x411d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double GammaDist(double Arg1, double Arg2, double Arg3, BOOL Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x411e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double GammaInv(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x411f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Ceiling(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4120, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4121, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double LogNormDist(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4122, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double LogInv(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4123, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double NegBinomDist(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4124, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double NormDist(double Arg1, double Arg2, double Arg3, BOOL Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x4125, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double NormSDist(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4126, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double NormInv(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4127, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double NormSInv(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4128, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Standardize(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x4129, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Odd(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x412a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Permut(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x412b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Poisson(double Arg1, double Arg2, BOOL Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x412c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double TDist(double Arg1, double Arg2, double Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x412d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3);
			return result;
		}
		double Weibull(double Arg1, double Arg2, double Arg3, BOOL Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_BOOL ;
			InvokeHelper(0x412e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		double SumXMY2(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x412f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double SumX2MY2(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4130, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double SumX2PY2(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4131, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double ChiTest(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4132, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Correl(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4133, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Covar(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4134, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Forecast(double Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4135, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double FTest(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4136, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Intercept(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4137, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Pearson(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4138, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double RSq(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4139, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double StEyx(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x413a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Slope(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x413b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double TTest(VARIANT& Arg1, VARIANT& Arg2, double Arg3, double Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_R8 VTS_R8 ;
			InvokeHelper(0x413c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, Arg3, Arg4);
			return result;
		}
		double Prob(VARIANT& Arg1, VARIANT& Arg2, double Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x413d, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, Arg3, &Arg4);
			return result;
		}
		double DevSq(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x413e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double GeoMean(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x413f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double HarMean(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4140, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double SumSq(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4141, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Kurt(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4142, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Skew(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4143, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double ZTest(VARIANT& Arg1, double Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x4144, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2, &Arg3);
			return result;
		}
		double Large(VARIANT& Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 ;
			InvokeHelper(0x4145, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		double Small(VARIANT& Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 ;
			InvokeHelper(0x4146, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		double Quartile(VARIANT& Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 ;
			InvokeHelper(0x4147, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		double Percentile(VARIANT& Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 ;
			InvokeHelper(0x4148, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		double PercentRank(VARIANT& Arg1, double Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x4149, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2, &Arg3);
			return result;
		}
		double Mode(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x414a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double TrimMean(VARIANT& Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_R8 ;
			InvokeHelper(0x414b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, Arg2);
			return result;
		}
		double TInv(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x414c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Power(double Arg1, double Arg2)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 ;
			InvokeHelper(0x4151, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2);
			return result;
		}
		double Radians(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4156, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Degrees(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4157, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Subtotal(double Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4158, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double SumIf(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4159, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double CountIf(LPDISPATCH Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT ;
			InvokeHelper(0x415a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2);
			return result;
		}
		double CountBlank(LPDISPATCH Arg1)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x415b, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4)
		{
			double result;
			static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 ;
			InvokeHelper(0x415e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, Arg3, Arg4);
			return result;
		}
		CString Roman(double Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_R8 VTS_VARIANT ;
			InvokeHelper(0x4162, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1, &Arg2);
			return result;
		}
		CString Asc(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x40d6, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString Dbcs(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x40d7, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString Phonetic(LPDISPATCH Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_DISPATCH ;
			InvokeHelper(0x4168, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString BahtText(double Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4170, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString ThaiDayOfWeek(double Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4171, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString ThaiDigit(LPCTSTR Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4172, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString ThaiMonthOfYear(double Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4173, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString ThaiNumSound(double Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4174, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		CString ThaiNumString(double Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4175, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Arg1);
			return result;
		}
		double ThaiStringLength(LPCTSTR Arg1)
		{
			double result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4176, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		BOOL IsThaiDigit(LPCTSTR Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x4177, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Arg1);
			return result;
		}
		double RoundBahtDown(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4178, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double RoundBahtUp(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x4179, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		double ThaiYear(double Arg1)
		{
			double result;
			static BYTE parms[] = VTS_R8 ;
			InvokeHelper(0x417a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1);
			return result;
		}
		VARIANT RTD(VARIANT& progID, VARIANT& server, VARIANT& topic1, VARIANT& topic2, VARIANT& topic3, VARIANT& topic4, VARIANT& topic5, VARIANT& topic6, VARIANT& topic7, VARIANT& topic8, VARIANT& topic9, VARIANT& topic10, VARIANT& topic11, VARIANT& topic12, VARIANT& topic13, VARIANT& topic14, VARIANT& topic15, VARIANT& topic16, VARIANT& topic17, VARIANT& topic18, VARIANT& topic19, VARIANT& topic20, VARIANT& topic21, VARIANT& topic22, VARIANT& topic23, VARIANT& topic24, VARIANT& topic25, VARIANT& topic26, VARIANT& topic27, VARIANT& topic28)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x417b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &progID, &server, &topic1, &topic2, &topic3, &topic4, &topic5, &topic6, &topic7, &topic8, &topic9, &topic10, &topic11, &topic12, &topic13, &topic14, &topic15, &topic16, &topic17, &topic18, &topic19, &topic20, &topic21, &topic22, &topic23, &topic24, &topic25, &topic26, &topic27, &topic28);
			return result;
		}
		CString Hex2Bin(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4180, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Hex2Dec(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4181, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString Hex2Oct(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4182, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Dec2Bin(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4183, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Dec2Hex(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4184, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Dec2Oct(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4185, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Oct2Bin(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4186, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Oct2Hex(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x4187, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Oct2Dec(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4188, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString Bin2Dec(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4189, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString Bin2Oct(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x418a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString Bin2Hex(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x418b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString ImSub(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x418c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString ImDiv(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x418d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString ImPower(VARIANT& Arg1, VARIANT& Arg2)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x418e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		CString ImAbs(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x418f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImSqrt(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4190, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImLn(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4191, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImLog2(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4192, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImLog10(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4193, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImSin(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4194, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImCos(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4195, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImExp(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4196, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImArgument(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4197, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		CString ImConjugate(VARIANT& Arg1)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4198, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1);
			return result;
		}
		double Imaginary(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x4199, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		double ImReal(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x419a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		CString Complex(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x419b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		CString ImSum(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x419c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		CString ImProduct(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			CString result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x419d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double SeriesSum(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x419e, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double FactDouble(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x419f, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		double SqrtPi(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x41a0, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		double Quotient(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Delta(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double GeStep(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		BOOL IsEven(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x41a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		BOOL IsOdd(VARIANT& Arg1)
		{
			BOOL result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x41a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Arg1);
			return result;
		}
		double MRound(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Erf(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double ErfC(VARIANT& Arg1)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x41a8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1);
			return result;
		}
		double BesselJ(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41a9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double BesselK(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41aa, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double BesselY(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ab, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double BesselI(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ac, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Xirr(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ad, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double Xnpv(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ae, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double PriceMat(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41af, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double YieldMat(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b0, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double IntRate(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double Received(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double Disc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double PriceDisc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double YieldDisc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b5, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double TBillEq(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double TBillPrice(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double TBillYield(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double Price(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41b9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7);
			return result;
		}
		double DollarDe(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41bb, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double DollarFr(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41bc, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Nominal(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41bd, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double Effect(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41be, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double CumPrinc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41bf, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double CumIPmt(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c0, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double EDate(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double EoMonth(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double YearFrac(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double CoupDayBs(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double CoupDays(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c5, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double CoupDaysNc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double CoupNcd(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double CoupNum(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double CoupPcd(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41c9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4);
			return result;
		}
		double Duration(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ca, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double MDuration(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41cb, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6);
			return result;
		}
		double OddLPrice(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41cc, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8);
			return result;
		}
		double OddLYield(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41cd, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8);
			return result;
		}
		double OddFPrice(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41ce, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9);
			return result;
		}
		double OddFYield(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41cf, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9);
			return result;
		}
		double RandBetween(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d0, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double WeekNum(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double AmorDegrc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7);
			return result;
		}
		double AmorLinc(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7);
			return result;
		}
		double Convert(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double AccrInt(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d5, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7);
			return result;
		}
		double AccrIntM(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5);
			return result;
		}
		double WorkDay(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d7, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double NetworkDays(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d8, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3);
			return result;
		}
		double Gcd(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41d9, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double MultiNomial(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41da, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double Lcm(VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41db, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double FVSchedule(VARIANT& Arg1, VARIANT& Arg2)
		{
			double result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41dc, DISPATCH_METHOD, VT_R8, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}
		double SumIfs(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41e2, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29);
			return result;
		}
		double CountIfs(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41e1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
			return result;
		}
		double AverageIf(LPDISPATCH Arg1, VARIANT& Arg2, VARIANT& Arg3)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41e3, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, &Arg2, &Arg3);
			return result;
		}
		double AverageIfs(LPDISPATCH Arg1, LPDISPATCH Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29)
		{
			double result;
			static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41e4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29);
			return result;
		}
		VARIANT IfError(VARIANT& Arg1, VARIANT& Arg2)
		{
			VARIANT result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x41e0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Arg1, &Arg2);
			return result;
		}

		// WorksheetFunction properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorksheets wrapper class

	class CWorksheets : public COleDispatchDriver
	{
	public:
		CWorksheets(){} // Calls COleDispatchDriver default constructor
		CWorksheets(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorksheets(const CWorksheets& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// Worksheets methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(VARIANT& Before, VARIANT& After, VARIANT& Count, VARIANT& Type)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Before, &After, &Count, &Type);
			return result;
		}
		void Copy(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x227, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		void FillAcrossSheets(LPDISPATCH Range, long Type)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
			InvokeHelper(0x1d5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Range, Type);
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void Move(VARIANT& Before, VARIANT& After)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Before, &After);
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void __PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x389, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
		}
		void PrintPreview(VARIANT& EnableChanges)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x119, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &EnableChanges);
		}
		void Select(VARIANT& Replace)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Replace);
		}
		LPDISPATCH get_HPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_VPageBreaks()
		{
			LPDISPATCH result;
			InvokeHelper(0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		VARIANT get_Visible()
		{
			VARIANT result;
			InvokeHelper(0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
			return result;
		}
		void put_Visible(VARIANT& newValue)
		{
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		void _PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
		}
		void PrintOut(VARIANT& From, VARIANT& To, VARIANT& Copies, VARIANT& Preview, VARIANT& ActivePrinter, VARIANT& PrintToFile, VARIANT& Collate, VARIANT& PrToFileName, VARIANT& IgnorePrintAreas)
		{
			static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x939, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName, &IgnorePrintAreas);
		}

		// Worksheets properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CWorksheetView wrapper class

	class CWorksheetView : public COleDispatchDriver
	{
	public:
		CWorksheetView(){} // Calls COleDispatchDriver default constructor
		CWorksheetView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CWorksheetView(const CWorksheetView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// WorksheetView methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Sheet()
		{
			LPDISPATCH result;
			InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		BOOL get_DisplayGridlines()
		{
			BOOL result;
			InvokeHelper(0x285, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayGridlines(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x285, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayFormulas()
		{
			BOOL result;
			InvokeHelper(0x284, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayFormulas(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayHeadings()
		{
			BOOL result;
			InvokeHelper(0x286, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayHeadings(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayOutline()
		{
			BOOL result;
			InvokeHelper(0x287, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayOutline(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_DisplayZeros()
		{
			BOOL result;
			InvokeHelper(0x289, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_DisplayZeros(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x289, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}

		// WorksheetView properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlDataBinding wrapper class

	class CXmlDataBinding : public COleDispatchDriver
	{
	public:
		CXmlDataBinding(){} // Calls COleDispatchDriver default constructor
		CXmlDataBinding(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlDataBinding(const CXmlDataBinding& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlDataBinding methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		long Refresh()
		{
			long result;
			InvokeHelper(0x589, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
			return result;
		}
		void LoadSettings(LPCTSTR Url)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x919, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Url);
		}
		void ClearSettings()
		{
			InvokeHelper(0x91a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		CString get_SourceUrl()
		{
			CString result;
			InvokeHelper(0x91b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// XmlDataBinding properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlMap wrapper class

	class CXmlMap : public COleDispatchDriver
	{
	public:
		CXmlMap(){} // Calls COleDispatchDriver default constructor
		CXmlMap(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlMap(const CXmlMap& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlMap methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		void put_Name(LPCTSTR newValue)
		{
			static BYTE parms[] = VTS_BSTR ;
			InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_IsExportable()
		{
			BOOL result;
			InvokeHelper(0x91e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		BOOL get_ShowImportExportValidationErrors()
		{
			BOOL result;
			InvokeHelper(0x91f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_ShowImportExportValidationErrors(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x91f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_SaveDataSourceDefinition()
		{
			BOOL result;
			InvokeHelper(0x920, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_SaveDataSourceDefinition(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x920, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AdjustColumnWidth()
		{
			BOOL result;
			InvokeHelper(0x74c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AdjustColumnWidth(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x74c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PreserveColumnFilter()
		{
			BOOL result;
			InvokeHelper(0x921, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PreserveColumnFilter(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x921, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_PreserveNumberFormatting()
		{
			BOOL result;
			InvokeHelper(0x922, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_PreserveNumberFormatting(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x922, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		BOOL get_AppendOnImport()
		{
			BOOL result;
			InvokeHelper(0x923, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}
		void put_AppendOnImport(BOOL newValue)
		{
			static BYTE parms[] = VTS_BOOL ;
			InvokeHelper(0x923, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
		}
		CString get_RootElementName()
		{
			CString result;
			InvokeHelper(0x924, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_RootElementNamespace()
		{
			LPDISPATCH result;
			InvokeHelper(0x925, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Schemas()
		{
			LPDISPATCH result;
			InvokeHelper(0x926, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_DataBinding()
		{
			LPDISPATCH result;
			InvokeHelper(0x927, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void Delete()
		{
			InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		long Import(LPCTSTR Url, VARIANT& Overwrite)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x395, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Url, &Overwrite);
			return result;
		}
		long ImportXml(LPCTSTR XmlData, VARIANT& Overwrite)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x928, DISPATCH_METHOD, VT_I4, (void*)&result, parms, XmlData, &Overwrite);
			return result;
		}
		long Export(LPCTSTR Url, VARIANT& Overwrite)
		{
			long result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x586, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Url, &Overwrite);
			return result;
		}
		long ExportXml(BSTR * Data)
		{
			long result;
			static BYTE parms[] = VTS_PBSTR ;
			InvokeHelper(0x92a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Data);
			return result;
		}
		LPDISPATCH get_WorkbookConnection()
		{
			LPDISPATCH result;
			InvokeHelper(0x9f0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}

		// XmlMap properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlMaps wrapper class

	class CXmlMaps : public COleDispatchDriver
	{
	public:
		CXmlMaps(){} // Calls COleDispatchDriver default constructor
		CXmlMaps(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlMaps(const CXmlMaps& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlMaps methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH Add(LPCTSTR Schema, VARIANT& RootElementName)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Schema, &RootElementName);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// XmlMaps properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlNamespace wrapper class

	class CXmlNamespace : public COleDispatchDriver
	{
	public:
		CXmlNamespace(){} // Calls COleDispatchDriver default constructor
		CXmlNamespace(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlNamespace(const CXmlNamespace& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlNamespace methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Uri()
		{
			CString result;
			InvokeHelper(0x915, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Prefix()
		{
			CString result;
			InvokeHelper(0x916, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// XmlNamespace properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlNamespaces wrapper class

	class CXmlNamespaces : public COleDispatchDriver
	{
	public:
		CXmlNamespaces(){} // Calls COleDispatchDriver default constructor
		CXmlNamespaces(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlNamespaces(const CXmlNamespaces& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlNamespaces methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}
		void InstallManifest(LPCTSTR Path, VARIANT& InstallForAllUsers)
		{
			static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
			InvokeHelper(0x917, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Path, &InstallForAllUsers);
		}

		// XmlNamespaces properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlSchema wrapper class

	class CXmlSchema : public COleDispatchDriver
	{
	public:
		CXmlSchema(){} // Calls COleDispatchDriver default constructor
		CXmlSchema(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlSchema(const CXmlSchema& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlSchema methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Namespace()
		{
			LPDISPATCH result;
			InvokeHelper(0x91c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get_XML()
		{
			CString result;
			InvokeHelper(0x91d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Name()
		{
			CString result;
			InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}

		// XmlSchema properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXmlSchemas wrapper class

	class CXmlSchemas : public COleDispatchDriver
	{
	public:
		CXmlSchemas(){} // Calls COleDispatchDriver default constructor
		CXmlSchemas(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXmlSchemas(const CXmlSchemas& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XmlSchemas methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get__Default(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		LPDISPATCH get_Item(VARIANT& Index)
		{
			LPDISPATCH result;
			static BYTE parms[] = VTS_VARIANT ;
			InvokeHelper(0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
			return result;
		}
		long get_Count()
		{
			long result;
			InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPUNKNOWN get__NewEnum()
		{
			LPUNKNOWN result;
			InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
			return result;
		}

		// XmlSchemas properties
	public:

	};
	// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

	// CXPath wrapper class

	class CXPath : public COleDispatchDriver
	{
	public:
		CXPath(){} // Calls COleDispatchDriver default constructor
		CXPath(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
		CXPath(const CXPath& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

		// Attributes
	public:

		// Operations
	public:


		// XPath methods
	public:
		LPDISPATCH get_Application()
		{
			LPDISPATCH result;
			InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		long get_Creator()
		{
			long result;
			InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Parent()
		{
			LPDISPATCH result;
			InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		CString get__Default()
		{
			CString result;
			InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		CString get_Value()
		{
			CString result;
			InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
			return result;
		}
		LPDISPATCH get_Map()
		{
			LPDISPATCH result;
			InvokeHelper(0x8d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
			return result;
		}
		void SetValue(LPDISPATCH Map, LPCTSTR XPath, VARIANT& SelectionNamespace, VARIANT& Repeating)
		{
			static BYTE parms[] = VTS_DISPATCH VTS_BSTR VTS_VARIANT VTS_VARIANT ;
			InvokeHelper(0x936, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Map, XPath, &SelectionNamespace, &Repeating);
		}
		void Clear()
		{
			InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
		}
		BOOL get_Repeating()
		{
			BOOL result;
			InvokeHelper(0x938, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
			return result;
		}

		// XPath properties
	public:

	};

};